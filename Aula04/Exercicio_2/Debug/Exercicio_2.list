
Exercicio_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e68  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008188  08008188  0000a150  2**0
                  CONTENTS
  4 .ARM          00000008  08008188  08008188  00009188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008190  08008190  0000a150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008190  08008190  00009190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008194  08008194  00009194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008198  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  080081a8  0000a010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08008248  0000a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000501c  20000150  080082e8  0000a150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000516c  080082e8  0000a16c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY
 14 .debug_info   000210e8  00000000  00000000  0000a17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000410c  00000000  00000000  0002b266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  0002f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001478  00000000  00000000  00030db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004683  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eef1  00000000  00000000  000368b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d6c2  00000000  00000000  000557a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00162e66  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ff8  00000000  00000000  00162eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  00169ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08008050 	.word	0x08008050

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08008050 	.word	0x08008050

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b96a 	b.w	800053c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	460c      	mov	r4, r1
 8000288:	2b00      	cmp	r3, #0
 800028a:	d14e      	bne.n	800032a <__udivmoddi4+0xaa>
 800028c:	4694      	mov	ip, r2
 800028e:	458c      	cmp	ip, r1
 8000290:	4686      	mov	lr, r0
 8000292:	fab2 f282 	clz	r2, r2
 8000296:	d962      	bls.n	800035e <__udivmoddi4+0xde>
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0320 	rsb	r3, r2, #32
 800029e:	4091      	lsls	r1, r2
 80002a0:	fa20 f303 	lsr.w	r3, r0, r3
 80002a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a8:	4319      	orrs	r1, r3
 80002aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f f68c 	uxth.w	r6, ip
 80002b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	fb07 1114 	mls	r1, r7, r4, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb04 f106 	mul.w	r1, r4, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002d6:	f080 8112 	bcs.w	80004fe <__udivmoddi4+0x27e>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 810f 	bls.w	80004fe <__udivmoddi4+0x27e>
 80002e0:	3c02      	subs	r4, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ee:	fb07 1110 	mls	r1, r7, r0, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb00 f606 	mul.w	r6, r0, r6
 80002fa:	429e      	cmp	r6, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x94>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f100 31ff 	add.w	r1, r0, #4294967295
 8000306:	f080 80fc 	bcs.w	8000502 <__udivmoddi4+0x282>
 800030a:	429e      	cmp	r6, r3
 800030c:	f240 80f9 	bls.w	8000502 <__udivmoddi4+0x282>
 8000310:	4463      	add	r3, ip
 8000312:	3802      	subs	r0, #2
 8000314:	1b9b      	subs	r3, r3, r6
 8000316:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800031a:	2100      	movs	r1, #0
 800031c:	b11d      	cbz	r5, 8000326 <__udivmoddi4+0xa6>
 800031e:	40d3      	lsrs	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	e9c5 3200 	strd	r3, r2, [r5]
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d905      	bls.n	800033a <__udivmoddi4+0xba>
 800032e:	b10d      	cbz	r5, 8000334 <__udivmoddi4+0xb4>
 8000330:	e9c5 0100 	strd	r0, r1, [r5]
 8000334:	2100      	movs	r1, #0
 8000336:	4608      	mov	r0, r1
 8000338:	e7f5      	b.n	8000326 <__udivmoddi4+0xa6>
 800033a:	fab3 f183 	clz	r1, r3
 800033e:	2900      	cmp	r1, #0
 8000340:	d146      	bne.n	80003d0 <__udivmoddi4+0x150>
 8000342:	42a3      	cmp	r3, r4
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xcc>
 8000346:	4290      	cmp	r0, r2
 8000348:	f0c0 80f0 	bcc.w	800052c <__udivmoddi4+0x2ac>
 800034c:	1a86      	subs	r6, r0, r2
 800034e:	eb64 0303 	sbc.w	r3, r4, r3
 8000352:	2001      	movs	r0, #1
 8000354:	2d00      	cmp	r5, #0
 8000356:	d0e6      	beq.n	8000326 <__udivmoddi4+0xa6>
 8000358:	e9c5 6300 	strd	r6, r3, [r5]
 800035c:	e7e3      	b.n	8000326 <__udivmoddi4+0xa6>
 800035e:	2a00      	cmp	r2, #0
 8000360:	f040 8090 	bne.w	8000484 <__udivmoddi4+0x204>
 8000364:	eba1 040c 	sub.w	r4, r1, ip
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	fa1f f78c 	uxth.w	r7, ip
 8000370:	2101      	movs	r1, #1
 8000372:	fbb4 f6f8 	udiv	r6, r4, r8
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb08 4416 	mls	r4, r8, r6, r4
 800037e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000382:	fb07 f006 	mul.w	r0, r7, r6
 8000386:	4298      	cmp	r0, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x11c>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x11a>
 8000394:	4298      	cmp	r0, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 800039a:	4626      	mov	r6, r4
 800039c:	1a1c      	subs	r4, r3, r0
 800039e:	fa1f f38e 	uxth.w	r3, lr
 80003a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a6:	fb08 4410 	mls	r4, r8, r0, r4
 80003aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ae:	fb00 f707 	mul.w	r7, r0, r7
 80003b2:	429f      	cmp	r7, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x148>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x146>
 80003c0:	429f      	cmp	r7, r3
 80003c2:	f200 80b0 	bhi.w	8000526 <__udivmoddi4+0x2a6>
 80003c6:	4620      	mov	r0, r4
 80003c8:	1bdb      	subs	r3, r3, r7
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	e7a5      	b.n	800031c <__udivmoddi4+0x9c>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 f706 	lsr.w	r7, r2, r6
 80003da:	431f      	orrs	r7, r3
 80003dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e0:	fa04 f301 	lsl.w	r3, r4, r1
 80003e4:	ea43 030c 	orr.w	r3, r3, ip
 80003e8:	40f4      	lsrs	r4, r6
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f4:	fbb4 fef0 	udiv	lr, r4, r0
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000400:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000404:	fb0e f90c 	mul.w	r9, lr, ip
 8000408:	45a1      	cmp	r9, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90a      	bls.n	8000426 <__udivmoddi4+0x1a6>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000416:	f080 8084 	bcs.w	8000522 <__udivmoddi4+0x2a2>
 800041a:	45a1      	cmp	r9, r4
 800041c:	f240 8081 	bls.w	8000522 <__udivmoddi4+0x2a2>
 8000420:	f1ae 0e02 	sub.w	lr, lr, #2
 8000424:	443c      	add	r4, r7
 8000426:	eba4 0409 	sub.w	r4, r4, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000432:	fb00 4413 	mls	r4, r0, r3, r4
 8000436:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	45a4      	cmp	ip, r4
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1d2>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 30ff 	add.w	r0, r3, #4294967295
 8000448:	d267      	bcs.n	800051a <__udivmoddi4+0x29a>
 800044a:	45a4      	cmp	ip, r4
 800044c:	d965      	bls.n	800051a <__udivmoddi4+0x29a>
 800044e:	3b02      	subs	r3, #2
 8000450:	443c      	add	r4, r7
 8000452:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000456:	fba0 9302 	umull	r9, r3, r0, r2
 800045a:	eba4 040c 	sub.w	r4, r4, ip
 800045e:	429c      	cmp	r4, r3
 8000460:	46ce      	mov	lr, r9
 8000462:	469c      	mov	ip, r3
 8000464:	d351      	bcc.n	800050a <__udivmoddi4+0x28a>
 8000466:	d04e      	beq.n	8000506 <__udivmoddi4+0x286>
 8000468:	b155      	cbz	r5, 8000480 <__udivmoddi4+0x200>
 800046a:	ebb8 030e 	subs.w	r3, r8, lr
 800046e:	eb64 040c 	sbc.w	r4, r4, ip
 8000472:	fa04 f606 	lsl.w	r6, r4, r6
 8000476:	40cb      	lsrs	r3, r1
 8000478:	431e      	orrs	r6, r3
 800047a:	40cc      	lsrs	r4, r1
 800047c:	e9c5 6400 	strd	r6, r4, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	e750      	b.n	8000326 <__udivmoddi4+0xa6>
 8000484:	f1c2 0320 	rsb	r3, r2, #32
 8000488:	fa20 f103 	lsr.w	r1, r0, r3
 800048c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000490:	fa24 f303 	lsr.w	r3, r4, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	430c      	orrs	r4, r1
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa00 fe02 	lsl.w	lr, r0, r2
 80004a0:	fa1f f78c 	uxth.w	r7, ip
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b2:	fb00 f107 	mul.w	r1, r0, r7
 80004b6:	4299      	cmp	r1, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x24c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f100 36ff 	add.w	r6, r0, #4294967295
 80004c2:	d22c      	bcs.n	800051e <__udivmoddi4+0x29e>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d92a      	bls.n	800051e <__udivmoddi4+0x29e>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d4:	fb08 3311 	mls	r3, r8, r1, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb01 f307 	mul.w	r3, r1, r7
 80004e0:	42a3      	cmp	r3, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x276>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ec:	d213      	bcs.n	8000516 <__udivmoddi4+0x296>
 80004ee:	42a3      	cmp	r3, r4
 80004f0:	d911      	bls.n	8000516 <__udivmoddi4+0x296>
 80004f2:	3902      	subs	r1, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	1ae4      	subs	r4, r4, r3
 80004f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004fc:	e739      	b.n	8000372 <__udivmoddi4+0xf2>
 80004fe:	4604      	mov	r4, r0
 8000500:	e6f0      	b.n	80002e4 <__udivmoddi4+0x64>
 8000502:	4608      	mov	r0, r1
 8000504:	e706      	b.n	8000314 <__udivmoddi4+0x94>
 8000506:	45c8      	cmp	r8, r9
 8000508:	d2ae      	bcs.n	8000468 <__udivmoddi4+0x1e8>
 800050a:	ebb9 0e02 	subs.w	lr, r9, r2
 800050e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000512:	3801      	subs	r0, #1
 8000514:	e7a8      	b.n	8000468 <__udivmoddi4+0x1e8>
 8000516:	4631      	mov	r1, r6
 8000518:	e7ed      	b.n	80004f6 <__udivmoddi4+0x276>
 800051a:	4603      	mov	r3, r0
 800051c:	e799      	b.n	8000452 <__udivmoddi4+0x1d2>
 800051e:	4630      	mov	r0, r6
 8000520:	e7d4      	b.n	80004cc <__udivmoddi4+0x24c>
 8000522:	46d6      	mov	lr, sl
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1a6>
 8000526:	4463      	add	r3, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74d      	b.n	80003c8 <__udivmoddi4+0x148>
 800052c:	4606      	mov	r6, r0
 800052e:	4623      	mov	r3, r4
 8000530:	4608      	mov	r0, r1
 8000532:	e70f      	b.n	8000354 <__udivmoddi4+0xd4>
 8000534:	3e02      	subs	r6, #2
 8000536:	4463      	add	r3, ip
 8000538:	e730      	b.n	800039c <__udivmoddi4+0x11c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fd49 	bl	8000fda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f844 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f960 	bl	8000810 <MX_GPIO_Init>
  MX_ETH_Init();
 8000550:	f000 f8b2 	bl	80006b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f8fe 	bl	8000754 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000558:	f000 f92c 	bl	80007b4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f004 f988 	bl	8004870 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem01 */
  Sem01Handle = osSemaphoreNew(2, 0, &Sem01_attributes);
 8000560:	4a11      	ldr	r2, [pc, #68]	@ (80005a8 <main+0x68>)
 8000562:	2100      	movs	r1, #0
 8000564:	2002      	movs	r0, #2
 8000566:	f004 fac1 	bl	8004aec <osSemaphoreNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <main+0x6c>)
 800056e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(Task_01, NULL, &Task01_attributes);
 8000570:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <main+0x70>)
 8000572:	2100      	movs	r1, #0
 8000574:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <main+0x74>)
 8000576:	f004 f9e5 	bl	8004944 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <main+0x78>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(Task_02, NULL, &Task02_attributes);
 8000580:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <main+0x7c>)
 8000582:	2100      	movs	r1, #0
 8000584:	480e      	ldr	r0, [pc, #56]	@ (80005c0 <main+0x80>)
 8000586:	f004 f9dd 	bl	8004944 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <main+0x84>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(Task_03, NULL, &Task03_attributes);
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <main+0x88>)
 8000592:	2100      	movs	r1, #0
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <main+0x8c>)
 8000596:	f004 f9d5 	bl	8004944 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <main+0x90>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f004 f99a 	bl	80048d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <main+0x64>
 80005a8:	08008160 	.word	0x08008160
 80005ac:	200007c8 	.word	0x200007c8
 80005b0:	080080f4 	.word	0x080080f4
 80005b4:	080009ad 	.word	0x080009ad
 80005b8:	200007bc 	.word	0x200007bc
 80005bc:	08008118 	.word	0x08008118
 80005c0:	080009f5 	.word	0x080009f5
 80005c4:	200007c0 	.word	0x200007c0
 80005c8:	0800813c 	.word	0x0800813c
 80005cc:	08000a3d 	.word	0x08000a3d
 80005d0:	200007c4 	.word	0x200007c4

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2234      	movs	r2, #52	@ 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f007 fcfa 	bl	8007fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f8:	f001 fc88 	bl	8001f0c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b2c      	ldr	r3, [pc, #176]	@ (80006b0 <SystemClock_Config+0xdc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a2b      	ldr	r2, [pc, #172]	@ (80006b0 <SystemClock_Config+0xdc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000614:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <SystemClock_Config+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800061c:	4a25      	ldr	r2, [pc, #148]	@ (80006b4 <SystemClock_Config+0xe0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000648:	2360      	movs	r3, #96	@ 0x60
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fcb5 	bl	8001fcc <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 fa1e 	bl	8000aa8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066c:	f001 fc5e 	bl	8001f2c <HAL_PWREx_EnableOverDrive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000676:	f000 fa17 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2103      	movs	r1, #3
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ff46 	bl	8002528 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006a2:	f000 fa01 	bl	8000aa8 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_ETH_Init+0x84>)
 80006be:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <MX_ETH_Init+0x88>)
 80006c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006d0:	22e1      	movs	r2, #225	@ 0xe1
 80006d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_ETH_Init+0x84>)
 80006e8:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_ETH_Init+0x84>)
 80006ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_ETH_Init+0x84>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <MX_ETH_Init+0x90>)
 80006f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_ETH_Init+0x84>)
 80006fc:	4a13      	ldr	r2, [pc, #76]	@ (800074c <MX_ETH_Init+0x94>)
 80006fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_ETH_Init+0x84>)
 8000702:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000706:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_ETH_Init+0x84>)
 800070a:	f000 fd99 	bl	8001240 <HAL_ETH_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f9c8 	bl	8000aa8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000718:	2238      	movs	r2, #56	@ 0x38
 800071a:	2100      	movs	r1, #0
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <MX_ETH_Init+0x98>)
 800071e:	f007 fc5d 	bl	8007fdc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_ETH_Init+0x98>)
 8000724:	2221      	movs	r2, #33	@ 0x21
 8000726:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_ETH_Init+0x98>)
 800072a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800072e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_ETH_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200001a4 	.word	0x200001a4
 8000740:	40028000 	.word	0x40028000
 8000744:	200007cc 	.word	0x200007cc
 8000748:	200000b0 	.word	0x200000b0
 800074c:	20000010 	.word	0x20000010
 8000750:	2000016c 	.word	0x2000016c

08000754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	@ (80007b0 <MX_USART3_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000798:	f003 f814 	bl	80037c4 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f981 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000254 	.word	0x20000254
 80007b0:	40004800 	.word	0x40004800

080007b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2206      	movs	r2, #6
 80007c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2201      	movs	r2, #1
 80007dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	f001 fa4e 	bl	8001c98 <HAL_PCD_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f951 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200002dc 	.word	0x200002dc

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	@ 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b4b      	ldr	r3, [pc, #300]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a4a      	ldr	r2, [pc, #296]	@ (8000954 <MX_GPIO_Init+0x144>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b48      	ldr	r3, [pc, #288]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b45      	ldr	r3, [pc, #276]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a44      	ldr	r2, [pc, #272]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b42      	ldr	r3, [pc, #264]	@ (8000954 <MX_GPIO_Init+0x144>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b3f      	ldr	r3, [pc, #252]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a3e      	ldr	r2, [pc, #248]	@ (8000954 <MX_GPIO_Init+0x144>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a38      	ldr	r2, [pc, #224]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <MX_GPIO_Init+0x144>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a32      	ldr	r2, [pc, #200]	@ (8000954 <MX_GPIO_Init+0x144>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <MX_GPIO_Init+0x144>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000954 <MX_GPIO_Init+0x144>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <MX_GPIO_Init+0x144>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008bc:	4826      	ldr	r0, [pc, #152]	@ (8000958 <MX_GPIO_Init+0x148>)
 80008be:	f001 f9b9 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2140      	movs	r1, #64	@ 0x40
 80008c6:	4825      	ldr	r0, [pc, #148]	@ (800095c <MX_GPIO_Init+0x14c>)
 80008c8:	f001 f9b4 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	481f      	ldr	r0, [pc, #124]	@ (8000960 <MX_GPIO_Init+0x150>)
 80008e4:	f000 fffa 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4815      	ldr	r0, [pc, #84]	@ (8000958 <MX_GPIO_Init+0x148>)
 8000902:	f000 ffeb 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000906:	2340      	movs	r3, #64	@ 0x40
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	480f      	ldr	r0, [pc, #60]	@ (800095c <MX_GPIO_Init+0x14c>)
 800091e:	f000 ffdd 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000922:	2380      	movs	r3, #128	@ 0x80
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <MX_GPIO_Init+0x14c>)
 8000936:	f000 ffd1 	bl	80018dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2028      	movs	r0, #40	@ 0x28
 8000940:	f000 fc54 	bl	80011ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000944:	2028      	movs	r0, #40	@ 0x28
 8000946:	f000 fc6d 	bl	8001224 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	@ 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40020400 	.word	0x40020400
 800095c:	40021800 	.word	0x40021800
 8000960:	40020800 	.word	0x40020800

08000964 <HAL_GPIO_EXTI_Callback>:
  * @brief  Function implementing the Task01 thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_01 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000974:	d110      	bne.n	8000998 <HAL_GPIO_EXTI_Callback+0x34>
		char *str5 = "Liberando \n";
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000978:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t *)str5, strlen(str5),100);
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f7ff fc60 	bl	8000240 <strlen>
 8000980:	4603      	mov	r3, r0
 8000982:	b29a      	uxth	r2, r3
 8000984:	2364      	movs	r3, #100	@ 0x64
 8000986:	68f9      	ldr	r1, [r7, #12]
 8000988:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <HAL_GPIO_EXTI_Callback+0x40>)
 800098a:	f002 ff69 	bl	8003860 <HAL_UART_Transmit>
		osSemaphoreRelease(Sem01Handle);
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_GPIO_EXTI_Callback+0x44>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f004 f9ac 	bl	8004cf0 <osSemaphoreRelease>
	}
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	08008088 	.word	0x08008088
 80009a4:	20000254 	.word	0x20000254
 80009a8:	200007c8 	.word	0x200007c8

080009ac <Task_01>:

void Task_01(void *argument)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char *str1 = "Task 01 -> Entrando \n";
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <Task_01+0x3c>)
 80009b6:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str1, strlen(str1),100);
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff fc41 	bl	8000240 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	2364      	movs	r3, #100	@ 0x64
 80009c4:	68f9      	ldr	r1, [r7, #12]
 80009c6:	4809      	ldr	r0, [pc, #36]	@ (80009ec <Task_01+0x40>)
 80009c8:	f002 ff4a 	bl	8003860 <HAL_UART_Transmit>
	  osDelay(1000);
 80009cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d0:	f004 f85e 	bl	8004a90 <osDelay>
	  osSemaphoreAcquire(Sem01Handle, osWaitForever);
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <Task_01+0x44>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 f921 	bl	8004c24 <osSemaphoreAcquire>
  {
 80009e2:	bf00      	nop
 80009e4:	e7e6      	b.n	80009b4 <Task_01+0x8>
 80009e6:	bf00      	nop
 80009e8:	08008094 	.word	0x08008094
 80009ec:	20000254 	.word	0x20000254
 80009f0:	200007c8 	.word	0x200007c8

080009f4 <Task_02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_02 */
void Task_02(void *argument)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_02 */
  /* Infinite loop */
  for(;;)
  {
	  char *str2 = "Task 02 -> Entrando \n";
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <Task_02+0x3c>)
 80009fe:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str2, strlen(str2),100);
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f7ff fc1d 	bl	8000240 <strlen>
 8000a06:	4603      	mov	r3, r0
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	2364      	movs	r3, #100	@ 0x64
 8000a0c:	68f9      	ldr	r1, [r7, #12]
 8000a0e:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <Task_02+0x40>)
 8000a10:	f002 ff26 	bl	8003860 <HAL_UART_Transmit>
	  osDelay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a18:	f004 f83a 	bl	8004a90 <osDelay>
	  osSemaphoreAcquire(Sem01Handle, osWaitForever);
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <Task_02+0x44>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f04f 31ff 	mov.w	r1, #4294967295
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 f8fd 	bl	8004c24 <osSemaphoreAcquire>
  {
 8000a2a:	bf00      	nop
 8000a2c:	e7e6      	b.n	80009fc <Task_02+0x8>
 8000a2e:	bf00      	nop
 8000a30:	080080ac 	.word	0x080080ac
 8000a34:	20000254 	.word	0x20000254
 8000a38:	200007c8 	.word	0x200007c8

08000a3c <Task_03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_03 */
void Task_03(void *argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_03 */
  /* Infinite loop */
  for(;;)
  {
	  char *str3 = "Task 03 -> Entrando \n";
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <Task_03+0x3c>)
 8000a46:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str3, strlen(str3),100);
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fbf9 	bl	8000240 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	2364      	movs	r3, #100	@ 0x64
 8000a54:	68f9      	ldr	r1, [r7, #12]
 8000a56:	4809      	ldr	r0, [pc, #36]	@ (8000a7c <Task_03+0x40>)
 8000a58:	f002 ff02 	bl	8003860 <HAL_UART_Transmit>
	  osDelay(1000);
 8000a5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a60:	f004 f816 	bl	8004a90 <osDelay>
	  osSemaphoreAcquire(Sem01Handle, osWaitForever);
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <Task_03+0x44>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 f8d9 	bl	8004c24 <osSemaphoreAcquire>
  {
 8000a72:	bf00      	nop
 8000a74:	e7e6      	b.n	8000a44 <Task_03+0x8>
 8000a76:	bf00      	nop
 8000a78:	080080c4 	.word	0x080080c4
 8000a7c:	20000254 	.word	0x20000254
 8000a80:	200007c8 	.word	0x200007c8

08000a84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d101      	bne.n	8000a9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a96:	f000 faad 	bl	8000ff4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <Error_Handler+0x8>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	210f      	movs	r1, #15
 8000aee:	f06f 0001 	mvn.w	r0, #1
 8000af2:	f000 fb7b 	bl	80011ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	@ 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a4e      	ldr	r2, [pc, #312]	@ (8000c5c <HAL_ETH_MspInit+0x158>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	f040 8096 	bne.w	8000c54 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b28:	4b4d      	ldr	r3, [pc, #308]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2c:	4a4c      	ldr	r2, [pc, #304]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b34:	4b4a      	ldr	r3, [pc, #296]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b3c:	623b      	str	r3, [r7, #32]
 8000b3e:	6a3b      	ldr	r3, [r7, #32]
 8000b40:	4b47      	ldr	r3, [pc, #284]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	4a46      	ldr	r2, [pc, #280]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4c:	4b44      	ldr	r3, [pc, #272]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	4b41      	ldr	r3, [pc, #260]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5c:	4a40      	ldr	r2, [pc, #256]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b64:	4b3e      	ldr	r3, [pc, #248]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	4b3b      	ldr	r3, [pc, #236]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	4a3a      	ldr	r2, [pc, #232]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7c:	4b38      	ldr	r3, [pc, #224]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b35      	ldr	r3, [pc, #212]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	4a34      	ldr	r2, [pc, #208]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b94:	4b32      	ldr	r3, [pc, #200]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	f043 0302 	orr.w	r3, r3, #2
 8000baa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bac:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb8:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	4a28      	ldr	r2, [pc, #160]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc4:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <HAL_ETH_MspInit+0x15c>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd0:	2332      	movs	r3, #50	@ 0x32
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	@ (8000c64 <HAL_ETH_MspInit+0x160>)
 8000bec:	f000 fe76 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf0:	2386      	movs	r3, #134	@ 0x86
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4817      	ldr	r0, [pc, #92]	@ (8000c68 <HAL_ETH_MspInit+0x164>)
 8000c0c:	f000 fe66 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480f      	ldr	r0, [pc, #60]	@ (8000c6c <HAL_ETH_MspInit+0x168>)
 8000c2e:	f000 fe55 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c32:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c44:	230b      	movs	r3, #11
 8000c46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4808      	ldr	r0, [pc, #32]	@ (8000c70 <HAL_ETH_MspInit+0x16c>)
 8000c50:	f000 fe44 	bl	80018dc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	@ 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40028000 	.word	0x40028000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40021800 	.word	0x40021800

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0ae      	sub	sp, #184	@ 0xb8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2290      	movs	r2, #144	@ 0x90
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f007 f9a1 	bl	8007fdc <memset>
  if(huart->Instance==USART3)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a22      	ldr	r2, [pc, #136]	@ (8000d28 <HAL_UART_MspInit+0xb4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d13c      	bne.n	8000d1e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ca4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ca8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 fe90 	bl	80029d8 <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cbe:	f7ff fef3 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a19      	ldr	r2, [pc, #100]	@ (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <HAL_UART_MspInit+0xb8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <HAL_UART_MspInit+0xb8>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <HAL_UART_MspInit+0xb8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d12:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <HAL_UART_MspInit+0xbc>)
 8000d1a:	f000 fddf 	bl	80018dc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	37b8      	adds	r7, #184	@ 0xb8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004800 	.word	0x40004800
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020c00 	.word	0x40020c00

08000d34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b0ae      	sub	sp, #184	@ 0xb8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2290      	movs	r2, #144	@ 0x90
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f007 f941 	bl	8007fdc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d62:	d159      	bne.n	8000e18 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d68:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 fe2f 	bl	80029d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d80:	f7ff fe92 	bl	8000aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b26      	ldr	r3, [pc, #152]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d88:	4a25      	ldr	r2, [pc, #148]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d90:	4b23      	ldr	r3, [pc, #140]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d9c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000da0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000db6:	230a      	movs	r3, #10
 8000db8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4818      	ldr	r0, [pc, #96]	@ (8000e24 <HAL_PCD_MspInit+0xf0>)
 8000dc4:	f000 fd8a 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4810      	ldr	r0, [pc, #64]	@ (8000e24 <HAL_PCD_MspInit+0xf0>)
 8000de4:	f000 fd7a 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000de8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dec:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000df2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000df4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e04:	4a06      	ldr	r2, [pc, #24]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <HAL_PCD_MspInit+0xec>)
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e18:	bf00      	nop
 8000e1a:	37b8      	adds	r7, #184	@ 0xb8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e38:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef4 <HAL_InitTick+0xcc>)
 8000e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ef4 <HAL_InitTick+0xcc>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <HAL_InitTick+0xcc>)
 8000e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e50:	f107 020c 	add.w	r2, r7, #12
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fd8a 	bl	8002974 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e60:	f001 fd74 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8000e64:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e68:	4a23      	ldr	r2, [pc, #140]	@ (8000ef8 <HAL_InitTick+0xd0>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	3b01      	subs	r3, #1
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e74:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <HAL_InitTick+0xd4>)
 8000e76:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <HAL_InitTick+0xd8>)
 8000e78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <HAL_InitTick+0xd4>)
 8000e7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e82:	4a1e      	ldr	r2, [pc, #120]	@ (8000efc <HAL_InitTick+0xd4>)
 8000e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <HAL_InitTick+0xd4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <HAL_InitTick+0xd4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_InitTick+0xd4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e9a:	4818      	ldr	r0, [pc, #96]	@ (8000efc <HAL_InitTick+0xd4>)
 8000e9c:	f002 f9c4 	bl	8003228 <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d11b      	bne.n	8000ee6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000eae:	4813      	ldr	r0, [pc, #76]	@ (8000efc <HAL_InitTick+0xd4>)
 8000eb0:	f002 fa1c 	bl	80032ec <HAL_TIM_Base_Start_IT>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000eba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d111      	bne.n	8000ee6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ec2:	2019      	movs	r0, #25
 8000ec4:	f000 f9ae 	bl	8001224 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	d808      	bhi.n	8000ee0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	2019      	movs	r0, #25
 8000ed4:	f000 f98a 	bl	80011ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <HAL_InitTick+0xdc>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e002      	b.n	8000ee6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3730      	adds	r7, #48	@ 0x30
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	431bde83 	.word	0x431bde83
 8000efc:	200007d4 	.word	0x200007d4
 8000f00:	40010000 	.word	0x40010000
 8000f04:	20000004 	.word	0x20000004

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f44:	4802      	ldr	r0, [pc, #8]	@ (8000f50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f46:	f002 fa49 	bl	80033dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200007d4 	.word	0x200007d4

08000f54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f5c:	f000 fe84 	bl	8001c68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8c:	f7ff ffea 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	@ (8000fc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f007 f819 	bl	8007fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fac1 	bl	8000540 <main>
  bx  lr    
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fcc:	08008198 	.word	0x08008198
  ldr r2, =_sbss
 8000fd0:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000fd4:	2000516c 	.word	0x2000516c

08000fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC_IRQHandler>

08000fda <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f8f9 	bl	80011d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe4:	200f      	movs	r0, #15
 8000fe6:	f7ff ff1f 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fea:	f7ff fd63 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	20000820 	.word	0x20000820

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000820 	.word	0x20000820

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	05fa0000 	.word	0x05fa0000

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	@ (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff4c 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011fe:	f7ff ff61 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001202:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	6978      	ldr	r0, [r7, #20]
 800120a:	f7ff ffb1 	bl	8001170 <NVIC_EncodePriority>
 800120e:	4602      	mov	r2, r0
 8001210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff80 	bl	800111c <__NVIC_SetPriority>
}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff54 	bl	80010e0 <__NVIC_EnableIRQ>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e086      	b.n	8001360 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001258:	2b00      	cmp	r3, #0
 800125a:	d106      	bne.n	800126a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2220      	movs	r2, #32
 8001260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fc4d 	bl	8000b04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	4b3f      	ldr	r3, [pc, #252]	@ (8001368 <HAL_ETH_Init+0x128>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	4a3e      	ldr	r2, [pc, #248]	@ (8001368 <HAL_ETH_Init+0x128>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001274:	6453      	str	r3, [r2, #68]	@ 0x44
 8001276:	4b3c      	ldr	r3, [pc, #240]	@ (8001368 <HAL_ETH_Init+0x128>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001282:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <HAL_ETH_Init+0x12c>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a39      	ldr	r2, [pc, #228]	@ (800136c <HAL_ETH_Init+0x12c>)
 8001288:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800128c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800128e:	4b37      	ldr	r3, [pc, #220]	@ (800136c <HAL_ETH_Init+0x12c>)
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	4935      	ldr	r1, [pc, #212]	@ (800136c <HAL_ETH_Init+0x12c>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <HAL_ETH_Init+0x12c>)
 800129e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b8:	f7ff feb0 	bl	800101c <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012be:	e011      	b.n	80012e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012c0:	f7ff feac 	bl	800101c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012ce:	d909      	bls.n	80012e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2204      	movs	r2, #4
 80012d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	22e0      	movs	r2, #224	@ 0xe0
 80012dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e03d      	b.n	8001360 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1e4      	bne.n	80012c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f97a 	bl	80015f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fa25 	bl	800174c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fa7b 	bl	80017fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	461a      	mov	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f9e3 	bl	80016dc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001324:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_ETH_Init+0x130>)
 8001334:	430b      	orrs	r3, r1
 8001336:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800134a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2210      	movs	r2, #16
 800135a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	00020060 	.word	0x00020060

08001374 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <ETH_SetMACConfig+0x164>)
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	7b9b      	ldrb	r3, [r3, #14]
 8001392:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	7c12      	ldrb	r2, [r2, #16]
 8001398:	2a00      	cmp	r2, #0
 800139a:	d102      	bne.n	80013a2 <ETH_SetMACConfig+0x2e>
 800139c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013a0:	e000      	b.n	80013a4 <ETH_SetMACConfig+0x30>
 80013a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	7c52      	ldrb	r2, [r2, #17]
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d102      	bne.n	80013b4 <ETH_SetMACConfig+0x40>
 80013ae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013b2:	e000      	b.n	80013b6 <ETH_SetMACConfig+0x42>
 80013b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7fdb      	ldrb	r3, [r3, #31]
 80013c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	7f92      	ldrb	r2, [r2, #30]
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	d102      	bne.n	80013da <ETH_SetMACConfig+0x66>
 80013d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013d8:	e000      	b.n	80013dc <ETH_SetMACConfig+0x68>
 80013da:	2200      	movs	r2, #0
                        macconf->Speed |
 80013dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7f1b      	ldrb	r3, [r3, #28]
 80013e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	791b      	ldrb	r3, [r3, #4]
 80013f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	d102      	bne.n	8001404 <ETH_SetMACConfig+0x90>
 80013fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001402:	e000      	b.n	8001406 <ETH_SetMACConfig+0x92>
 8001404:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001406:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	7bdb      	ldrb	r3, [r3, #15]
 800140c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800140e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001414:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800141c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800141e:	4313      	orrs	r3, r2
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001436:	2001      	movs	r0, #1
 8001438:	f7ff fdfc 	bl	8001034 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001452:	4013      	ands	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800145a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001462:	2a00      	cmp	r2, #0
 8001464:	d101      	bne.n	800146a <ETH_SetMACConfig+0xf6>
 8001466:	2280      	movs	r2, #128	@ 0x80
 8001468:	e000      	b.n	800146c <ETH_SetMACConfig+0xf8>
 800146a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800146c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001472:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800147a:	2a01      	cmp	r2, #1
 800147c:	d101      	bne.n	8001482 <ETH_SetMACConfig+0x10e>
 800147e:	2208      	movs	r2, #8
 8001480:	e000      	b.n	8001484 <ETH_SetMACConfig+0x110>
 8001482:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001484:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800148c:	2a01      	cmp	r2, #1
 800148e:	d101      	bne.n	8001494 <ETH_SetMACConfig+0x120>
 8001490:	2204      	movs	r2, #4
 8001492:	e000      	b.n	8001496 <ETH_SetMACConfig+0x122>
 8001494:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001496:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800149e:	2a01      	cmp	r2, #1
 80014a0:	d101      	bne.n	80014a6 <ETH_SetMACConfig+0x132>
 80014a2:	2202      	movs	r2, #2
 80014a4:	e000      	b.n	80014a8 <ETH_SetMACConfig+0x134>
 80014a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014a8:	4313      	orrs	r3, r2
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68fa      	ldr	r2, [r7, #12]
 80014b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff fdb7 	bl	8001034 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	fd20810f 	.word	0xfd20810f

080014dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <ETH_SetDMAConfig+0x110>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	7b1b      	ldrb	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <ETH_SetDMAConfig+0x2c>
 8001502:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001506:	e000      	b.n	800150a <ETH_SetDMAConfig+0x2e>
 8001508:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	7b5b      	ldrb	r3, [r3, #13]
 800150e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001510:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	7f52      	ldrb	r2, [r2, #29]
 8001516:	2a00      	cmp	r2, #0
 8001518:	d102      	bne.n	8001520 <ETH_SetDMAConfig+0x44>
 800151a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800151e:	e000      	b.n	8001522 <ETH_SetDMAConfig+0x46>
 8001520:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001522:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	7b9b      	ldrb	r3, [r3, #14]
 8001528:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800152a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001530:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	7f1b      	ldrb	r3, [r3, #28]
 8001536:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7f9b      	ldrb	r3, [r3, #30]
 800153e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001540:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001546:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800154e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001550:	4313      	orrs	r3, r2
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001560:	461a      	mov	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001572:	2001      	movs	r0, #1
 8001574:	f7ff fd5e 	bl	8001034 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001580:	461a      	mov	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	791b      	ldrb	r3, [r3, #4]
 800158a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001590:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001596:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800159c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff fd2f 	bl	8001034 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	f8de3f23 	.word	0xf8de3f23

080015f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0a6      	sub	sp, #152	@ 0x98
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015f8:	2301      	movs	r3, #1
 80015fa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001620:	2301      	movs	r3, #1
 8001622:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001632:	2300      	movs	r3, #0
 8001634:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800163c:	2300      	movs	r3, #0
 800163e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001658:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800165c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800165e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800166a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800166e:	4619      	mov	r1, r3
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fe7f 	bl	8001374 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001676:	2301      	movs	r3, #1
 8001678:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800167a:	2301      	movs	r3, #1
 800167c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001684:	2301      	movs	r3, #1
 8001686:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001698:	2300      	movs	r3, #0
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800169c:	2301      	movs	r3, #1
 800169e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016b0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff05 	bl	80014dc <ETH_SetDMAConfig>
}
 80016d2:	bf00      	nop
 80016d4:	3798      	adds	r7, #152	@ 0x98
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3305      	adds	r3, #5
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	3204      	adds	r2, #4
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <ETH_MACAddressConfig+0x68>)
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3303      	adds	r3, #3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3302      	adds	r3, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4313      	orrs	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <ETH_MACAddressConfig+0x6c>)
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6013      	str	r3, [r2, #0]
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40028040 	.word	0x40028040
 8001748:	40028044 	.word	0x40028044

0800174c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e03e      	b.n	80017d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68d9      	ldr	r1, [r3, #12]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	3206      	adds	r2, #6
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d80c      	bhi.n	80017bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68d9      	ldr	r1, [r3, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	e004      	b.n	80017c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d9bd      	bls.n	800175a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e048      	b.n	800189e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6919      	ldr	r1, [r3, #16]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001848:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	3212      	adds	r2, #18
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d80c      	bhi.n	800188e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6919      	ldr	r1, [r3, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	e004      	b.n	8001898 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	461a      	mov	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d9b3      	bls.n	800180c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ce:	60da      	str	r2, [r3, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e175      	b.n	8001be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	f040 8164 	bne.w	8001be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	2b01      	cmp	r3, #1
 8001924:	d005      	beq.n	8001932 <HAL_GPIO_Init+0x56>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 0303 	and.w	r3, r3, #3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d130      	bne.n	8001994 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001968:	2201      	movs	r2, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 0201 	and.w	r2, r3, #1
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b03      	cmp	r3, #3
 800199e:	d017      	beq.n	80019d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d123      	bne.n	8001a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	69b9      	ldr	r1, [r7, #24]
 8001a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	2203      	movs	r2, #3
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0203 	and.w	r2, r3, #3
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80be 	beq.w	8001be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b66      	ldr	r3, [pc, #408]	@ (8001c00 <HAL_GPIO_Init+0x324>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a65      	ldr	r2, [pc, #404]	@ (8001c00 <HAL_GPIO_Init+0x324>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b63      	ldr	r3, [pc, #396]	@ (8001c00 <HAL_GPIO_Init+0x324>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a7e:	4a61      	ldr	r2, [pc, #388]	@ (8001c04 <HAL_GPIO_Init+0x328>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	@ (8001c08 <HAL_GPIO_Init+0x32c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d037      	beq.n	8001b1a <HAL_GPIO_Init+0x23e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a57      	ldr	r2, [pc, #348]	@ (8001c0c <HAL_GPIO_Init+0x330>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d031      	beq.n	8001b16 <HAL_GPIO_Init+0x23a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a56      	ldr	r2, [pc, #344]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d02b      	beq.n	8001b12 <HAL_GPIO_Init+0x236>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a55      	ldr	r2, [pc, #340]	@ (8001c14 <HAL_GPIO_Init+0x338>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x232>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a54      	ldr	r2, [pc, #336]	@ (8001c18 <HAL_GPIO_Init+0x33c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x22e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a53      	ldr	r2, [pc, #332]	@ (8001c1c <HAL_GPIO_Init+0x340>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x22a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <HAL_GPIO_Init+0x344>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a51      	ldr	r2, [pc, #324]	@ (8001c24 <HAL_GPIO_Init+0x348>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a50      	ldr	r2, [pc, #320]	@ (8001c28 <HAL_GPIO_Init+0x34c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4f      	ldr	r2, [pc, #316]	@ (8001c2c <HAL_GPIO_Init+0x350>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001af2:	2309      	movs	r3, #9
 8001af4:	e012      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001af6:	230a      	movs	r3, #10
 8001af8:	e010      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001afa:	2308      	movs	r3, #8
 8001afc:	e00e      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b2c:	4935      	ldr	r1, [pc, #212]	@ (8001c04 <HAL_GPIO_Init+0x328>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <HAL_GPIO_Init+0x354>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5e:	4a34      	ldr	r2, [pc, #208]	@ (8001c30 <HAL_GPIO_Init+0x354>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b64:	4b32      	ldr	r3, [pc, #200]	@ (8001c30 <HAL_GPIO_Init+0x354>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b88:	4a29      	ldr	r2, [pc, #164]	@ (8001c30 <HAL_GPIO_Init+0x354>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8e:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <HAL_GPIO_Init+0x354>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c30 <HAL_GPIO_Init+0x354>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <HAL_GPIO_Init+0x354>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	@ (8001c30 <HAL_GPIO_Init+0x354>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f ae86 	bls.w	80018fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3724      	adds	r7, #36	@ 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40021400 	.word	0x40021400
 8001c20:	40021800 	.word	0x40021800
 8001c24:	40021c00 	.word	0x40021c00
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40022400 	.word	0x40022400
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c72:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c7e:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fe6c 	bl	8000964 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40013c00 	.word	0x40013c00

08001c98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e108      	b.n	8001ebc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d106      	bne.n	8001cca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff f835 	bl	8000d34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cd8:	d102      	bne.n	8001ce0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 fb1f 	bl	8004328 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7c1a      	ldrb	r2, [r3, #16]
 8001cf2:	f88d 2000 	strb.w	r2, [sp]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cfa:	f002 fabb 	bl	8004274 <USB_CoreInit>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0d5      	b.n	8001ebc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 fb17 	bl	800434a <USB_SetCurrentMode>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0c6      	b.n	8001ebc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e04a      	b.n	8001dca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	3315      	adds	r3, #21
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3314      	adds	r3, #20
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	b298      	uxth	r0, r3
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	332e      	adds	r3, #46	@ 0x2e
 8001d70:	4602      	mov	r2, r0
 8001d72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	3318      	adds	r3, #24
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	331c      	adds	r3, #28
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3320      	adds	r3, #32
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3324      	adds	r3, #36	@ 0x24
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3af      	bcc.n	8001d34 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e044      	b.n	8001e64 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4413      	add	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	440b      	add	r3, r1
 8001de8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	3301      	adds	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	791b      	ldrb	r3, [r3, #4]
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d3b5      	bcc.n	8001dda <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7c1a      	ldrb	r2, [r3, #16]
 8001e76:	f88d 2000 	strb.w	r2, [sp]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7e:	f002 fab1 	bl	80043e4 <USB_DevInit>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e013      	b.n	8001ebc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7b1b      	ldrb	r3, [r3, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f80a 	bl	8001ec4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fc6c 	bl	8004792 <USB_DevDisconnect>

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	10000003 	.word	0x10000003

08001f0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a04      	ldr	r2, [pc, #16]	@ (8001f28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40007000 	.word	0x40007000

08001f2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	4a22      	ldr	r2, [pc, #136]	@ (8001fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f5a:	f7ff f85f 	bl	800101c <HAL_GetTick>
 8001f5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f60:	e009      	b.n	8001f76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f62:	f7ff f85b 	bl	800101c <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f70:	d901      	bls.n	8001f76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e022      	b.n	8001fbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f76:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f82:	d1ee      	bne.n	8001f62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f84:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f90:	f7ff f844 	bl	800101c <HAL_GetTick>
 8001f94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f96:	e009      	b.n	8001fac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f98:	f7ff f840 	bl	800101c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fa6:	d901      	bls.n	8001fac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e007      	b.n	8001fbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fb8:	d1ee      	bne.n	8001f98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000

08001fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e29b      	b.n	800251a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8087 	beq.w	80020fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ff0:	4b96      	ldr	r3, [pc, #600]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d00c      	beq.n	8002016 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffc:	4b93      	ldr	r3, [pc, #588]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	2b08      	cmp	r3, #8
 8002006:	d112      	bne.n	800202e <HAL_RCC_OscConfig+0x62>
 8002008:	4b90      	ldr	r3, [pc, #576]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002010:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002014:	d10b      	bne.n	800202e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002016:	4b8d      	ldr	r3, [pc, #564]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d06c      	beq.n	80020fc <HAL_RCC_OscConfig+0x130>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d168      	bne.n	80020fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e275      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002036:	d106      	bne.n	8002046 <HAL_RCC_OscConfig+0x7a>
 8002038:	4b84      	ldr	r3, [pc, #528]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a83      	ldr	r2, [pc, #524]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	e02e      	b.n	80020a4 <HAL_RCC_OscConfig+0xd8>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10c      	bne.n	8002068 <HAL_RCC_OscConfig+0x9c>
 800204e:	4b7f      	ldr	r3, [pc, #508]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7e      	ldr	r2, [pc, #504]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b7c      	ldr	r3, [pc, #496]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7b      	ldr	r2, [pc, #492]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	e01d      	b.n	80020a4 <HAL_RCC_OscConfig+0xd8>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0xc0>
 8002072:	4b76      	ldr	r3, [pc, #472]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a75      	ldr	r2, [pc, #468]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b73      	ldr	r3, [pc, #460]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a72      	ldr	r2, [pc, #456]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00b      	b.n	80020a4 <HAL_RCC_OscConfig+0xd8>
 800208c:	4b6f      	ldr	r3, [pc, #444]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6e      	ldr	r2, [pc, #440]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b6c      	ldr	r3, [pc, #432]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a6b      	ldr	r2, [pc, #428]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800209e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d013      	beq.n	80020d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7fe ffb6 	bl	800101c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7fe ffb2 	bl	800101c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	@ 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e229      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b61      	ldr	r3, [pc, #388]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0xe8>
 80020d2:	e014      	b.n	80020fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7fe ffa2 	bl	800101c <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe ff9e 	bl	800101c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	@ 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e215      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	4b57      	ldr	r3, [pc, #348]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x110>
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d069      	beq.n	80021de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800210a:	4b50      	ldr	r3, [pc, #320]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002116:	4b4d      	ldr	r3, [pc, #308]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b08      	cmp	r3, #8
 8002120:	d11c      	bne.n	800215c <HAL_RCC_OscConfig+0x190>
 8002122:	4b4a      	ldr	r3, [pc, #296]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d116      	bne.n	800215c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212e:	4b47      	ldr	r3, [pc, #284]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d005      	beq.n	8002146 <HAL_RCC_OscConfig+0x17a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d001      	beq.n	8002146 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e1e9      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002146:	4b41      	ldr	r3, [pc, #260]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	493d      	ldr	r1, [pc, #244]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	e040      	b.n	80021de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d023      	beq.n	80021ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002164:	4b39      	ldr	r3, [pc, #228]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a38      	ldr	r2, [pc, #224]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe ff54 	bl	800101c <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7fe ff50 	bl	800101c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e1c7      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b30      	ldr	r3, [pc, #192]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4929      	ldr	r1, [pc, #164]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
 80021aa:	e018      	b.n	80021de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ac:	4b27      	ldr	r3, [pc, #156]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a26      	ldr	r2, [pc, #152]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7fe ff30 	bl	800101c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c0:	f7fe ff2c 	bl	800101c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e1a3      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d038      	beq.n	800225c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d019      	beq.n	8002226 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 80021f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021f6:	4a15      	ldr	r2, [pc, #84]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fe:	f7fe ff0d 	bl	800101c <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002206:	f7fe ff09 	bl	800101c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e180      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800221a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x23a>
 8002224:	e01a      	b.n	800225c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002226:	4b09      	ldr	r3, [pc, #36]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 8002228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222a:	4a08      	ldr	r2, [pc, #32]	@ (800224c <HAL_RCC_OscConfig+0x280>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe fef3 	bl	800101c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800223a:	f7fe feef 	bl	800101c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d903      	bls.n	8002250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e166      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
 800224c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002250:	4b92      	ldr	r3, [pc, #584]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ee      	bne.n	800223a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a4 	beq.w	80023b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226a:	4b8c      	ldr	r3, [pc, #560]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10d      	bne.n	8002292 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	4b89      	ldr	r3, [pc, #548]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a88      	ldr	r2, [pc, #544]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
 8002282:	4b86      	ldr	r3, [pc, #536]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800228e:	2301      	movs	r3, #1
 8002290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002292:	4b83      	ldr	r3, [pc, #524]	@ (80024a0 <HAL_RCC_OscConfig+0x4d4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d118      	bne.n	80022d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800229e:	4b80      	ldr	r3, [pc, #512]	@ (80024a0 <HAL_RCC_OscConfig+0x4d4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7f      	ldr	r2, [pc, #508]	@ (80024a0 <HAL_RCC_OscConfig+0x4d4>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022aa:	f7fe feb7 	bl	800101c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe feb3 	bl	800101c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	@ 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e12a      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022c4:	4b76      	ldr	r3, [pc, #472]	@ (80024a0 <HAL_RCC_OscConfig+0x4d4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x31a>
 80022d8:	4b70      	ldr	r3, [pc, #448]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022dc:	4a6f      	ldr	r2, [pc, #444]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e4:	e02d      	b.n	8002342 <HAL_RCC_OscConfig+0x376>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0x33c>
 80022ee:	4b6b      	ldr	r3, [pc, #428]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	4a6a      	ldr	r2, [pc, #424]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fa:	4b68      	ldr	r3, [pc, #416]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fe:	4a67      	ldr	r2, [pc, #412]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002300:	f023 0304 	bic.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	@ 0x70
 8002306:	e01c      	b.n	8002342 <HAL_RCC_OscConfig+0x376>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b05      	cmp	r3, #5
 800230e:	d10c      	bne.n	800232a <HAL_RCC_OscConfig+0x35e>
 8002310:	4b62      	ldr	r3, [pc, #392]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002314:	4a61      	ldr	r2, [pc, #388]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6713      	str	r3, [r2, #112]	@ 0x70
 800231c:	4b5f      	ldr	r3, [pc, #380]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800231e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002320:	4a5e      	ldr	r2, [pc, #376]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6713      	str	r3, [r2, #112]	@ 0x70
 8002328:	e00b      	b.n	8002342 <HAL_RCC_OscConfig+0x376>
 800232a:	4b5c      	ldr	r3, [pc, #368]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232e:	4a5b      	ldr	r2, [pc, #364]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002330:	f023 0301 	bic.w	r3, r3, #1
 8002334:	6713      	str	r3, [r2, #112]	@ 0x70
 8002336:	4b59      	ldr	r3, [pc, #356]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233a:	4a58      	ldr	r2, [pc, #352]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d015      	beq.n	8002376 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7fe fe67 	bl	800101c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fe63 	bl	800101c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0d8      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	4b4c      	ldr	r3, [pc, #304]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800236a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ee      	beq.n	8002352 <HAL_RCC_OscConfig+0x386>
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7fe fe51 	bl	800101c <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7fe fe4d 	bl	800101c <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0c2      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002394:	4b41      	ldr	r3, [pc, #260]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1ee      	bne.n	800237e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d105      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a6:	4b3d      	ldr	r3, [pc, #244]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	4a3c      	ldr	r2, [pc, #240]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80023ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80ae 	beq.w	8002518 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023bc:	4b37      	ldr	r3, [pc, #220]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 030c 	and.w	r3, r3, #12
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d06d      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d14b      	bne.n	8002468 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d0:	4b32      	ldr	r3, [pc, #200]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a31      	ldr	r2, [pc, #196]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fe1e 	bl	800101c <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7fe fe1a 	bl	800101c <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e091      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	4b29      	ldr	r3, [pc, #164]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	019b      	lsls	r3, r3, #6
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	071b      	lsls	r3, r3, #28
 800242e:	491b      	ldr	r1, [pc, #108]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002434:	4b19      	ldr	r3, [pc, #100]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a18      	ldr	r2, [pc, #96]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800243a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800243e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fdec 	bl	800101c <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fde8 	bl	800101c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e05f      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b10      	ldr	r3, [pc, #64]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x47c>
 8002466:	e057      	b.n	8002518 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a0b      	ldr	r2, [pc, #44]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 800246e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fdd2 	bl	800101c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247c:	f7fe fdce 	bl	800101c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e045      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_RCC_OscConfig+0x4d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x4b0>
 800249a:	e03d      	b.n	8002518 <HAL_RCC_OscConfig+0x54c>
 800249c:	40023800 	.word	0x40023800
 80024a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <HAL_RCC_OscConfig+0x558>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d030      	beq.n	8002514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d129      	bne.n	8002514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d122      	bne.n	8002514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d119      	bne.n	8002514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d10f      	bne.n	8002514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0d0      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b6a      	ldr	r3, [pc, #424]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b67      	ldr	r3, [pc, #412]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 020f 	bic.w	r2, r3, #15
 8002556:	4965      	ldr	r1, [pc, #404]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a58      	ldr	r2, [pc, #352]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002592:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d040      	beq.n	800264c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d115      	bne.n	800260a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e073      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3d      	ldr	r3, [pc, #244]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06b      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b39      	ldr	r3, [pc, #228]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4936      	ldr	r1, [pc, #216]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261c:	f7fe fcfe 	bl	800101c <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe fcfa 	bl	800101c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e053      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2d      	ldr	r3, [pc, #180]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b27      	ldr	r3, [pc, #156]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d210      	bcs.n	800267c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b24      	ldr	r3, [pc, #144]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 020f 	bic.w	r2, r3, #15
 8002662:	4922      	ldr	r1, [pc, #136]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a6:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f821 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	@ (80026f4 <HAL_RCC_ClockConfig+0x1cc>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <HAL_RCC_ClockConfig+0x1d0>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_ClockConfig+0x1d4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fba4 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023c00 	.word	0x40023c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08008170 	.word	0x08008170
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004

08002700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002704:	b094      	sub	sp, #80	@ 0x50
 8002706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	647b      	str	r3, [r7, #68]	@ 0x44
 800270c:	2300      	movs	r3, #0
 800270e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002710:	2300      	movs	r3, #0
 8002712:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002718:	4b79      	ldr	r3, [pc, #484]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d00d      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x40>
 8002724:	2b08      	cmp	r3, #8
 8002726:	f200 80e1 	bhi.w	80028ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x34>
 800272e:	2b04      	cmp	r3, #4
 8002730:	d003      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x3a>
 8002732:	e0db      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002734:	4b73      	ldr	r3, [pc, #460]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x204>)
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002738:	e0db      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800273a:	4b73      	ldr	r3, [pc, #460]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x208>)
 800273c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800273e:	e0d8      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002740:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002748:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800274a:	4b6d      	ldr	r3, [pc, #436]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d063      	beq.n	800281e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002756:	4b6a      	ldr	r3, [pc, #424]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	099b      	lsrs	r3, r3, #6
 800275c:	2200      	movs	r2, #0
 800275e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002760:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002768:	633b      	str	r3, [r7, #48]	@ 0x30
 800276a:	2300      	movs	r3, #0
 800276c:	637b      	str	r3, [r7, #52]	@ 0x34
 800276e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002772:	4622      	mov	r2, r4
 8002774:	462b      	mov	r3, r5
 8002776:	f04f 0000 	mov.w	r0, #0
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	0159      	lsls	r1, r3, #5
 8002780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002784:	0150      	lsls	r0, r2, #5
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4621      	mov	r1, r4
 800278c:	1a51      	subs	r1, r2, r1
 800278e:	6139      	str	r1, [r7, #16]
 8002790:	4629      	mov	r1, r5
 8002792:	eb63 0301 	sbc.w	r3, r3, r1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027a4:	4659      	mov	r1, fp
 80027a6:	018b      	lsls	r3, r1, #6
 80027a8:	4651      	mov	r1, sl
 80027aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ae:	4651      	mov	r1, sl
 80027b0:	018a      	lsls	r2, r1, #6
 80027b2:	4651      	mov	r1, sl
 80027b4:	ebb2 0801 	subs.w	r8, r2, r1
 80027b8:	4659      	mov	r1, fp
 80027ba:	eb63 0901 	sbc.w	r9, r3, r1
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027d2:	4690      	mov	r8, r2
 80027d4:	4699      	mov	r9, r3
 80027d6:	4623      	mov	r3, r4
 80027d8:	eb18 0303 	adds.w	r3, r8, r3
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	462b      	mov	r3, r5
 80027e0:	eb49 0303 	adc.w	r3, r9, r3
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027f2:	4629      	mov	r1, r5
 80027f4:	024b      	lsls	r3, r1, #9
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027fc:	4621      	mov	r1, r4
 80027fe:	024a      	lsls	r2, r1, #9
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002806:	2200      	movs	r2, #0
 8002808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800280c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002810:	f7fd fd1e 	bl	8000250 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281c:	e058      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800281e:	4b38      	ldr	r3, [pc, #224]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	099b      	lsrs	r3, r3, #6
 8002824:	2200      	movs	r2, #0
 8002826:	4618      	mov	r0, r3
 8002828:	4611      	mov	r1, r2
 800282a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800282e:	623b      	str	r3, [r7, #32]
 8002830:	2300      	movs	r3, #0
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
 8002834:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002838:	4642      	mov	r2, r8
 800283a:	464b      	mov	r3, r9
 800283c:	f04f 0000 	mov.w	r0, #0
 8002840:	f04f 0100 	mov.w	r1, #0
 8002844:	0159      	lsls	r1, r3, #5
 8002846:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800284a:	0150      	lsls	r0, r2, #5
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4641      	mov	r1, r8
 8002852:	ebb2 0a01 	subs.w	sl, r2, r1
 8002856:	4649      	mov	r1, r9
 8002858:	eb63 0b01 	sbc.w	fp, r3, r1
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002868:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800286c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002870:	ebb2 040a 	subs.w	r4, r2, sl
 8002874:	eb63 050b 	sbc.w	r5, r3, fp
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	00eb      	lsls	r3, r5, #3
 8002882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002886:	00e2      	lsls	r2, r4, #3
 8002888:	4614      	mov	r4, r2
 800288a:	461d      	mov	r5, r3
 800288c:	4643      	mov	r3, r8
 800288e:	18e3      	adds	r3, r4, r3
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	464b      	mov	r3, r9
 8002894:	eb45 0303 	adc.w	r3, r5, r3
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028a6:	4629      	mov	r1, r5
 80028a8:	028b      	lsls	r3, r1, #10
 80028aa:	4621      	mov	r1, r4
 80028ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b0:	4621      	mov	r1, r4
 80028b2:	028a      	lsls	r2, r1, #10
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ba:	2200      	movs	r2, #0
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	61fa      	str	r2, [r7, #28]
 80028c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c4:	f7fd fcc4 	bl	8000250 <__aeabi_uldivmod>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4613      	mov	r3, r2
 80028ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x204>)
 80028ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3750      	adds	r7, #80	@ 0x50
 80028f8:	46bd      	mov	sp, r7
 80028fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800
 8002904:	00f42400 	.word	0x00f42400
 8002908:	007a1200 	.word	0x007a1200

0800290c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002910:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <HAL_RCC_GetHCLKFreq+0x14>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	20000000 	.word	0x20000000

08002924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002928:	f7ff fff0 	bl	800290c <HAL_RCC_GetHCLKFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	0a9b      	lsrs	r3, r3, #10
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	4903      	ldr	r1, [pc, #12]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	08008180 	.word	0x08008180

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002950:	f7ff ffdc 	bl	800290c <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0b5b      	lsrs	r3, r3, #13
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4903      	ldr	r1, [pc, #12]	@ (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	08008180 	.word	0x08008180

08002974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	220f      	movs	r2, #15
 8002982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002984:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002990:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <HAL_RCC_GetClockConfig+0x5c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <HAL_RCC_GetClockConfig+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 020f 	and.w	r2, r3, #15
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40023c00 	.word	0x40023c00

080029d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a00:	4b69      	ldr	r3, [pc, #420]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a68      	ldr	r2, [pc, #416]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a0a:	6093      	str	r3, [r2, #8]
 8002a0c:	4b66      	ldr	r3, [pc, #408]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a14:	4964      	ldr	r1, [pc, #400]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d017      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a32:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a40:	4959      	ldr	r1, [pc, #356]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a50:	d101      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	494a      	ldr	r1, [pc, #296]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 808b 	beq.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002abc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	4a39      	ldr	r2, [pc, #228]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac8:	4b37      	ldr	r3, [pc, #220]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ad4:	4b35      	ldr	r3, [pc, #212]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a34      	ldr	r2, [pc, #208]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fa9c 	bl	800101c <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fe fa98 	bl	800101c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e38f      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002afa:	4b2c      	ldr	r3, [pc, #176]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b06:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d035      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d02e      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b24:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b38:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b46:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b4c:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d114      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fa60 	bl	800101c <HAL_GetTick>
 8002b5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7fe fa5c 	bl	800101c <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e351      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ee      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b8e:	d111      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b9c:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	4901      	ldr	r1, [pc, #4]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	0ffffcff 	.word	0x0ffffcff
 8002bb4:	4bac      	ldr	r3, [pc, #688]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4aab      	ldr	r2, [pc, #684]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002bbe:	6093      	str	r3, [r2, #8]
 8002bc0:	4ba9      	ldr	r3, [pc, #676]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bcc:	49a6      	ldr	r1, [pc, #664]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d010      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bde:	4ba2      	ldr	r3, [pc, #648]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002be4:	4aa0      	ldr	r2, [pc, #640]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bee:	4b9e      	ldr	r3, [pc, #632]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	499b      	ldr	r1, [pc, #620]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c0c:	4b96      	ldr	r3, [pc, #600]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c1a:	4993      	ldr	r1, [pc, #588]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c2e:	4b8e      	ldr	r3, [pc, #568]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c3c:	498a      	ldr	r1, [pc, #552]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c50:	4b85      	ldr	r3, [pc, #532]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c5e:	4982      	ldr	r1, [pc, #520]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c72:	4b7d      	ldr	r3, [pc, #500]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c80:	4979      	ldr	r1, [pc, #484]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00a      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c94:	4b74      	ldr	r3, [pc, #464]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	f023 0203 	bic.w	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	4971      	ldr	r1, [pc, #452]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbc:	f023 020c 	bic.w	r2, r3, #12
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc4:	4968      	ldr	r1, [pc, #416]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cd8:	4b63      	ldr	r3, [pc, #396]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cde:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce6:	4960      	ldr	r1, [pc, #384]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00a      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cfa:	4b5b      	ldr	r3, [pc, #364]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d00:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d08:	4957      	ldr	r1, [pc, #348]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00a      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d1c:	4b52      	ldr	r3, [pc, #328]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2a:	494f      	ldr	r1, [pc, #316]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4c:	4946      	ldr	r1, [pc, #280]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d60:	4b41      	ldr	r3, [pc, #260]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d66:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6e:	493e      	ldr	r1, [pc, #248]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d82:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d90:	4935      	ldr	r1, [pc, #212]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002da4:	4b30      	ldr	r3, [pc, #192]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002daa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002db2:	492d      	ldr	r1, [pc, #180]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d011      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002dc6:	4b28      	ldr	r3, [pc, #160]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dcc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dd4:	4924      	ldr	r1, [pc, #144]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002de4:	d101      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e06:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e14:	4914      	ldr	r1, [pc, #80]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00b      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e38:	490b      	ldr	r1, [pc, #44]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00f      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e52:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e5c:	4902      	ldr	r1, [pc, #8]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e64:	e002      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e78:	4b8a      	ldr	r3, [pc, #552]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e88:	4986      	ldr	r1, [pc, #536]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e9c:	4b81      	ldr	r3, [pc, #516]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eac:	497d      	ldr	r1, [pc, #500]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d006      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80d6 	beq.w	8003074 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ec8:	4b76      	ldr	r3, [pc, #472]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a75      	ldr	r2, [pc, #468]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ece:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed4:	f7fe f8a2 	bl	800101c <HAL_GetTick>
 8002ed8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002edc:	f7fe f89e 	bl	800101c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e195      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eee:	4b6d      	ldr	r3, [pc, #436]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d021      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11d      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f0e:	4b65      	ldr	r3, [pc, #404]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f1c:	4b61      	ldr	r3, [pc, #388]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f22:	0e1b      	lsrs	r3, r3, #24
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	019a      	lsls	r2, r3, #6
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	061b      	lsls	r3, r3, #24
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	071b      	lsls	r3, r3, #28
 8002f42:	4958      	ldr	r1, [pc, #352]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d02e      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f74:	d129      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f76:	4b4b      	ldr	r3, [pc, #300]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f84:	4b47      	ldr	r3, [pc, #284]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f8a:	0f1b      	lsrs	r3, r3, #28
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	019a      	lsls	r2, r3, #6
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	071b      	lsls	r3, r3, #28
 8002faa:	493e      	ldr	r1, [pc, #248]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fb8:	f023 021f 	bic.w	r2, r3, #31
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	4938      	ldr	r1, [pc, #224]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01d      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fd6:	4b33      	ldr	r3, [pc, #204]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fdc:	0e1b      	lsrs	r3, r3, #24
 8002fde:	f003 030f 	and.w	r3, r3, #15
 8002fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fea:	0f1b      	lsrs	r3, r3, #28
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	019a      	lsls	r2, r3, #6
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	4926      	ldr	r1, [pc, #152]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d011      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	019a      	lsls	r2, r3, #6
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	041b      	lsls	r3, r3, #16
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	071b      	lsls	r3, r3, #28
 800303a:	491a      	ldr	r1, [pc, #104]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003042:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003048:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800304c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304e:	f7fd ffe5 	bl	800101c <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003056:	f7fd ffe1 	bl	800101c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b64      	cmp	r3, #100	@ 0x64
 8003062:	d901      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e0d8      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003068:	4b0e      	ldr	r3, [pc, #56]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f040 80ce 	bne.w	8003218 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a08      	ldr	r2, [pc, #32]	@ (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003088:	f7fd ffc8 	bl	800101c <HAL_GetTick>
 800308c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800308e:	e00b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003090:	f7fd ffc4 	bl	800101c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b64      	cmp	r3, #100	@ 0x64
 800309c:	d904      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0bb      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80030a2:	bf00      	nop
 80030a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030b4:	d0ec      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d02e      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d12a      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030de:	4b51      	ldr	r3, [pc, #324]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	0f1b      	lsrs	r3, r3, #28
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	019a      	lsls	r2, r3, #6
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	071b      	lsls	r3, r3, #28
 8003112:	4944      	ldr	r1, [pc, #272]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800311a:	4b42      	ldr	r3, [pc, #264]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003120:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	3b01      	subs	r3, #1
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	493d      	ldr	r1, [pc, #244]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d022      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003148:	d11d      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800314a:	4b36      	ldr	r3, [pc, #216]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	0e1b      	lsrs	r3, r3, #24
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003158:	4b32      	ldr	r3, [pc, #200]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	0f1b      	lsrs	r3, r3, #28
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	019a      	lsls	r2, r3, #6
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	431a      	orrs	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	4929      	ldr	r1, [pc, #164]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d028      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003198:	0e1b      	lsrs	r3, r3, #24
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031a0:	4b20      	ldr	r3, [pc, #128]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a6:	0c1b      	lsrs	r3, r3, #16
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	019a      	lsls	r2, r3, #6
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	431a      	orrs	r2, r3
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69db      	ldr	r3, [r3, #28]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	4917      	ldr	r1, [pc, #92]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	4911      	ldr	r1, [pc, #68]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f0:	f7fd ff14 	bl	800101c <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031f8:	f7fd ff10 	bl	800101c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	@ 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e007      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003216:	d1ef      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800

08003228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e049      	b.n	80032ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f841 	bl	80032d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f000 f9e8 	bl	800363c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d001      	beq.n	8003304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e054      	b.n	80033ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a26      	ldr	r2, [pc, #152]	@ (80033bc <HAL_TIM_Base_Start_IT+0xd0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d022      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332e:	d01d      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a22      	ldr	r2, [pc, #136]	@ (80033c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a21      	ldr	r2, [pc, #132]	@ (80033c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d013      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1f      	ldr	r2, [pc, #124]	@ (80033c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1e      	ldr	r2, [pc, #120]	@ (80033cc <HAL_TIM_Base_Start_IT+0xe0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1c      	ldr	r2, [pc, #112]	@ (80033d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x80>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d115      	bne.n	8003398 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	4b19      	ldr	r3, [pc, #100]	@ (80033d8 <HAL_TIM_Base_Start_IT+0xec>)
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d015      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0xbe>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d011      	beq.n	80033aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e008      	b.n	80033aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e000      	b.n	80033ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40000400 	.word	0x40000400
 80033c4:	40000800 	.word	0x40000800
 80033c8:	40000c00 	.word	0x40000c00
 80033cc:	40010400 	.word	0x40010400
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40001800 	.word	0x40001800
 80033d8:	00010007 	.word	0x00010007

080033dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d020      	beq.n	8003440 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01b      	beq.n	8003440 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0202 	mvn.w	r2, #2
 8003410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8e9 	bl	80035fe <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8db 	bl	80035ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ec 	bl	8003612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d020      	beq.n	800348c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01b      	beq.n	800348c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0204 	mvn.w	r2, #4
 800345c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8c3 	bl	80035fe <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8b5 	bl	80035ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f8c6 	bl	8003612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d020      	beq.n	80034d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01b      	beq.n	80034d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f06f 0208 	mvn.w	r2, #8
 80034a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2204      	movs	r2, #4
 80034ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f89d 	bl	80035fe <HAL_TIM_IC_CaptureCallback>
 80034c4:	e005      	b.n	80034d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f88f 	bl	80035ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f8a0 	bl	8003612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d020      	beq.n	8003524 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01b      	beq.n	8003524 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0210 	mvn.w	r2, #16
 80034f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2208      	movs	r2, #8
 80034fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f877 	bl	80035fe <HAL_TIM_IC_CaptureCallback>
 8003510:	e005      	b.n	800351e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f869 	bl	80035ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f87a 	bl	8003612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0201 	mvn.w	r2, #1
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd fa9e 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00c      	beq.n	8003576 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800356e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f913 	bl	800379c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00c      	beq.n	800359a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f90b 	bl	80037b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00c      	beq.n	80035be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f834 	bl	8003626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00c      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d007      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f06f 0220 	mvn.w	r2, #32
 80035da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f8d3 	bl	8003788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a43      	ldr	r2, [pc, #268]	@ (800375c <TIM_Base_SetConfig+0x120>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d013      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365a:	d00f      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a40      	ldr	r2, [pc, #256]	@ (8003760 <TIM_Base_SetConfig+0x124>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00b      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3f      	ldr	r2, [pc, #252]	@ (8003764 <TIM_Base_SetConfig+0x128>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3e      	ldr	r2, [pc, #248]	@ (8003768 <TIM_Base_SetConfig+0x12c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d003      	beq.n	800367c <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a3d      	ldr	r2, [pc, #244]	@ (800376c <TIM_Base_SetConfig+0x130>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d108      	bne.n	800368e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a32      	ldr	r2, [pc, #200]	@ (800375c <TIM_Base_SetConfig+0x120>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d02b      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800369c:	d027      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003760 <TIM_Base_SetConfig+0x124>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d023      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003764 <TIM_Base_SetConfig+0x128>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01f      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003768 <TIM_Base_SetConfig+0x12c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01b      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2c      	ldr	r2, [pc, #176]	@ (800376c <TIM_Base_SetConfig+0x130>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d017      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003770 <TIM_Base_SetConfig+0x134>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003774 <TIM_Base_SetConfig+0x138>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00f      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a29      	ldr	r2, [pc, #164]	@ (8003778 <TIM_Base_SetConfig+0x13c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00b      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a28      	ldr	r2, [pc, #160]	@ (800377c <TIM_Base_SetConfig+0x140>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a27      	ldr	r2, [pc, #156]	@ (8003780 <TIM_Base_SetConfig+0x144>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a26      	ldr	r2, [pc, #152]	@ (8003784 <TIM_Base_SetConfig+0x148>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a0e      	ldr	r2, [pc, #56]	@ (800375c <TIM_Base_SetConfig+0x120>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_Base_SetConfig+0xf2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a10      	ldr	r2, [pc, #64]	@ (800376c <TIM_Base_SetConfig+0x130>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d103      	bne.n	8003736 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40010400 	.word	0x40010400
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800
 800377c:	40001800 	.word	0x40001800
 8003780:	40001c00 	.word	0x40001c00
 8003784:	40002000 	.word	0x40002000

08003788 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e040      	b.n	8003858 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fa44 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fb16 	bl	8003e3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f8af 	bl	8003974 <UART_SetConfig>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e01b      	b.n	8003858 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800382e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800383e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fb95 	bl	8003f80 <UART_CheckIdleState>
 8003856:	4603      	mov	r3, r0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003874:	2b20      	cmp	r3, #32
 8003876:	d177      	bne.n	8003968 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_UART_Transmit+0x24>
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e070      	b.n	800396a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2221      	movs	r2, #33	@ 0x21
 8003894:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003896:	f7fd fbc1 	bl	800101c <HAL_GetTick>
 800389a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b4:	d108      	bne.n	80038c8 <HAL_UART_Transmit+0x68>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e003      	b.n	80038d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d0:	e02f      	b.n	8003932 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2180      	movs	r1, #128	@ 0x80
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fbf7 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e03b      	b.n	800396a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003906:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	3302      	adds	r3, #2
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e007      	b.n	8003920 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	781a      	ldrb	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3301      	adds	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1c9      	bne.n	80038d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2140      	movs	r1, #64	@ 0x40
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 fbc1 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e005      	b.n	800396a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2220      	movs	r2, #32
 8003962:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4ba6      	ldr	r3, [pc, #664]	@ (8003c38 <UART_SetConfig+0x2c4>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	6979      	ldr	r1, [r7, #20]
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a94      	ldr	r2, [pc, #592]	@ (8003c3c <UART_SetConfig+0x2c8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d120      	bne.n	8003a32 <UART_SetConfig+0xbe>
 80039f0:	4b93      	ldr	r3, [pc, #588]	@ (8003c40 <UART_SetConfig+0x2cc>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d816      	bhi.n	8003a2c <UART_SetConfig+0xb8>
 80039fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003a04 <UART_SetConfig+0x90>)
 8003a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a21 	.word	0x08003a21
 8003a0c:	08003a1b 	.word	0x08003a1b
 8003a10:	08003a27 	.word	0x08003a27
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e150      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e14d      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a20:	2304      	movs	r3, #4
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e14a      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a26:	2308      	movs	r3, #8
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e147      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e144      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a83      	ldr	r2, [pc, #524]	@ (8003c44 <UART_SetConfig+0x2d0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d132      	bne.n	8003aa2 <UART_SetConfig+0x12e>
 8003a3c:	4b80      	ldr	r3, [pc, #512]	@ (8003c40 <UART_SetConfig+0x2cc>)
 8003a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b0c      	cmp	r3, #12
 8003a48:	d828      	bhi.n	8003a9c <UART_SetConfig+0x128>
 8003a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a50 <UART_SetConfig+0xdc>)
 8003a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a50:	08003a85 	.word	0x08003a85
 8003a54:	08003a9d 	.word	0x08003a9d
 8003a58:	08003a9d 	.word	0x08003a9d
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003a91 	.word	0x08003a91
 8003a64:	08003a9d 	.word	0x08003a9d
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003a8b 	.word	0x08003a8b
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003a9d 	.word	0x08003a9d
 8003a7c:	08003a9d 	.word	0x08003a9d
 8003a80:	08003a97 	.word	0x08003a97
 8003a84:	2300      	movs	r3, #0
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e118      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e115      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a90:	2304      	movs	r3, #4
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e112      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a96:	2308      	movs	r3, #8
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e10f      	b.n	8003cbc <UART_SetConfig+0x348>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e10c      	b.n	8003cbc <UART_SetConfig+0x348>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a68      	ldr	r2, [pc, #416]	@ (8003c48 <UART_SetConfig+0x2d4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d120      	bne.n	8003aee <UART_SetConfig+0x17a>
 8003aac:	4b64      	ldr	r3, [pc, #400]	@ (8003c40 <UART_SetConfig+0x2cc>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ab6:	2b30      	cmp	r3, #48	@ 0x30
 8003ab8:	d013      	beq.n	8003ae2 <UART_SetConfig+0x16e>
 8003aba:	2b30      	cmp	r3, #48	@ 0x30
 8003abc:	d814      	bhi.n	8003ae8 <UART_SetConfig+0x174>
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d009      	beq.n	8003ad6 <UART_SetConfig+0x162>
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d810      	bhi.n	8003ae8 <UART_SetConfig+0x174>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <UART_SetConfig+0x15c>
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d006      	beq.n	8003adc <UART_SetConfig+0x168>
 8003ace:	e00b      	b.n	8003ae8 <UART_SetConfig+0x174>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e0f2      	b.n	8003cbc <UART_SetConfig+0x348>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e0ef      	b.n	8003cbc <UART_SetConfig+0x348>
 8003adc:	2304      	movs	r3, #4
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e0ec      	b.n	8003cbc <UART_SetConfig+0x348>
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e0e9      	b.n	8003cbc <UART_SetConfig+0x348>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e0e6      	b.n	8003cbc <UART_SetConfig+0x348>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a56      	ldr	r2, [pc, #344]	@ (8003c4c <UART_SetConfig+0x2d8>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d120      	bne.n	8003b3a <UART_SetConfig+0x1c6>
 8003af8:	4b51      	ldr	r3, [pc, #324]	@ (8003c40 <UART_SetConfig+0x2cc>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b04:	d013      	beq.n	8003b2e <UART_SetConfig+0x1ba>
 8003b06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b08:	d814      	bhi.n	8003b34 <UART_SetConfig+0x1c0>
 8003b0a:	2b80      	cmp	r3, #128	@ 0x80
 8003b0c:	d009      	beq.n	8003b22 <UART_SetConfig+0x1ae>
 8003b0e:	2b80      	cmp	r3, #128	@ 0x80
 8003b10:	d810      	bhi.n	8003b34 <UART_SetConfig+0x1c0>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <UART_SetConfig+0x1a8>
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d006      	beq.n	8003b28 <UART_SetConfig+0x1b4>
 8003b1a:	e00b      	b.n	8003b34 <UART_SetConfig+0x1c0>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e0cc      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b22:	2302      	movs	r3, #2
 8003b24:	77fb      	strb	r3, [r7, #31]
 8003b26:	e0c9      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e0c6      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b2e:	2308      	movs	r3, #8
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e0c3      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b34:	2310      	movs	r3, #16
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e0c0      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a44      	ldr	r2, [pc, #272]	@ (8003c50 <UART_SetConfig+0x2dc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d125      	bne.n	8003b90 <UART_SetConfig+0x21c>
 8003b44:	4b3e      	ldr	r3, [pc, #248]	@ (8003c40 <UART_SetConfig+0x2cc>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b52:	d017      	beq.n	8003b84 <UART_SetConfig+0x210>
 8003b54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b58:	d817      	bhi.n	8003b8a <UART_SetConfig+0x216>
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b5e:	d00b      	beq.n	8003b78 <UART_SetConfig+0x204>
 8003b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b64:	d811      	bhi.n	8003b8a <UART_SetConfig+0x216>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <UART_SetConfig+0x1fe>
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6e:	d006      	beq.n	8003b7e <UART_SetConfig+0x20a>
 8003b70:	e00b      	b.n	8003b8a <UART_SetConfig+0x216>
 8003b72:	2300      	movs	r3, #0
 8003b74:	77fb      	strb	r3, [r7, #31]
 8003b76:	e0a1      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	77fb      	strb	r3, [r7, #31]
 8003b7c:	e09e      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	77fb      	strb	r3, [r7, #31]
 8003b82:	e09b      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b84:	2308      	movs	r3, #8
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e098      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e095      	b.n	8003cbc <UART_SetConfig+0x348>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2f      	ldr	r2, [pc, #188]	@ (8003c54 <UART_SetConfig+0x2e0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d125      	bne.n	8003be6 <UART_SetConfig+0x272>
 8003b9a:	4b29      	ldr	r3, [pc, #164]	@ (8003c40 <UART_SetConfig+0x2cc>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ba4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ba8:	d017      	beq.n	8003bda <UART_SetConfig+0x266>
 8003baa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bae:	d817      	bhi.n	8003be0 <UART_SetConfig+0x26c>
 8003bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb4:	d00b      	beq.n	8003bce <UART_SetConfig+0x25a>
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bba:	d811      	bhi.n	8003be0 <UART_SetConfig+0x26c>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <UART_SetConfig+0x254>
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc4:	d006      	beq.n	8003bd4 <UART_SetConfig+0x260>
 8003bc6:	e00b      	b.n	8003be0 <UART_SetConfig+0x26c>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	77fb      	strb	r3, [r7, #31]
 8003bcc:	e076      	b.n	8003cbc <UART_SetConfig+0x348>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	77fb      	strb	r3, [r7, #31]
 8003bd2:	e073      	b.n	8003cbc <UART_SetConfig+0x348>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e070      	b.n	8003cbc <UART_SetConfig+0x348>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	77fb      	strb	r3, [r7, #31]
 8003bde:	e06d      	b.n	8003cbc <UART_SetConfig+0x348>
 8003be0:	2310      	movs	r3, #16
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e06a      	b.n	8003cbc <UART_SetConfig+0x348>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <UART_SetConfig+0x2e4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d138      	bne.n	8003c62 <UART_SetConfig+0x2ee>
 8003bf0:	4b13      	ldr	r3, [pc, #76]	@ (8003c40 <UART_SetConfig+0x2cc>)
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003bfa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bfe:	d017      	beq.n	8003c30 <UART_SetConfig+0x2bc>
 8003c00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c04:	d82a      	bhi.n	8003c5c <UART_SetConfig+0x2e8>
 8003c06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c0a:	d00b      	beq.n	8003c24 <UART_SetConfig+0x2b0>
 8003c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c10:	d824      	bhi.n	8003c5c <UART_SetConfig+0x2e8>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <UART_SetConfig+0x2aa>
 8003c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c1a:	d006      	beq.n	8003c2a <UART_SetConfig+0x2b6>
 8003c1c:	e01e      	b.n	8003c5c <UART_SetConfig+0x2e8>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e04b      	b.n	8003cbc <UART_SetConfig+0x348>
 8003c24:	2302      	movs	r3, #2
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e048      	b.n	8003cbc <UART_SetConfig+0x348>
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e045      	b.n	8003cbc <UART_SetConfig+0x348>
 8003c30:	2308      	movs	r3, #8
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e042      	b.n	8003cbc <UART_SetConfig+0x348>
 8003c36:	bf00      	nop
 8003c38:	efff69f3 	.word	0xefff69f3
 8003c3c:	40011000 	.word	0x40011000
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40004400 	.word	0x40004400
 8003c48:	40004800 	.word	0x40004800
 8003c4c:	40004c00 	.word	0x40004c00
 8003c50:	40005000 	.word	0x40005000
 8003c54:	40011400 	.word	0x40011400
 8003c58:	40007800 	.word	0x40007800
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e02c      	b.n	8003cbc <UART_SetConfig+0x348>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a72      	ldr	r2, [pc, #456]	@ (8003e30 <UART_SetConfig+0x4bc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d125      	bne.n	8003cb8 <UART_SetConfig+0x344>
 8003c6c:	4b71      	ldr	r3, [pc, #452]	@ (8003e34 <UART_SetConfig+0x4c0>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c76:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c7a:	d017      	beq.n	8003cac <UART_SetConfig+0x338>
 8003c7c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c80:	d817      	bhi.n	8003cb2 <UART_SetConfig+0x33e>
 8003c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c86:	d00b      	beq.n	8003ca0 <UART_SetConfig+0x32c>
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c8c:	d811      	bhi.n	8003cb2 <UART_SetConfig+0x33e>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <UART_SetConfig+0x326>
 8003c92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c96:	d006      	beq.n	8003ca6 <UART_SetConfig+0x332>
 8003c98:	e00b      	b.n	8003cb2 <UART_SetConfig+0x33e>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e00d      	b.n	8003cbc <UART_SetConfig+0x348>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	77fb      	strb	r3, [r7, #31]
 8003ca4:	e00a      	b.n	8003cbc <UART_SetConfig+0x348>
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e007      	b.n	8003cbc <UART_SetConfig+0x348>
 8003cac:	2308      	movs	r3, #8
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e004      	b.n	8003cbc <UART_SetConfig+0x348>
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e001      	b.n	8003cbc <UART_SetConfig+0x348>
 8003cb8:	2310      	movs	r3, #16
 8003cba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cc4:	d15b      	bne.n	8003d7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cc6:	7ffb      	ldrb	r3, [r7, #31]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d828      	bhi.n	8003d1e <UART_SetConfig+0x3aa>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <UART_SetConfig+0x360>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003cf9 	.word	0x08003cf9
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003d09 	.word	0x08003d09
 8003ce0:	08003d1f 	.word	0x08003d1f
 8003ce4:	08003d0f 	.word	0x08003d0f
 8003ce8:	08003d1f 	.word	0x08003d1f
 8003cec:	08003d1f 	.word	0x08003d1f
 8003cf0:	08003d1f 	.word	0x08003d1f
 8003cf4:	08003d17 	.word	0x08003d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f7fe fe14 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8003cfc:	61b8      	str	r0, [r7, #24]
        break;
 8003cfe:	e013      	b.n	8003d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d00:	f7fe fe24 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8003d04:	61b8      	str	r0, [r7, #24]
        break;
 8003d06:	e00f      	b.n	8003d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d08:	4b4b      	ldr	r3, [pc, #300]	@ (8003e38 <UART_SetConfig+0x4c4>)
 8003d0a:	61bb      	str	r3, [r7, #24]
        break;
 8003d0c:	e00c      	b.n	8003d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0e:	f7fe fcf7 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8003d12:	61b8      	str	r0, [r7, #24]
        break;
 8003d14:	e008      	b.n	8003d28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d1a:	61bb      	str	r3, [r7, #24]
        break;
 8003d1c:	e004      	b.n	8003d28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	77bb      	strb	r3, [r7, #30]
        break;
 8003d26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d074      	beq.n	8003e18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	005a      	lsls	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	441a      	add	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	d916      	bls.n	8003d78 <UART_SetConfig+0x404>
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d50:	d212      	bcs.n	8003d78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f023 030f 	bic.w	r3, r3, #15
 8003d5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	89fb      	ldrh	r3, [r7, #14]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	89fa      	ldrh	r2, [r7, #14]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e04f      	b.n	8003e18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	77bb      	strb	r3, [r7, #30]
 8003d7c:	e04c      	b.n	8003e18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d7e:	7ffb      	ldrb	r3, [r7, #31]
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d828      	bhi.n	8003dd6 <UART_SetConfig+0x462>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <UART_SetConfig+0x418>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003db1 	.word	0x08003db1
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003dc1 	.word	0x08003dc1
 8003d98:	08003dd7 	.word	0x08003dd7
 8003d9c:	08003dc7 	.word	0x08003dc7
 8003da0:	08003dd7 	.word	0x08003dd7
 8003da4:	08003dd7 	.word	0x08003dd7
 8003da8:	08003dd7 	.word	0x08003dd7
 8003dac:	08003dcf 	.word	0x08003dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db0:	f7fe fdb8 	bl	8002924 <HAL_RCC_GetPCLK1Freq>
 8003db4:	61b8      	str	r0, [r7, #24]
        break;
 8003db6:	e013      	b.n	8003de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7fe fdc8 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8003dbc:	61b8      	str	r0, [r7, #24]
        break;
 8003dbe:	e00f      	b.n	8003de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003e38 <UART_SetConfig+0x4c4>)
 8003dc2:	61bb      	str	r3, [r7, #24]
        break;
 8003dc4:	e00c      	b.n	8003de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc6:	f7fe fc9b 	bl	8002700 <HAL_RCC_GetSysClockFreq>
 8003dca:	61b8      	str	r0, [r7, #24]
        break;
 8003dcc:	e008      	b.n	8003de0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd2:	61bb      	str	r3, [r7, #24]
        break;
 8003dd4:	e004      	b.n	8003de0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	77bb      	strb	r3, [r7, #30]
        break;
 8003dde:	bf00      	nop
    }

    if (pclk != 0U)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d018      	beq.n	8003e18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	085a      	lsrs	r2, r3, #1
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	441a      	add	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	2b0f      	cmp	r3, #15
 8003dfe:	d909      	bls.n	8003e14 <UART_SetConfig+0x4a0>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e06:	d205      	bcs.n	8003e14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	e001      	b.n	8003e18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e24:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40007c00 	.word	0x40007c00
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400

08003e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01a      	beq.n	8003f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f3a:	d10a      	bne.n	8003f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]
  }
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b098      	sub	sp, #96	@ 0x60
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f90:	f7fd f844 	bl	800101c <HAL_GetTick>
 8003f94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d12e      	bne.n	8004002 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	2200      	movs	r2, #0
 8003fae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f88c 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d021      	beq.n	8004002 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fde:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e6      	bne.n	8003fbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e062      	b.n	80040c8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d149      	bne.n	80040a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004010:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004018:	2200      	movs	r2, #0
 800401a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f856 	bl	80040d0 <UART_WaitOnFlagUntilTimeout>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d03c      	beq.n	80040a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	623b      	str	r3, [r7, #32]
   return(result);
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800403e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004048:	633b      	str	r3, [r7, #48]	@ 0x30
 800404a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800404e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e6      	bne.n	800402a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	3308      	adds	r3, #8
 8004062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	e853 3f00 	ldrex	r3, [r3]
 800406a:	60fb      	str	r3, [r7, #12]
   return(result);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0301 	bic.w	r3, r3, #1
 8004072:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3308      	adds	r3, #8
 800407a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800407c:	61fa      	str	r2, [r7, #28]
 800407e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004080:	69b9      	ldr	r1, [r7, #24]
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	617b      	str	r3, [r7, #20]
   return(result);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e5      	bne.n	800405c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e011      	b.n	80040c8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3758      	adds	r7, #88	@ 0x58
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e0:	e04f      	b.n	8004182 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d04b      	beq.n	8004182 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fc ff97 	bl	800101c <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <UART_WaitOnFlagUntilTimeout+0x30>
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e04e      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d037      	beq.n	8004182 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b80      	cmp	r3, #128	@ 0x80
 8004116:	d034      	beq.n	8004182 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	d031      	beq.n	8004182 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b08      	cmp	r3, #8
 800412a:	d110      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2208      	movs	r2, #8
 8004132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f838 	bl	80041aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2208      	movs	r2, #8
 800413e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e029      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004158:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800415c:	d111      	bne.n	8004182 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f81e 	bl	80041aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e00f      	b.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4013      	ands	r3, r2
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	429a      	cmp	r2, r3
 8004190:	bf0c      	ite	eq
 8004192:	2301      	moveq	r3, #1
 8004194:	2300      	movne	r3, #0
 8004196:	b2db      	uxtb	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	429a      	cmp	r2, r3
 800419e:	d0a0      	beq.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b095      	sub	sp, #84	@ 0x54
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ba:	e853 3f00 	ldrex	r3, [r3]
 80041be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041d8:	e841 2300 	strex	r3, r2, [r1]
 80041dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1e6      	bne.n	80041b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3308      	adds	r3, #8
 80041ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004204:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800420a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421c:	2b01      	cmp	r3, #1
 800421e:	d118      	bne.n	8004252 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	60bb      	str	r3, [r7, #8]
   return(result);
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 0310 	bic.w	r3, r3, #16
 8004234:	647b      	str	r3, [r7, #68]	@ 0x44
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	6979      	ldr	r1, [r7, #20]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	613b      	str	r3, [r7, #16]
   return(result);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e6      	bne.n	8004220 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004266:	bf00      	nop
 8004268:	3754      	adds	r7, #84	@ 0x54
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004274:	b084      	sub	sp, #16
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	f107 001c 	add.w	r0, r7, #28
 8004282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004286:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800428a:	2b01      	cmp	r3, #1
 800428c:	d121      	bne.n	80042d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004292:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	4b21      	ldr	r3, [pc, #132]	@ (8004324 <USB_CoreInit+0xb0>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fa92 	bl	80047f0 <USB_CoreReset>
 80042cc:	4603      	mov	r3, r0
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e010      	b.n	80042f4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa86 	bl	80047f0 <USB_CoreReset>
 80042e4:	4603      	mov	r3, r0
 80042e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80042f4:	7fbb      	ldrb	r3, [r7, #30]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10b      	bne.n	8004312 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f043 0206 	orr.w	r2, r3, #6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800431e:	b004      	add	sp, #16
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	ffbdffbf 	.word	0xffbdffbf

08004328 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 0201 	bic.w	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d115      	bne.n	8004398 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004378:	200a      	movs	r0, #10
 800437a:	f7fc fe5b 	bl	8001034 <HAL_Delay>
      ms += 10U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	330a      	adds	r3, #10
 8004382:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fa25 	bl	80047d4 <USB_GetMode>
 800438a:	4603      	mov	r3, r0
 800438c:	2b01      	cmp	r3, #1
 800438e:	d01e      	beq.n	80043ce <USB_SetCurrentMode+0x84>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2bc7      	cmp	r3, #199	@ 0xc7
 8004394:	d9f0      	bls.n	8004378 <USB_SetCurrentMode+0x2e>
 8004396:	e01a      	b.n	80043ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d115      	bne.n	80043ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043aa:	200a      	movs	r0, #10
 80043ac:	f7fc fe42 	bl	8001034 <HAL_Delay>
      ms += 10U;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	330a      	adds	r3, #10
 80043b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 fa0c 	bl	80047d4 <USB_GetMode>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <USB_SetCurrentMode+0x84>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80043c6:	d9f0      	bls.n	80043aa <USB_SetCurrentMode+0x60>
 80043c8:	e001      	b.n	80043ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e005      	b.n	80043da <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2bc8      	cmp	r3, #200	@ 0xc8
 80043d2:	d101      	bne.n	80043d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043e4:	b084      	sub	sp, #16
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	e009      	b.n	8004418 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	3340      	adds	r3, #64	@ 0x40
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	2200      	movs	r2, #0
 8004410:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3301      	adds	r3, #1
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b0e      	cmp	r3, #14
 800441c:	d9f2      	bls.n	8004404 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800441e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004422:	2b00      	cmp	r3, #0
 8004424:	d11c      	bne.n	8004460 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004434:	f043 0302 	orr.w	r3, r3, #2
 8004438:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e005      	b.n	800446c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004472:	461a      	mov	r2, r3
 8004474:	2300      	movs	r3, #0
 8004476:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004478:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10d      	bne.n	800449c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004488:	2100      	movs	r1, #0
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f968 	bl	8004760 <USB_SetDevSpeed>
 8004490:	e008      	b.n	80044a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004492:	2101      	movs	r1, #1
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f963 	bl	8004760 <USB_SetDevSpeed>
 800449a:	e003      	b.n	80044a4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800449c:	2103      	movs	r1, #3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f95e 	bl	8004760 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044a4:	2110      	movs	r1, #16
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f8fa 	bl	80046a0 <USB_FlushTxFifo>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f924 	bl	8004704 <USB_FlushRxFifo>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044cc:	461a      	mov	r2, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d8:	461a      	mov	r2, r3
 80044da:	2300      	movs	r3, #0
 80044dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e4:	461a      	mov	r2, r3
 80044e6:	2300      	movs	r3, #0
 80044e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	e043      	b.n	8004578 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004502:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004506:	d118      	bne.n	800453a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10a      	bne.n	8004524 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451a:	461a      	mov	r2, r3
 800451c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e013      	b.n	800454c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004530:	461a      	mov	r2, r3
 8004532:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e008      	b.n	800454c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004546:	461a      	mov	r2, r3
 8004548:	2300      	movs	r3, #0
 800454a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004558:	461a      	mov	r2, r3
 800455a:	2300      	movs	r3, #0
 800455c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456a:	461a      	mov	r2, r3
 800456c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004570:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	3301      	adds	r3, #1
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800457c:	461a      	mov	r2, r3
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4293      	cmp	r3, r2
 8004582:	d3b5      	bcc.n	80044f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e043      	b.n	8004612 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800459c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045a0:	d118      	bne.n	80045d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b4:	461a      	mov	r2, r3
 80045b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	e013      	b.n	80045e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ca:	461a      	mov	r2, r3
 80045cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045d0:	6013      	str	r3, [r2, #0]
 80045d2:	e008      	b.n	80045e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e0:	461a      	mov	r2, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	2300      	movs	r3, #0
 80045f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004604:	461a      	mov	r2, r3
 8004606:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800460a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	3301      	adds	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004616:	461a      	mov	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4293      	cmp	r3, r2
 800461c:	d3b5      	bcc.n	800458a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800462c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004630:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800463e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004640:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004644:	2b00      	cmp	r3, #0
 8004646:	d105      	bne.n	8004654 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f043 0210 	orr.w	r2, r3, #16
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <USB_DevInit+0x2b4>)
 800465a:	4313      	orrs	r3, r2
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004660:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f043 0208 	orr.w	r2, r3, #8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004674:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004678:	2b01      	cmp	r3, #1
 800467a:	d105      	bne.n	8004688 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	4b06      	ldr	r3, [pc, #24]	@ (800469c <USB_DevInit+0x2b8>)
 8004682:	4313      	orrs	r3, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004688:	7dfb      	ldrb	r3, [r7, #23]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004694:	b004      	add	sp, #16
 8004696:	4770      	bx	lr
 8004698:	803c3800 	.word	0x803c3800
 800469c:	40000004 	.word	0x40000004

080046a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046ba:	d901      	bls.n	80046c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e01b      	b.n	80046f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	daf2      	bge.n	80046ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	019b      	lsls	r3, r3, #6
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046e4:	d901      	bls.n	80046ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e006      	b.n	80046f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d0f0      	beq.n	80046d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800471c:	d901      	bls.n	8004722 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e018      	b.n	8004754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	daf2      	bge.n	8004710 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2210      	movs	r2, #16
 8004732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004740:	d901      	bls.n	8004746 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e006      	b.n	8004754 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b10      	cmp	r3, #16
 8004750:	d0f0      	beq.n	8004734 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	68f9      	ldr	r1, [r7, #12]
 800477c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004792:	b480      	push	{r7}
 8004794:	b085      	sub	sp, #20
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047ac:	f023 0303 	bic.w	r3, r3, #3
 80047b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047c0:	f043 0302 	orr.w	r3, r3, #2
 80047c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f003 0301 	and.w	r3, r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004808:	d901      	bls.n	800480e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e022      	b.n	8004854 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
 8004814:	daf2      	bge.n	80047fc <USB_CoreReset+0xc>

  count = 10U;
 8004816:	230a      	movs	r3, #10
 8004818:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800481a:	e002      	b.n	8004822 <USB_CoreReset+0x32>
  {
    count--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f9      	bne.n	800481c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004840:	d901      	bls.n	8004846 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e006      	b.n	8004854 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d0f0      	beq.n	8004834 <USB_CoreReset+0x44>

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004876:	f3ef 8305 	mrs	r3, IPSR
 800487a:	60bb      	str	r3, [r7, #8]
  return(result);
 800487c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10f      	bne.n	80048a2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004882:	f3ef 8310 	mrs	r3, PRIMASK
 8004886:	607b      	str	r3, [r7, #4]
  return(result);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d105      	bne.n	800489a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800488e:	f3ef 8311 	mrs	r3, BASEPRI
 8004892:	603b      	str	r3, [r7, #0]
  return(result);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <osKernelInitialize+0x3a>
 800489a:	4b0e      	ldr	r3, [pc, #56]	@ (80048d4 <osKernelInitialize+0x64>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d103      	bne.n	80048aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80048a2:	f06f 0305 	mvn.w	r3, #5
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e00c      	b.n	80048c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048aa:	4b0a      	ldr	r3, [pc, #40]	@ (80048d4 <osKernelInitialize+0x64>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d105      	bne.n	80048be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048b2:	4b08      	ldr	r3, [pc, #32]	@ (80048d4 <osKernelInitialize+0x64>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e002      	b.n	80048c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80048be:	f04f 33ff 	mov.w	r3, #4294967295
 80048c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048c4:	68fb      	ldr	r3, [r7, #12]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000824 	.word	0x20000824

080048d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048de:	f3ef 8305 	mrs	r3, IPSR
 80048e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80048e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10f      	bne.n	800490a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ea:	f3ef 8310 	mrs	r3, PRIMASK
 80048ee:	607b      	str	r3, [r7, #4]
  return(result);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d105      	bne.n	8004902 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048f6:	f3ef 8311 	mrs	r3, BASEPRI
 80048fa:	603b      	str	r3, [r7, #0]
  return(result);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <osKernelStart+0x3a>
 8004902:	4b0f      	ldr	r3, [pc, #60]	@ (8004940 <osKernelStart+0x68>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d103      	bne.n	8004912 <osKernelStart+0x3a>
    stat = osErrorISR;
 800490a:	f06f 0305 	mvn.w	r3, #5
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e010      	b.n	8004934 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <osKernelStart+0x68>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d109      	bne.n	800492e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800491a:	f7ff ffa1 	bl	8004860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <osKernelStart+0x68>)
 8004920:	2202      	movs	r2, #2
 8004922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004924:	f001 fd7e 	bl	8006424 <vTaskStartScheduler>
      stat = osOK;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	e002      	b.n	8004934 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004934:	68fb      	ldr	r3, [r7, #12]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000824 	.word	0x20000824

08004944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b090      	sub	sp, #64	@ 0x40
 8004948:	af04      	add	r7, sp, #16
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004954:	f3ef 8305 	mrs	r3, IPSR
 8004958:	61fb      	str	r3, [r7, #28]
  return(result);
 800495a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 808f 	bne.w	8004a80 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004962:	f3ef 8310 	mrs	r3, PRIMASK
 8004966:	61bb      	str	r3, [r7, #24]
  return(result);
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800496e:	f3ef 8311 	mrs	r3, BASEPRI
 8004972:	617b      	str	r3, [r7, #20]
  return(result);
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <osThreadNew+0x3e>
 800497a:	4b44      	ldr	r3, [pc, #272]	@ (8004a8c <osThreadNew+0x148>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d07e      	beq.n	8004a80 <osThreadNew+0x13c>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d07b      	beq.n	8004a80 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800498c:	2318      	movs	r3, #24
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004990:	2300      	movs	r3, #0
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004994:	f04f 33ff 	mov.w	r3, #4294967295
 8004998:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d045      	beq.n	8004a2c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <osThreadNew+0x6a>
        name = attr->name;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <osThreadNew+0x90>
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	2b38      	cmp	r3, #56	@ 0x38
 80049c6:	d805      	bhi.n	80049d4 <osThreadNew+0x90>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <osThreadNew+0x94>
        return (NULL);
 80049d4:	2300      	movs	r3, #0
 80049d6:	e054      	b.n	8004a82 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	089b      	lsrs	r3, r3, #2
 80049e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00e      	beq.n	8004a0e <osThreadNew+0xca>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b5b      	cmp	r3, #91	@ 0x5b
 80049f6:	d90a      	bls.n	8004a0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d006      	beq.n	8004a0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <osThreadNew+0xca>
        mem = 1;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	623b      	str	r3, [r7, #32]
 8004a0c:	e010      	b.n	8004a30 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10c      	bne.n	8004a30 <osThreadNew+0xec>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d108      	bne.n	8004a30 <osThreadNew+0xec>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <osThreadNew+0xec>
          mem = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	623b      	str	r3, [r7, #32]
 8004a2a:	e001      	b.n	8004a30 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d110      	bne.n	8004a58 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a3e:	9202      	str	r2, [sp, #8]
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f001 fb03 	bl	8006058 <xTaskCreateStatic>
 8004a52:	4603      	mov	r3, r0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	e013      	b.n	8004a80 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d110      	bne.n	8004a80 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	f107 0310 	add.w	r3, r7, #16
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f001 fb57 	bl	8006124 <xTaskCreate>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <osThreadNew+0x13c>
          hTask = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a80:	693b      	ldr	r3, [r7, #16]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3730      	adds	r7, #48	@ 0x30
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000824 	.word	0x20000824

08004a90 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a98:	f3ef 8305 	mrs	r3, IPSR
 8004a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8004a9e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10f      	bne.n	8004ac4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d105      	bne.n	8004abc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <osDelay+0x3c>
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <osDelay+0x58>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d103      	bne.n	8004acc <osDelay+0x3c>
    stat = osErrorISR;
 8004ac4:	f06f 0305 	mvn.w	r3, #5
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	e007      	b.n	8004adc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <osDelay+0x4c>
      vTaskDelay(ticks);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 fc6c 	bl	80063b4 <vTaskDelay>
    }
  }

  return (stat);
 8004adc:	697b      	ldr	r3, [r7, #20]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000824 	.word	0x20000824

08004aec <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08c      	sub	sp, #48	@ 0x30
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004afc:	f3ef 8305 	mrs	r3, IPSR
 8004b00:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b02:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 8086 	bne.w	8004c16 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b0e:	617b      	str	r3, [r7, #20]
  return(result);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b16:	f3ef 8311 	mrs	r3, BASEPRI
 8004b1a:	613b      	str	r3, [r7, #16]
  return(result);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <osSemaphoreNew+0x3e>
 8004b22:	4b3f      	ldr	r3, [pc, #252]	@ (8004c20 <osSemaphoreNew+0x134>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d075      	beq.n	8004c16 <osSemaphoreNew+0x12a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d072      	beq.n	8004c16 <osSemaphoreNew+0x12a>
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d86e      	bhi.n	8004c16 <osSemaphoreNew+0x12a>
    mem = -1;
 8004b38:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d015      	beq.n	8004b70 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d006      	beq.n	8004b5a <osSemaphoreNew+0x6e>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b52:	d902      	bls.n	8004b5a <osSemaphoreNew+0x6e>
        mem = 1;
 8004b54:	2301      	movs	r3, #1
 8004b56:	623b      	str	r3, [r7, #32]
 8004b58:	e00c      	b.n	8004b74 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d108      	bne.n	8004b74 <osSemaphoreNew+0x88>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d104      	bne.n	8004b74 <osSemaphoreNew+0x88>
          mem = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	e001      	b.n	8004b74 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d04c      	beq.n	8004c16 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d128      	bne.n	8004bd4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10a      	bne.n	8004b9e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	9200      	str	r2, [sp, #0]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2100      	movs	r1, #0
 8004b94:	2001      	movs	r0, #1
 8004b96:	f000 fa57 	bl	8005048 <xQueueGenericCreateStatic>
 8004b9a:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b9c:	e005      	b.n	8004baa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	2001      	movs	r0, #1
 8004ba4:	f000 fad7 	bl	8005156 <xQueueGenericCreate>
 8004ba8:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d022      	beq.n	8004bf6 <osSemaphoreNew+0x10a>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d01f      	beq.n	8004bf6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bbe:	f000 fba7 	bl	8005310 <xQueueGenericSend>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d016      	beq.n	8004bf6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004bc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bca:	f001 f86f 	bl	8005cac <vQueueDelete>
            hSemaphore = NULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd2:	e010      	b.n	8004bf6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d108      	bne.n	8004bec <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fb1d 	bl	8005222 <xQueueCreateCountingSemaphoreStatic>
 8004be8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bea:	e004      	b.n	8004bf6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 fb54 	bl	800529c <xQueueCreateCountingSemaphore>
 8004bf4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00c      	beq.n	8004c16 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <osSemaphoreNew+0x11e>
          name = attr->name;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	e001      	b.n	8004c0e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004c0e:	69f9      	ldr	r1, [r7, #28]
 8004c10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c12:	f001 f999 	bl	8005f48 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3728      	adds	r7, #40	@ 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	20000824 	.word	0x20000824

08004c24 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004c3c:	f06f 0303 	mvn.w	r3, #3
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e04b      	b.n	8004cdc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c44:	f3ef 8305 	mrs	r3, IPSR
 8004c48:	617b      	str	r3, [r7, #20]
  return(result);
 8004c4a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10f      	bne.n	8004c70 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c50:	f3ef 8310 	mrs	r3, PRIMASK
 8004c54:	613b      	str	r3, [r7, #16]
  return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c60:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d026      	beq.n	8004cb6 <osSemaphoreAcquire+0x92>
 8004c68:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce8 <osSemaphoreAcquire+0xc4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d122      	bne.n	8004cb6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004c76:	f06f 0303 	mvn.w	r3, #3
 8004c7a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004c7c:	e02d      	b.n	8004cda <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004c82:	f107 0308 	add.w	r3, r7, #8
 8004c86:	461a      	mov	r2, r3
 8004c88:	2100      	movs	r1, #0
 8004c8a:	69b8      	ldr	r0, [r7, #24]
 8004c8c:	f000 ff86 	bl	8005b9c <xQueueReceiveFromISR>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d003      	beq.n	8004c9e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004c96:	f06f 0302 	mvn.w	r3, #2
 8004c9a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004c9c:	e01d      	b.n	8004cda <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01a      	beq.n	8004cda <osSemaphoreAcquire+0xb6>
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <osSemaphoreAcquire+0xc8>)
 8004ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004cb4:	e011      	b.n	8004cda <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004cb6:	6839      	ldr	r1, [r7, #0]
 8004cb8:	69b8      	ldr	r0, [r7, #24]
 8004cba:	f000 fe57 	bl	800596c <xQueueSemaphoreTake>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d00b      	beq.n	8004cdc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004cca:	f06f 0301 	mvn.w	r3, #1
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e004      	b.n	8004cdc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004cd2:	f06f 0302 	mvn.w	r3, #2
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e000      	b.n	8004cdc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004cda:	bf00      	nop
      }
    }
  }

  return (stat);
 8004cdc:	69fb      	ldr	r3, [r7, #28]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000824 	.word	0x20000824
 8004cec:	e000ed04 	.word	0xe000ed04

08004cf0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b088      	sub	sp, #32
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004d06:	f06f 0303 	mvn.w	r3, #3
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e03e      	b.n	8004d8c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d0e:	f3ef 8305 	mrs	r3, IPSR
 8004d12:	617b      	str	r3, [r7, #20]
  return(result);
 8004d14:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10f      	bne.n	8004d3a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d105      	bne.n	8004d32 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d26:	f3ef 8311 	mrs	r3, BASEPRI
 8004d2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01e      	beq.n	8004d70 <osSemaphoreRelease+0x80>
 8004d32:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <osSemaphoreRelease+0xa8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d11a      	bne.n	8004d70 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004d3e:	f107 0308 	add.w	r3, r7, #8
 8004d42:	4619      	mov	r1, r3
 8004d44:	69b8      	ldr	r0, [r7, #24]
 8004d46:	f000 fc90 	bl	800566a <xQueueGiveFromISR>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d003      	beq.n	8004d58 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004d50:	f06f 0302 	mvn.w	r3, #2
 8004d54:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004d56:	e018      	b.n	8004d8a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d015      	beq.n	8004d8a <osSemaphoreRelease+0x9a>
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d9c <osSemaphoreRelease+0xac>)
 8004d60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004d6e:	e00c      	b.n	8004d8a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004d70:	2300      	movs	r3, #0
 8004d72:	2200      	movs	r2, #0
 8004d74:	2100      	movs	r1, #0
 8004d76:	69b8      	ldr	r0, [r7, #24]
 8004d78:	f000 faca 	bl	8005310 <xQueueGenericSend>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d004      	beq.n	8004d8c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004d82:	f06f 0302 	mvn.w	r3, #2
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e000      	b.n	8004d8c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004d8a:	bf00      	nop
    }
  }

  return (stat);
 8004d8c:	69fb      	ldr	r3, [r7, #28]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000824 	.word	0x20000824
 8004d9c:	e000ed04 	.word	0xe000ed04

08004da0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a07      	ldr	r2, [pc, #28]	@ (8004dcc <vApplicationGetIdleTaskMemory+0x2c>)
 8004db0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4a06      	ldr	r2, [pc, #24]	@ (8004dd0 <vApplicationGetIdleTaskMemory+0x30>)
 8004db6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2280      	movs	r2, #128	@ 0x80
 8004dbc:	601a      	str	r2, [r3, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000828 	.word	0x20000828
 8004dd0:	20000884 	.word	0x20000884

08004dd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4a07      	ldr	r2, [pc, #28]	@ (8004e00 <vApplicationGetTimerTaskMemory+0x2c>)
 8004de4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4a06      	ldr	r2, [pc, #24]	@ (8004e04 <vApplicationGetTimerTaskMemory+0x30>)
 8004dea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	3714      	adds	r7, #20
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	20000a84 	.word	0x20000a84
 8004e04:	20000ae0 	.word	0x20000ae0

08004e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f103 0208 	add.w	r2, r3, #8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f103 0208 	add.w	r2, r3, #8
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f103 0208 	add.w	r2, r3, #8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	601a      	str	r2, [r3, #0]
}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b085      	sub	sp, #20
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d103      	bne.n	8004eca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e00c      	b.n	8004ee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e002      	b.n	8004ed8 <vListInsert+0x2e>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d2f6      	bcs.n	8004ed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	601a      	str	r2, [r3, #0]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6892      	ldr	r2, [r2, #8]
 8004f32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6852      	ldr	r2, [r2, #4]
 8004f3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d103      	bne.n	8004f50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	1e5a      	subs	r2, r3, #1
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10d      	bne.n	8004fa0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f88:	b672      	cpsid	i
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	b662      	cpsie	i
 8004f98:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	e7fd      	b.n	8004f9c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004fa0:	f002 fd04 	bl	80079ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	68f9      	ldr	r1, [r7, #12]
 8004fd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	441a      	add	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	22ff      	movs	r2, #255	@ 0xff
 8004fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	22ff      	movs	r2, #255	@ 0xff
 8004fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d114      	bne.n	8005020 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d01a      	beq.n	8005034 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	3310      	adds	r3, #16
 8005002:	4618      	mov	r0, r3
 8005004:	f001 fcaa 	bl	800695c <xTaskRemoveFromEventList>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d012      	beq.n	8005034 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800500e:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <xQueueGenericReset+0xd4>)
 8005010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	e009      	b.n	8005034 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	3310      	adds	r3, #16
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff feef 	bl	8004e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3324      	adds	r3, #36	@ 0x24
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff feea 	bl	8004e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005034:	f002 fcf0 	bl	8007a18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005038:	2301      	movs	r3, #1
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08e      	sub	sp, #56	@ 0x38
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10d      	bne.n	8005078 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005060:	b672      	cpsid	i
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	b662      	cpsie	i
 8005070:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	b672      	cpsid	i
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	b662      	cpsie	i
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <xQueueGenericCreateStatic+0x5e>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <xQueueGenericCreateStatic+0x62>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <xQueueGenericCreateStatic+0x64>
 80050aa:	2300      	movs	r3, #0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10d      	bne.n	80050cc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	b672      	cpsid	i
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	b662      	cpsie	i
 80050c4:	623b      	str	r3, [r7, #32]
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d102      	bne.n	80050d8 <xQueueGenericCreateStatic+0x90>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <xQueueGenericCreateStatic+0x94>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <xQueueGenericCreateStatic+0x96>
 80050dc:	2300      	movs	r3, #0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	b672      	cpsid	i
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	b662      	cpsie	i
 80050f6:	61fb      	str	r3, [r7, #28]
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050fe:	2350      	movs	r3, #80	@ 0x50
 8005100:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b50      	cmp	r3, #80	@ 0x50
 8005106:	d00d      	beq.n	8005124 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510c:	b672      	cpsid	i
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	b662      	cpsie	i
 800511c:	61bb      	str	r3, [r7, #24]
}
 800511e:	bf00      	nop
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005124:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800512a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00d      	beq.n	800514c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005138:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68b9      	ldr	r1, [r7, #8]
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 f848 	bl	80051dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800514c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800514e:	4618      	mov	r0, r3
 8005150:	3730      	adds	r7, #48	@ 0x30
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005156:	b580      	push	{r7, lr}
 8005158:	b08a      	sub	sp, #40	@ 0x28
 800515a:	af02      	add	r7, sp, #8
 800515c:	60f8      	str	r0, [r7, #12]
 800515e:	60b9      	str	r1, [r7, #8]
 8005160:	4613      	mov	r3, r2
 8005162:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10d      	bne.n	8005186 <xQueueGenericCreate+0x30>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516e:	b672      	cpsid	i
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	b662      	cpsie	i
 800517e:	613b      	str	r3, [r7, #16]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d102      	bne.n	8005192 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e004      	b.n	800519c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	3350      	adds	r3, #80	@ 0x50
 80051a0:	4618      	mov	r0, r3
 80051a2:	f002 fd31 	bl	8007c08 <pvPortMalloc>
 80051a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d011      	beq.n	80051d2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	3350      	adds	r3, #80	@ 0x50
 80051b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051c0:	79fa      	ldrb	r2, [r7, #7]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	4613      	mov	r3, r2
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f000 f805 	bl	80051dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051d2:	69bb      	ldr	r3, [r7, #24]
	}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3720      	adds	r7, #32
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e002      	b.n	80051fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800520a:	2101      	movs	r1, #1
 800520c:	69b8      	ldr	r0, [r7, #24]
 800520e:	f7ff feaf 	bl	8004f70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005222:	b580      	push	{r7, lr}
 8005224:	b08a      	sub	sp, #40	@ 0x28
 8005226:	af02      	add	r7, sp, #8
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	b672      	cpsid	i
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	b662      	cpsie	i
 8005248:	61bb      	str	r3, [r7, #24]
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	429a      	cmp	r2, r3
 8005256:	d90d      	bls.n	8005274 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	b672      	cpsid	i
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	b662      	cpsie	i
 800526c:	617b      	str	r3, [r7, #20]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005274:	2302      	movs	r3, #2
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	2100      	movs	r1, #0
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff fee2 	bl	8005048 <xQueueGenericCreateStatic>
 8005284:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005292:	69fb      	ldr	r3, [r7, #28]
	}
 8005294:	4618      	mov	r0, r3
 8005296:	3720      	adds	r7, #32
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10d      	bne.n	80052c8 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b0:	b672      	cpsid	i
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	b662      	cpsie	i
 80052c0:	613b      	str	r3, [r7, #16]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d90d      	bls.n	80052ec <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d4:	b672      	cpsid	i
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	b662      	cpsie	i
 80052e4:	60fb      	str	r3, [r7, #12]
}
 80052e6:	bf00      	nop
 80052e8:	bf00      	nop
 80052ea:	e7fd      	b.n	80052e8 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80052ec:	2202      	movs	r2, #2
 80052ee:	2100      	movs	r1, #0
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff30 	bl	8005156 <xQueueGenericCreate>
 80052f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005304:	697b      	ldr	r3, [r7, #20]
	}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b08e      	sub	sp, #56	@ 0x38
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800531e:	2300      	movs	r3, #0
 8005320:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10d      	bne.n	8005348 <xQueueGenericSend+0x38>
	__asm volatile
 800532c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005330:	b672      	cpsid	i
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	b662      	cpsie	i
 8005340:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <xQueueGenericSend+0x46>
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <xQueueGenericSend+0x4a>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <xQueueGenericSend+0x4c>
 800535a:	2300      	movs	r3, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <xQueueGenericSend+0x6c>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	b672      	cpsid	i
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	b662      	cpsie	i
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d103      	bne.n	800538a <xQueueGenericSend+0x7a>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <xQueueGenericSend+0x7e>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <xQueueGenericSend+0x80>
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10d      	bne.n	80053b0 <xQueueGenericSend+0xa0>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	b672      	cpsid	i
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	b662      	cpsie	i
 80053a8:	623b      	str	r3, [r7, #32]
}
 80053aa:	bf00      	nop
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053b0:	f001 fc9c 	bl	8006cec <xTaskGetSchedulerState>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d102      	bne.n	80053c0 <xQueueGenericSend+0xb0>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <xQueueGenericSend+0xb4>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <xQueueGenericSend+0xb6>
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10d      	bne.n	80053e6 <xQueueGenericSend+0xd6>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	b672      	cpsid	i
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	b662      	cpsie	i
 80053de:	61fb      	str	r3, [r7, #28]
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	e7fd      	b.n	80053e2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053e6:	f002 fae1 	bl	80079ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <xQueueGenericSend+0xec>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d129      	bne.n	8005450 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005402:	f000 fc91 	bl	8005d28 <prvCopyDataToQueue>
 8005406:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005412:	3324      	adds	r3, #36	@ 0x24
 8005414:	4618      	mov	r0, r3
 8005416:	f001 faa1 	bl	800695c <xTaskRemoveFromEventList>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d013      	beq.n	8005448 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005420:	4b3f      	ldr	r3, [pc, #252]	@ (8005520 <xQueueGenericSend+0x210>)
 8005422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	e00a      	b.n	8005448 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b39      	ldr	r3, [pc, #228]	@ (8005520 <xQueueGenericSend+0x210>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005448:	f002 fae6 	bl	8007a18 <vPortExitCritical>
				return pdPASS;
 800544c:	2301      	movs	r3, #1
 800544e:	e063      	b.n	8005518 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005456:	f002 fadf 	bl	8007a18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800545a:	2300      	movs	r3, #0
 800545c:	e05c      	b.n	8005518 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800545e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fadd 	bl	8006a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005472:	f002 fad1 	bl	8007a18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005476:	f001 f841 	bl	80064fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800547a:	f002 fa97 	bl	80079ac <vPortEnterCritical>
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005484:	b25b      	sxtb	r3, r3
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d103      	bne.n	8005494 <xQueueGenericSend+0x184>
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800549a:	b25b      	sxtb	r3, r3
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d103      	bne.n	80054aa <xQueueGenericSend+0x19a>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054aa:	f002 fab5 	bl	8007a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ae:	1d3a      	adds	r2, r7, #4
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	4611      	mov	r1, r2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 facc 	bl	8006a54 <xTaskCheckForTimeOut>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d124      	bne.n	800550c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054c4:	f000 fd28 	bl	8005f18 <prvIsQueueFull>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d018      	beq.n	8005500 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	3310      	adds	r3, #16
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 f9ea 	bl	80068b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054de:	f000 fcb3 	bl	8005e48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054e2:	f001 f819 	bl	8006518 <xTaskResumeAll>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f47f af7c 	bne.w	80053e6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80054ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <xQueueGenericSend+0x210>)
 80054f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	e772      	b.n	80053e6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005502:	f000 fca1 	bl	8005e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005506:	f001 f807 	bl	8006518 <xTaskResumeAll>
 800550a:	e76c      	b.n	80053e6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800550c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800550e:	f000 fc9b 	bl	8005e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005512:	f001 f801 	bl	8006518 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005518:	4618      	mov	r0, r3
 800551a:	3738      	adds	r7, #56	@ 0x38
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	e000ed04 	.word	0xe000ed04

08005524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08e      	sub	sp, #56	@ 0x38
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10d      	bne.n	8005558 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005540:	b672      	cpsid	i
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	b662      	cpsie	i
 8005550:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	e7fd      	b.n	8005554 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d103      	bne.n	8005566 <xQueueGenericSendFromISR+0x42>
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <xQueueGenericSendFromISR+0x46>
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <xQueueGenericSendFromISR+0x48>
 800556a:	2300      	movs	r3, #0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10d      	bne.n	800558c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005574:	b672      	cpsid	i
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	b662      	cpsie	i
 8005584:	623b      	str	r3, [r7, #32]
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	e7fd      	b.n	8005588 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d103      	bne.n	800559a <xQueueGenericSendFromISR+0x76>
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <xQueueGenericSendFromISR+0x7a>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <xQueueGenericSendFromISR+0x7c>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10d      	bne.n	80055c0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80055a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a8:	b672      	cpsid	i
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	b662      	cpsie	i
 80055b8:	61fb      	str	r3, [r7, #28]
}
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	e7fd      	b.n	80055bc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055c0:	f002 fadc 	bl	8007b7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055c4:	f3ef 8211 	mrs	r2, BASEPRI
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	b672      	cpsid	i
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	b662      	cpsie	i
 80055dc:	61ba      	str	r2, [r7, #24]
 80055de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d302      	bcc.n	80055f6 <xQueueGenericSendFromISR+0xd2>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d12c      	bne.n	8005650 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005606:	f000 fb8f 	bl	8005d28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800560a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800560e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005612:	d112      	bne.n	800563a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d016      	beq.n	800564a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561e:	3324      	adds	r3, #36	@ 0x24
 8005620:	4618      	mov	r0, r3
 8005622:	f001 f99b 	bl	800695c <xTaskRemoveFromEventList>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00e      	beq.n	800564a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e007      	b.n	800564a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800563a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800563e:	3301      	adds	r3, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	b25a      	sxtb	r2, r3
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800564a:	2301      	movs	r3, #1
 800564c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800564e:	e001      	b.n	8005654 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005650:	2300      	movs	r3, #0
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800565e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005662:	4618      	mov	r0, r3
 8005664:	3738      	adds	r7, #56	@ 0x38
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08e      	sub	sp, #56	@ 0x38
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10d      	bne.n	800569a <xQueueGiveFromISR+0x30>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005682:	b672      	cpsid	i
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	b662      	cpsie	i
 8005692:	623b      	str	r3, [r7, #32]
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	e7fd      	b.n	8005696 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00d      	beq.n	80056be <xQueueGiveFromISR+0x54>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	b672      	cpsid	i
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	b662      	cpsie	i
 80056b6:	61fb      	str	r3, [r7, #28]
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	e7fd      	b.n	80056ba <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <xQueueGiveFromISR+0x64>
 80056c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <xQueueGiveFromISR+0x68>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <xQueueGiveFromISR+0x6a>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10d      	bne.n	80056f4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056dc:	b672      	cpsid	i
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	b662      	cpsie	i
 80056ec:	61bb      	str	r3, [r7, #24]
}
 80056ee:	bf00      	nop
 80056f0:	bf00      	nop
 80056f2:	e7fd      	b.n	80056f0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f4:	f002 fa42 	bl	8007b7c <vPortValidateInterruptPriority>
	__asm volatile
 80056f8:	f3ef 8211 	mrs	r2, BASEPRI
 80056fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005700:	b672      	cpsid	i
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	b662      	cpsie	i
 8005710:	617a      	str	r2, [r7, #20]
 8005712:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005714:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005716:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005724:	429a      	cmp	r2, r3
 8005726:	d22b      	bcs.n	8005780 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800572e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800573a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d112      	bne.n	800576a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d016      	beq.n	800577a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	3324      	adds	r3, #36	@ 0x24
 8005750:	4618      	mov	r0, r3
 8005752:	f001 f903 	bl	800695c <xTaskRemoveFromEventList>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e007      	b.n	800577a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800576a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800576e:	3301      	adds	r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	b25a      	sxtb	r2, r3
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800577a:	2301      	movs	r3, #1
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34
 800577e:	e001      	b.n	8005784 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005780:	2300      	movs	r3, #0
 8005782:	637b      	str	r3, [r7, #52]	@ 0x34
 8005784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005786:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f383 8811 	msr	BASEPRI, r3
}
 800578e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005792:	4618      	mov	r0, r3
 8005794:	3738      	adds	r7, #56	@ 0x38
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08c      	sub	sp, #48	@ 0x30
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057a8:	2300      	movs	r3, #0
 80057aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <xQueueReceive+0x36>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	b672      	cpsid	i
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	b662      	cpsie	i
 80057ca:	623b      	str	r3, [r7, #32]
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <xQueueReceive+0x44>
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <xQueueReceive+0x48>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <xQueueReceive+0x4a>
 80057e4:	2300      	movs	r3, #0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <xQueueReceive+0x6a>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ee:	b672      	cpsid	i
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	b662      	cpsie	i
 80057fe:	61fb      	str	r3, [r7, #28]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005806:	f001 fa71 	bl	8006cec <xTaskGetSchedulerState>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <xQueueReceive+0x7a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <xQueueReceive+0x7e>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <xQueueReceive+0x80>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <xQueueReceive+0xa0>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	b672      	cpsid	i
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	b662      	cpsie	i
 8005834:	61bb      	str	r3, [r7, #24]
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800583c:	f002 f8b6 	bl	80079ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01f      	beq.n	800588c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005850:	f000 fad4 	bl	8005dfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	1e5a      	subs	r2, r3, #1
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	3310      	adds	r3, #16
 8005868:	4618      	mov	r0, r3
 800586a:	f001 f877 	bl	800695c <xTaskRemoveFromEventList>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005874:	4b3c      	ldr	r3, [pc, #240]	@ (8005968 <xQueueReceive+0x1cc>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005884:	f002 f8c8 	bl	8007a18 <vPortExitCritical>
				return pdPASS;
 8005888:	2301      	movs	r3, #1
 800588a:	e069      	b.n	8005960 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005892:	f002 f8c1 	bl	8007a18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005896:	2300      	movs	r3, #0
 8005898:	e062      	b.n	8005960 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058a0:	f107 0310 	add.w	r3, r7, #16
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 f8bf 	bl	8006a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058aa:	2301      	movs	r3, #1
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ae:	f002 f8b3 	bl	8007a18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058b2:	f000 fe23 	bl	80064fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058b6:	f002 f879 	bl	80079ac <vPortEnterCritical>
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058c0:	b25b      	sxtb	r3, r3
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d103      	bne.n	80058d0 <xQueueReceive+0x134>
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058d6:	b25b      	sxtb	r3, r3
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d103      	bne.n	80058e6 <xQueueReceive+0x14a>
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058e6:	f002 f897 	bl	8007a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058ea:	1d3a      	adds	r2, r7, #4
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 f8ae 	bl	8006a54 <xTaskCheckForTimeOut>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d123      	bne.n	8005946 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005900:	f000 faf4 	bl	8005eec <prvIsQueueEmpty>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d017      	beq.n	800593a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	3324      	adds	r3, #36	@ 0x24
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4611      	mov	r1, r2
 8005912:	4618      	mov	r0, r3
 8005914:	f000 ffcc 	bl	80068b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800591a:	f000 fa95 	bl	8005e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800591e:	f000 fdfb 	bl	8006518 <xTaskResumeAll>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d189      	bne.n	800583c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005928:	4b0f      	ldr	r3, [pc, #60]	@ (8005968 <xQueueReceive+0x1cc>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	e780      	b.n	800583c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800593a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800593c:	f000 fa84 	bl	8005e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005940:	f000 fdea 	bl	8006518 <xTaskResumeAll>
 8005944:	e77a      	b.n	800583c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005948:	f000 fa7e 	bl	8005e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800594c:	f000 fde4 	bl	8006518 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005950:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005952:	f000 facb 	bl	8005eec <prvIsQueueEmpty>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	f43f af6f 	beq.w	800583c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800595e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005960:	4618      	mov	r0, r3
 8005962:	3730      	adds	r7, #48	@ 0x30
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	@ 0x38
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10d      	bne.n	80059a4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	b672      	cpsid	i
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	b662      	cpsie	i
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b0:	b672      	cpsid	i
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	b662      	cpsie	i
 80059c0:	61fb      	str	r3, [r7, #28]
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059c8:	f001 f990 	bl	8006cec <xTaskGetSchedulerState>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <xQueueSemaphoreTake+0x6c>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <xQueueSemaphoreTake+0x70>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <xQueueSemaphoreTake+0x72>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10d      	bne.n	80059fe <xQueueSemaphoreTake+0x92>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e6:	b672      	cpsid	i
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	b662      	cpsie	i
 80059f6:	61bb      	str	r3, [r7, #24]
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	e7fd      	b.n	80059fa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059fe:	f001 ffd5 	bl	80079ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d024      	beq.n	8005a58 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a1e:	f001 fae7 	bl	8006ff0 <pvTaskIncrementMutexHeldCount>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00f      	beq.n	8005a50 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a32:	3310      	adds	r3, #16
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 ff91 	bl	800695c <xTaskRemoveFromEventList>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a40:	4b55      	ldr	r3, [pc, #340]	@ (8005b98 <xQueueSemaphoreTake+0x22c>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a50:	f001 ffe2 	bl	8007a18 <vPortExitCritical>
				return pdPASS;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e09a      	b.n	8005b8e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d114      	bne.n	8005a88 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	b672      	cpsid	i
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	b662      	cpsie	i
 8005a78:	617b      	str	r3, [r7, #20]
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	e7fd      	b.n	8005a7c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a80:	f001 ffca 	bl	8007a18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e082      	b.n	8005b8e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a8e:	f107 030c 	add.w	r3, r7, #12
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 ffc8 	bl	8006a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a9c:	f001 ffbc 	bl	8007a18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa0:	f000 fd2c 	bl	80064fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa4:	f001 ff82 	bl	80079ac <vPortEnterCritical>
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <xQueueSemaphoreTake+0x152>
 8005ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d103      	bne.n	8005ad4 <xQueueSemaphoreTake+0x168>
 8005acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad4:	f001 ffa0 	bl	8007a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ad8:	463a      	mov	r2, r7
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 ffb7 	bl	8006a54 <xTaskCheckForTimeOut>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d132      	bne.n	8005b52 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005aee:	f000 f9fd 	bl	8005eec <prvIsQueueEmpty>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d026      	beq.n	8005b46 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005b00:	f001 ff54 	bl	80079ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 f90d 	bl	8006d28 <xTaskPriorityInherit>
 8005b0e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005b10:	f001 ff82 	bl	8007a18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	3324      	adds	r3, #36	@ 0x24
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fec7 	bl	80068b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b24:	f000 f990 	bl	8005e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b28:	f000 fcf6 	bl	8006518 <xTaskResumeAll>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f47f af65 	bne.w	80059fe <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005b34:	4b18      	ldr	r3, [pc, #96]	@ (8005b98 <xQueueSemaphoreTake+0x22c>)
 8005b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	e75b      	b.n	80059fe <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b48:	f000 f97e 	bl	8005e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b4c:	f000 fce4 	bl	8006518 <xTaskResumeAll>
 8005b50:	e755      	b.n	80059fe <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b54:	f000 f978 	bl	8005e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b58:	f000 fcde 	bl	8006518 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b5e:	f000 f9c5 	bl	8005eec <prvIsQueueEmpty>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f43f af4a 	beq.w	80059fe <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005b70:	f001 ff1c 	bl	80079ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b76:	f000 f8bf 	bl	8005cf8 <prvGetDisinheritPriorityAfterTimeout>
 8005b7a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f9ac 	bl	8006ee0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b88:	f001 ff46 	bl	8007a18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3738      	adds	r7, #56	@ 0x38
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b08e      	sub	sp, #56	@ 0x38
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10d      	bne.n	8005bce <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	b672      	cpsid	i
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	b662      	cpsie	i
 8005bc6:	623b      	str	r3, [r7, #32]
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	e7fd      	b.n	8005bca <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d103      	bne.n	8005bdc <xQueueReceiveFromISR+0x40>
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <xQueueReceiveFromISR+0x44>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <xQueueReceiveFromISR+0x46>
 8005be0:	2300      	movs	r3, #0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10d      	bne.n	8005c02 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	b672      	cpsid	i
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	b662      	cpsie	i
 8005bfa:	61fb      	str	r3, [r7, #28]
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	e7fd      	b.n	8005bfe <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c02:	f001 ffbb 	bl	8007b7c <vPortValidateInterruptPriority>
	__asm volatile
 8005c06:	f3ef 8211 	mrs	r2, BASEPRI
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	b672      	cpsid	i
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	b662      	cpsie	i
 8005c1e:	61ba      	str	r2, [r7, #24]
 8005c20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d02f      	beq.n	8005c92 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c40:	f000 f8dc 	bl	8005dfc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	1e5a      	subs	r2, r3, #1
 8005c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d112      	bne.n	8005c7c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d016      	beq.n	8005c8c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c60:	3310      	adds	r3, #16
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fe7a 	bl	800695c <xTaskRemoveFromEventList>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00e      	beq.n	8005c8c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e007      	b.n	8005c8c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c80:	3301      	adds	r3, #1
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	b25a      	sxtb	r2, r3
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c90:	e001      	b.n	8005c96 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f383 8811 	msr	BASEPRI, r3
}
 8005ca0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3738      	adds	r7, #56	@ 0x38
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10d      	bne.n	8005cda <vQueueDelete+0x2e>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc2:	b672      	cpsid	i
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	b662      	cpsie	i
 8005cd2:	60bb      	str	r3, [r7, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f95e 	bl	8005f9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d102      	bne.n	8005cf0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f002 f85a 	bl	8007da4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d006      	beq.n	8005d16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e001      	b.n	8005d1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
	}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10d      	bne.n	8005d62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d14d      	bne.n	8005dea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 f850 	bl	8006df8 <xTaskPriorityDisinherit>
 8005d58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	e043      	b.n	8005dea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d119      	bne.n	8005d9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6858      	ldr	r0, [r3, #4]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	461a      	mov	r2, r3
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	f002 f95e 	bl	8008034 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d32b      	bcc.n	8005dea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	605a      	str	r2, [r3, #4]
 8005d9a:	e026      	b.n	8005dea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	68d8      	ldr	r0, [r3, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da4:	461a      	mov	r2, r3
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	f002 f944 	bl	8008034 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db4:	425b      	negs	r3, r3
 8005db6:	441a      	add	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d207      	bcs.n	8005dd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	441a      	add	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d105      	bne.n	8005dea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005df2:	697b      	ldr	r3, [r7, #20]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d018      	beq.n	8005e40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	441a      	add	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d303      	bcc.n	8005e30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68d9      	ldr	r1, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e38:	461a      	mov	r2, r3
 8005e3a:	6838      	ldr	r0, [r7, #0]
 8005e3c:	f002 f8fa 	bl	8008034 <memcpy>
	}
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005e50:	f001 fdac 	bl	80079ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e5c:	e011      	b.n	8005e82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d012      	beq.n	8005e8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3324      	adds	r3, #36	@ 0x24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fd76 	bl	800695c <xTaskRemoveFromEventList>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e76:	f000 fe55 	bl	8006b24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	dce9      	bgt.n	8005e5e <prvUnlockQueue+0x16>
 8005e8a:	e000      	b.n	8005e8e <prvUnlockQueue+0x46>
					break;
 8005e8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	22ff      	movs	r2, #255	@ 0xff
 8005e92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e96:	f001 fdbf 	bl	8007a18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e9a:	f001 fd87 	bl	80079ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ea4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ea6:	e011      	b.n	8005ecc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d012      	beq.n	8005ed6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3310      	adds	r3, #16
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fd51 	bl	800695c <xTaskRemoveFromEventList>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ec0:	f000 fe30 	bl	8006b24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ec4:	7bbb      	ldrb	r3, [r7, #14]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	dce9      	bgt.n	8005ea8 <prvUnlockQueue+0x60>
 8005ed4:	e000      	b.n	8005ed8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ed6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	22ff      	movs	r2, #255	@ 0xff
 8005edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005ee0:	f001 fd9a 	bl	8007a18 <vPortExitCritical>
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ef4:	f001 fd5a 	bl	80079ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e001      	b.n	8005f0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f0a:	f001 fd85 	bl	8007a18 <vPortExitCritical>

	return xReturn;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005f20:	f001 fd44 	bl	80079ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d102      	bne.n	8005f36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005f30:	2301      	movs	r3, #1
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e001      	b.n	8005f3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005f3a:	f001 fd6d 	bl	8007a18 <vPortExitCritical>

	return xReturn;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e014      	b.n	8005f82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005f58:	4a0f      	ldr	r2, [pc, #60]	@ (8005f98 <vQueueAddToRegistry+0x50>)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005f64:	490c      	ldr	r1, [pc, #48]	@ (8005f98 <vQueueAddToRegistry+0x50>)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f98 <vQueueAddToRegistry+0x50>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f7a:	e006      	b.n	8005f8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b07      	cmp	r3, #7
 8005f86:	d9e7      	bls.n	8005f58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000ee0 	.word	0x20000ee0

08005f9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	e016      	b.n	8005fd8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005faa:	4a10      	ldr	r2, [pc, #64]	@ (8005fec <vQueueUnregisterQueue+0x50>)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d10b      	bne.n	8005fd2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005fba:	4a0c      	ldr	r2, [pc, #48]	@ (8005fec <vQueueUnregisterQueue+0x50>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005fc4:	4a09      	ldr	r2, [pc, #36]	@ (8005fec <vQueueUnregisterQueue+0x50>)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4413      	add	r3, r2
 8005fcc:	2200      	movs	r2, #0
 8005fce:	605a      	str	r2, [r3, #4]
				break;
 8005fd0:	e006      	b.n	8005fe0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b07      	cmp	r3, #7
 8005fdc:	d9e5      	bls.n	8005faa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20000ee0 	.word	0x20000ee0

08005ff0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006000:	f001 fcd4 	bl	80079ac <vPortEnterCritical>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800600a:	b25b      	sxtb	r3, r3
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d103      	bne.n	800601a <vQueueWaitForMessageRestricted+0x2a>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006020:	b25b      	sxtb	r3, r3
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d103      	bne.n	8006030 <vQueueWaitForMessageRestricted+0x40>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006030:	f001 fcf2 	bl	8007a18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006038:	2b00      	cmp	r3, #0
 800603a:	d106      	bne.n	800604a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	3324      	adds	r3, #36	@ 0x24
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fc5b 	bl	8006900 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800604a:	6978      	ldr	r0, [r7, #20]
 800604c:	f7ff fefc 	bl	8005e48 <prvUnlockQueue>
	}
 8006050:	bf00      	nop
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08e      	sub	sp, #56	@ 0x38
 800605c:	af04      	add	r7, sp, #16
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10d      	bne.n	8006088 <xTaskCreateStatic+0x30>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006070:	b672      	cpsid	i
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	b662      	cpsie	i
 8006080:	623b      	str	r3, [r7, #32]
}
 8006082:	bf00      	nop
 8006084:	bf00      	nop
 8006086:	e7fd      	b.n	8006084 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10d      	bne.n	80060aa <xTaskCreateStatic+0x52>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	b672      	cpsid	i
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	b662      	cpsie	i
 80060a2:	61fb      	str	r3, [r7, #28]
}
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060aa:	235c      	movs	r3, #92	@ 0x5c
 80060ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80060b2:	d00d      	beq.n	80060d0 <xTaskCreateStatic+0x78>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	b672      	cpsid	i
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	b662      	cpsie	i
 80060c8:	61bb      	str	r3, [r7, #24]
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	e7fd      	b.n	80060cc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01e      	beq.n	8006116 <xTaskCreateStatic+0xbe>
 80060d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01b      	beq.n	8006116 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80060f0:	2300      	movs	r3, #0
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	9302      	str	r3, [sp, #8]
 80060f8:	f107 0314 	add.w	r3, r7, #20
 80060fc:	9301      	str	r3, [sp, #4]
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f850 	bl	80061ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800610e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006110:	f000 f8e0 	bl	80062d4 <prvAddNewTaskToReadyList>
 8006114:	e001      	b.n	800611a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800611a:	697b      	ldr	r3, [r7, #20]
	}
 800611c:	4618      	mov	r0, r3
 800611e:	3728      	adds	r7, #40	@ 0x28
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006124:	b580      	push	{r7, lr}
 8006126:	b08c      	sub	sp, #48	@ 0x30
 8006128:	af04      	add	r7, sp, #16
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4618      	mov	r0, r3
 800613a:	f001 fd65 	bl	8007c08 <pvPortMalloc>
 800613e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00e      	beq.n	8006164 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006146:	205c      	movs	r0, #92	@ 0x5c
 8006148:	f001 fd5e 	bl	8007c08 <pvPortMalloc>
 800614c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	631a      	str	r2, [r3, #48]	@ 0x30
 800615a:	e005      	b.n	8006168 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800615c:	6978      	ldr	r0, [r7, #20]
 800615e:	f001 fe21 	bl	8007da4 <vPortFree>
 8006162:	e001      	b.n	8006168 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d017      	beq.n	800619e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	2300      	movs	r3, #0
 800617a:	9303      	str	r3, [sp, #12]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	9302      	str	r3, [sp, #8]
 8006180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006182:	9301      	str	r3, [sp, #4]
 8006184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 f80e 	bl	80061ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006192:	69f8      	ldr	r0, [r7, #28]
 8006194:	f000 f89e 	bl	80062d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006198:	2301      	movs	r3, #1
 800619a:	61bb      	str	r3, [r7, #24]
 800619c:	e002      	b.n	80061a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800619e:	f04f 33ff 	mov.w	r3, #4294967295
 80061a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061a4:	69bb      	ldr	r3, [r7, #24]
	}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	461a      	mov	r2, r3
 80061c6:	21a5      	movs	r1, #165	@ 0xa5
 80061c8:	f001 ff08 	bl	8007fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061d0:	6879      	ldr	r1, [r7, #4]
 80061d2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80061d6:	440b      	add	r3, r1
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f023 0307 	bic.w	r3, r3, #7
 80061e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00d      	beq.n	800620c <prvInitialiseNewTask+0x5e>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	b672      	cpsid	i
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	b662      	cpsie	i
 8006204:	617b      	str	r3, [r7, #20]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01f      	beq.n	8006252 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	e012      	b.n	800623e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	4413      	add	r3, r2
 800621e:	7819      	ldrb	r1, [r3, #0]
 8006220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	3334      	adds	r3, #52	@ 0x34
 8006228:	460a      	mov	r2, r1
 800622a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d006      	beq.n	8006246 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d9e9      	bls.n	8006218 <prvInitialiseNewTask+0x6a>
 8006244:	e000      	b.n	8006248 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006250:	e003      	b.n	800625a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800625a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625c:	2b37      	cmp	r3, #55	@ 0x37
 800625e:	d901      	bls.n	8006264 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006260:	2337      	movs	r3, #55	@ 0x37
 8006262:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006268:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800626a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800626e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	2200      	movs	r2, #0
 8006274:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	3304      	adds	r3, #4
 800627a:	4618      	mov	r0, r3
 800627c:	f7fe fde4 	bl	8004e48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006282:	3318      	adds	r3, #24
 8006284:	4618      	mov	r0, r3
 8006286:	f7fe fddf 	bl	8004e48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a2:	2200      	movs	r2, #0
 80062a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	68f9      	ldr	r1, [r7, #12]
 80062b2:	69b8      	ldr	r0, [r7, #24]
 80062b4:	f001 fa6c 	bl	8007790 <pxPortInitialiseStack>
 80062b8:	4602      	mov	r2, r0
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ca:	bf00      	nop
 80062cc:	3720      	adds	r7, #32
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
	...

080062d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062dc:	f001 fb66 	bl	80079ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006398 <prvAddNewTaskToReadyList+0xc4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3301      	adds	r3, #1
 80062e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006398 <prvAddNewTaskToReadyList+0xc4>)
 80062e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062ea:	4b2c      	ldr	r3, [pc, #176]	@ (800639c <prvAddNewTaskToReadyList+0xc8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062f2:	4a2a      	ldr	r2, [pc, #168]	@ (800639c <prvAddNewTaskToReadyList+0xc8>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062f8:	4b27      	ldr	r3, [pc, #156]	@ (8006398 <prvAddNewTaskToReadyList+0xc4>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d110      	bne.n	8006322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006300:	f000 fc34 	bl	8006b6c <prvInitialiseTaskLists>
 8006304:	e00d      	b.n	8006322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006306:	4b26      	ldr	r3, [pc, #152]	@ (80063a0 <prvAddNewTaskToReadyList+0xcc>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800630e:	4b23      	ldr	r3, [pc, #140]	@ (800639c <prvAddNewTaskToReadyList+0xc8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006318:	429a      	cmp	r2, r3
 800631a:	d802      	bhi.n	8006322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800631c:	4a1f      	ldr	r2, [pc, #124]	@ (800639c <prvAddNewTaskToReadyList+0xc8>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006322:	4b20      	ldr	r3, [pc, #128]	@ (80063a4 <prvAddNewTaskToReadyList+0xd0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	4a1e      	ldr	r2, [pc, #120]	@ (80063a4 <prvAddNewTaskToReadyList+0xd0>)
 800632a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800632c:	4b1d      	ldr	r3, [pc, #116]	@ (80063a4 <prvAddNewTaskToReadyList+0xd0>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006338:	4b1b      	ldr	r3, [pc, #108]	@ (80063a8 <prvAddNewTaskToReadyList+0xd4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	429a      	cmp	r2, r3
 800633e:	d903      	bls.n	8006348 <prvAddNewTaskToReadyList+0x74>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	4a18      	ldr	r2, [pc, #96]	@ (80063a8 <prvAddNewTaskToReadyList+0xd4>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634c:	4613      	mov	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <prvAddNewTaskToReadyList+0xd8>)
 8006356:	441a      	add	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7fe fd7f 	bl	8004e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006364:	f001 fb58 	bl	8007a18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006368:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <prvAddNewTaskToReadyList+0xcc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00e      	beq.n	800638e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006370:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <prvAddNewTaskToReadyList+0xc8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637a:	429a      	cmp	r2, r3
 800637c:	d207      	bcs.n	800638e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800637e:	4b0c      	ldr	r3, [pc, #48]	@ (80063b0 <prvAddNewTaskToReadyList+0xdc>)
 8006380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	200013f4 	.word	0x200013f4
 800639c:	20000f20 	.word	0x20000f20
 80063a0:	20001400 	.word	0x20001400
 80063a4:	20001410 	.word	0x20001410
 80063a8:	200013fc 	.word	0x200013fc
 80063ac:	20000f24 	.word	0x20000f24
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01a      	beq.n	80063fc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063c6:	4b15      	ldr	r3, [pc, #84]	@ (800641c <vTaskDelay+0x68>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00d      	beq.n	80063ea <vTaskDelay+0x36>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	b672      	cpsid	i
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	b662      	cpsie	i
 80063e2:	60bb      	str	r3, [r7, #8]
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	e7fd      	b.n	80063e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80063ea:	f000 f887 	bl	80064fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063ee:	2100      	movs	r1, #0
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fe11 	bl	8007018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063f6:	f000 f88f 	bl	8006518 <xTaskResumeAll>
 80063fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d107      	bne.n	8006412 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006402:	4b07      	ldr	r3, [pc, #28]	@ (8006420 <vTaskDelay+0x6c>)
 8006404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	2000141c 	.word	0x2000141c
 8006420:	e000ed04 	.word	0xe000ed04

08006424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	@ 0x28
 8006428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006432:	463a      	mov	r2, r7
 8006434:	1d39      	adds	r1, r7, #4
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe fcb0 	bl	8004da0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	9202      	str	r2, [sp, #8]
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	2300      	movs	r3, #0
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	2300      	movs	r3, #0
 8006450:	460a      	mov	r2, r1
 8006452:	4924      	ldr	r1, [pc, #144]	@ (80064e4 <vTaskStartScheduler+0xc0>)
 8006454:	4824      	ldr	r0, [pc, #144]	@ (80064e8 <vTaskStartScheduler+0xc4>)
 8006456:	f7ff fdff 	bl	8006058 <xTaskCreateStatic>
 800645a:	4603      	mov	r3, r0
 800645c:	4a23      	ldr	r2, [pc, #140]	@ (80064ec <vTaskStartScheduler+0xc8>)
 800645e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006460:	4b22      	ldr	r3, [pc, #136]	@ (80064ec <vTaskStartScheduler+0xc8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006468:	2301      	movs	r3, #1
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e001      	b.n	8006472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006478:	f000 fe22 	bl	80070c0 <xTimerCreateTimerTask>
 800647c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d118      	bne.n	80064b6 <vTaskStartScheduler+0x92>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	b672      	cpsid	i
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	b662      	cpsie	i
 8006498:	613b      	str	r3, [r7, #16]
}
 800649a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800649c:	4b14      	ldr	r3, [pc, #80]	@ (80064f0 <vTaskStartScheduler+0xcc>)
 800649e:	f04f 32ff 	mov.w	r2, #4294967295
 80064a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064a4:	4b13      	ldr	r3, [pc, #76]	@ (80064f4 <vTaskStartScheduler+0xd0>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064aa:	4b13      	ldr	r3, [pc, #76]	@ (80064f8 <vTaskStartScheduler+0xd4>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064b0:	f001 f9fe 	bl	80078b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064b4:	e011      	b.n	80064da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d10d      	bne.n	80064da <vTaskStartScheduler+0xb6>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	b672      	cpsid	i
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	b662      	cpsie	i
 80064d2:	60fb      	str	r3, [r7, #12]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <vTaskStartScheduler+0xb2>
}
 80064da:	bf00      	nop
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	080080dc 	.word	0x080080dc
 80064e8:	08006b3d 	.word	0x08006b3d
 80064ec:	20001418 	.word	0x20001418
 80064f0:	20001414 	.word	0x20001414
 80064f4:	20001400 	.word	0x20001400
 80064f8:	200013f8 	.word	0x200013f8

080064fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006500:	4b04      	ldr	r3, [pc, #16]	@ (8006514 <vTaskSuspendAll+0x18>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	4a03      	ldr	r2, [pc, #12]	@ (8006514 <vTaskSuspendAll+0x18>)
 8006508:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800650a:	bf00      	nop
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	2000141c 	.word	0x2000141c

08006518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800651e:	2300      	movs	r3, #0
 8006520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006526:	4b43      	ldr	r3, [pc, #268]	@ (8006634 <xTaskResumeAll+0x11c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10d      	bne.n	800654a <xTaskResumeAll+0x32>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	b672      	cpsid	i
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	b662      	cpsie	i
 8006542:	603b      	str	r3, [r7, #0]
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	e7fd      	b.n	8006546 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800654a:	f001 fa2f 	bl	80079ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800654e:	4b39      	ldr	r3, [pc, #228]	@ (8006634 <xTaskResumeAll+0x11c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3b01      	subs	r3, #1
 8006554:	4a37      	ldr	r2, [pc, #220]	@ (8006634 <xTaskResumeAll+0x11c>)
 8006556:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006558:	4b36      	ldr	r3, [pc, #216]	@ (8006634 <xTaskResumeAll+0x11c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d162      	bne.n	8006626 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006560:	4b35      	ldr	r3, [pc, #212]	@ (8006638 <xTaskResumeAll+0x120>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05e      	beq.n	8006626 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006568:	e02f      	b.n	80065ca <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656a:	4b34      	ldr	r3, [pc, #208]	@ (800663c <xTaskResumeAll+0x124>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3318      	adds	r3, #24
 8006576:	4618      	mov	r0, r3
 8006578:	f7fe fcd0 	bl	8004f1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3304      	adds	r3, #4
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fccb 	bl	8004f1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800658a:	4b2d      	ldr	r3, [pc, #180]	@ (8006640 <xTaskResumeAll+0x128>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d903      	bls.n	800659a <xTaskResumeAll+0x82>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006596:	4a2a      	ldr	r2, [pc, #168]	@ (8006640 <xTaskResumeAll+0x128>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4a27      	ldr	r2, [pc, #156]	@ (8006644 <xTaskResumeAll+0x12c>)
 80065a8:	441a      	add	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f7fe fc56 	bl	8004e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ba:	4b23      	ldr	r3, [pc, #140]	@ (8006648 <xTaskResumeAll+0x130>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d302      	bcc.n	80065ca <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80065c4:	4b21      	ldr	r3, [pc, #132]	@ (800664c <xTaskResumeAll+0x134>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065ca:	4b1c      	ldr	r3, [pc, #112]	@ (800663c <xTaskResumeAll+0x124>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1cb      	bne.n	800656a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065d8:	f000 fb68 	bl	8006cac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006650 <xTaskResumeAll+0x138>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d010      	beq.n	800660a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065e8:	f000 f846 	bl	8006678 <xTaskIncrementTick>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80065f2:	4b16      	ldr	r3, [pc, #88]	@ (800664c <xTaskResumeAll+0x134>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1f1      	bne.n	80065e8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006604:	4b12      	ldr	r3, [pc, #72]	@ (8006650 <xTaskResumeAll+0x138>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800660a:	4b10      	ldr	r3, [pc, #64]	@ (800664c <xTaskResumeAll+0x134>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006612:	2301      	movs	r3, #1
 8006614:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006616:	4b0f      	ldr	r3, [pc, #60]	@ (8006654 <xTaskResumeAll+0x13c>)
 8006618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006626:	f001 f9f7 	bl	8007a18 <vPortExitCritical>

	return xAlreadyYielded;
 800662a:	68bb      	ldr	r3, [r7, #8]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	2000141c 	.word	0x2000141c
 8006638:	200013f4 	.word	0x200013f4
 800663c:	200013b4 	.word	0x200013b4
 8006640:	200013fc 	.word	0x200013fc
 8006644:	20000f24 	.word	0x20000f24
 8006648:	20000f20 	.word	0x20000f20
 800664c:	20001408 	.word	0x20001408
 8006650:	20001404 	.word	0x20001404
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800665e:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <xTaskGetTickCount+0x1c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006664:	687b      	ldr	r3, [r7, #4]
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	200013f8 	.word	0x200013f8

08006678 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006682:	4b50      	ldr	r3, [pc, #320]	@ (80067c4 <xTaskIncrementTick+0x14c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	f040 808c 	bne.w	80067a4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800668c:	4b4e      	ldr	r3, [pc, #312]	@ (80067c8 <xTaskIncrementTick+0x150>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006694:	4a4c      	ldr	r2, [pc, #304]	@ (80067c8 <xTaskIncrementTick+0x150>)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d123      	bne.n	80066e8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80066a0:	4b4a      	ldr	r3, [pc, #296]	@ (80067cc <xTaskIncrementTick+0x154>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00d      	beq.n	80066c6 <xTaskIncrementTick+0x4e>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	b672      	cpsid	i
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	b662      	cpsie	i
 80066be:	603b      	str	r3, [r7, #0]
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	e7fd      	b.n	80066c2 <xTaskIncrementTick+0x4a>
 80066c6:	4b41      	ldr	r3, [pc, #260]	@ (80067cc <xTaskIncrementTick+0x154>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	4b40      	ldr	r3, [pc, #256]	@ (80067d0 <xTaskIncrementTick+0x158>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a3e      	ldr	r2, [pc, #248]	@ (80067cc <xTaskIncrementTick+0x154>)
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	4a3e      	ldr	r2, [pc, #248]	@ (80067d0 <xTaskIncrementTick+0x158>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b3e      	ldr	r3, [pc, #248]	@ (80067d4 <xTaskIncrementTick+0x15c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3301      	adds	r3, #1
 80066e0:	4a3c      	ldr	r2, [pc, #240]	@ (80067d4 <xTaskIncrementTick+0x15c>)
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	f000 fae2 	bl	8006cac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066e8:	4b3b      	ldr	r3, [pc, #236]	@ (80067d8 <xTaskIncrementTick+0x160>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d349      	bcc.n	8006786 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f2:	4b36      	ldr	r3, [pc, #216]	@ (80067cc <xTaskIncrementTick+0x154>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fc:	4b36      	ldr	r3, [pc, #216]	@ (80067d8 <xTaskIncrementTick+0x160>)
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	601a      	str	r2, [r3, #0]
					break;
 8006704:	e03f      	b.n	8006786 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006706:	4b31      	ldr	r3, [pc, #196]	@ (80067cc <xTaskIncrementTick+0x154>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	429a      	cmp	r2, r3
 800671c:	d203      	bcs.n	8006726 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800671e:	4a2e      	ldr	r2, [pc, #184]	@ (80067d8 <xTaskIncrementTick+0x160>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006724:	e02f      	b.n	8006786 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	3304      	adds	r3, #4
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fbf6 	bl	8004f1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	3318      	adds	r3, #24
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe fbed 	bl	8004f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006746:	4b25      	ldr	r3, [pc, #148]	@ (80067dc <xTaskIncrementTick+0x164>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d903      	bls.n	8006756 <xTaskIncrementTick+0xde>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006752:	4a22      	ldr	r2, [pc, #136]	@ (80067dc <xTaskIncrementTick+0x164>)
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4a1f      	ldr	r2, [pc, #124]	@ (80067e0 <xTaskIncrementTick+0x168>)
 8006764:	441a      	add	r2, r3
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f7fe fb78 	bl	8004e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006776:	4b1b      	ldr	r3, [pc, #108]	@ (80067e4 <xTaskIncrementTick+0x16c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677c:	429a      	cmp	r2, r3
 800677e:	d3b8      	bcc.n	80066f2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006780:	2301      	movs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006784:	e7b5      	b.n	80066f2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006786:	4b17      	ldr	r3, [pc, #92]	@ (80067e4 <xTaskIncrementTick+0x16c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800678c:	4914      	ldr	r1, [pc, #80]	@ (80067e0 <xTaskIncrementTick+0x168>)
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d907      	bls.n	80067ae <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800679e:	2301      	movs	r3, #1
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	e004      	b.n	80067ae <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80067a4:	4b10      	ldr	r3, [pc, #64]	@ (80067e8 <xTaskIncrementTick+0x170>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	4a0f      	ldr	r2, [pc, #60]	@ (80067e8 <xTaskIncrementTick+0x170>)
 80067ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80067ae:	4b0f      	ldr	r3, [pc, #60]	@ (80067ec <xTaskIncrementTick+0x174>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80067b6:	2301      	movs	r3, #1
 80067b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	2000141c 	.word	0x2000141c
 80067c8:	200013f8 	.word	0x200013f8
 80067cc:	200013ac 	.word	0x200013ac
 80067d0:	200013b0 	.word	0x200013b0
 80067d4:	2000140c 	.word	0x2000140c
 80067d8:	20001414 	.word	0x20001414
 80067dc:	200013fc 	.word	0x200013fc
 80067e0:	20000f24 	.word	0x20000f24
 80067e4:	20000f20 	.word	0x20000f20
 80067e8:	20001404 	.word	0x20001404
 80067ec:	20001408 	.word	0x20001408

080067f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067f6:	4b29      	ldr	r3, [pc, #164]	@ (800689c <vTaskSwitchContext+0xac>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067fe:	4b28      	ldr	r3, [pc, #160]	@ (80068a0 <vTaskSwitchContext+0xb0>)
 8006800:	2201      	movs	r2, #1
 8006802:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006804:	e044      	b.n	8006890 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006806:	4b26      	ldr	r3, [pc, #152]	@ (80068a0 <vTaskSwitchContext+0xb0>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680c:	4b25      	ldr	r3, [pc, #148]	@ (80068a4 <vTaskSwitchContext+0xb4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	e013      	b.n	800683c <vTaskSwitchContext+0x4c>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10d      	bne.n	8006836 <vTaskSwitchContext+0x46>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	b672      	cpsid	i
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	b662      	cpsie	i
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <vTaskSwitchContext+0x42>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3b01      	subs	r3, #1
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	491a      	ldr	r1, [pc, #104]	@ (80068a8 <vTaskSwitchContext+0xb8>)
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0e1      	beq.n	8006814 <vTaskSwitchContext+0x24>
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4613      	mov	r3, r2
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4a13      	ldr	r2, [pc, #76]	@ (80068a8 <vTaskSwitchContext+0xb8>)
 800685c:	4413      	add	r3, r2
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	605a      	str	r2, [r3, #4]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	3308      	adds	r3, #8
 8006872:	429a      	cmp	r2, r3
 8006874:	d104      	bne.n	8006880 <vTaskSwitchContext+0x90>
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	4a09      	ldr	r2, [pc, #36]	@ (80068ac <vTaskSwitchContext+0xbc>)
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4a06      	ldr	r2, [pc, #24]	@ (80068a4 <vTaskSwitchContext+0xb4>)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6013      	str	r3, [r2, #0]
}
 8006890:	bf00      	nop
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	2000141c 	.word	0x2000141c
 80068a0:	20001408 	.word	0x20001408
 80068a4:	200013fc 	.word	0x200013fc
 80068a8:	20000f24 	.word	0x20000f24
 80068ac:	20000f20 	.word	0x20000f20

080068b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10d      	bne.n	80068dc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c4:	b672      	cpsid	i
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	b662      	cpsie	i
 80068d4:	60fb      	str	r3, [r7, #12]
}
 80068d6:	bf00      	nop
 80068d8:	bf00      	nop
 80068da:	e7fd      	b.n	80068d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068dc:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <vTaskPlaceOnEventList+0x4c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3318      	adds	r3, #24
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7fe fae0 	bl	8004eaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068ea:	2101      	movs	r1, #1
 80068ec:	6838      	ldr	r0, [r7, #0]
 80068ee:	f000 fb93 	bl	8007018 <prvAddCurrentTaskToDelayedList>
}
 80068f2:	bf00      	nop
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000f20 	.word	0x20000f20

08006900 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006916:	b672      	cpsid	i
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	b662      	cpsie	i
 8006926:	617b      	str	r3, [r7, #20]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800692e:	4b0a      	ldr	r3, [pc, #40]	@ (8006958 <vTaskPlaceOnEventListRestricted+0x58>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3318      	adds	r3, #24
 8006934:	4619      	mov	r1, r3
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7fe fa93 	bl	8004e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006942:	f04f 33ff 	mov.w	r3, #4294967295
 8006946:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	68b8      	ldr	r0, [r7, #8]
 800694c:	f000 fb64 	bl	8007018 <prvAddCurrentTaskToDelayedList>
	}
 8006950:	bf00      	nop
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	20000f20 	.word	0x20000f20

0800695c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10d      	bne.n	800698e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	b672      	cpsid	i
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	b662      	cpsie	i
 8006986:	60fb      	str	r3, [r7, #12]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	3318      	adds	r3, #24
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fac2 	bl	8004f1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006998:	4b1d      	ldr	r3, [pc, #116]	@ (8006a10 <xTaskRemoveFromEventList+0xb4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11d      	bne.n	80069dc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fab9 	bl	8004f1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ae:	4b19      	ldr	r3, [pc, #100]	@ (8006a14 <xTaskRemoveFromEventList+0xb8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d903      	bls.n	80069be <xTaskRemoveFromEventList+0x62>
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	4a16      	ldr	r2, [pc, #88]	@ (8006a14 <xTaskRemoveFromEventList+0xb8>)
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4a13      	ldr	r2, [pc, #76]	@ (8006a18 <xTaskRemoveFromEventList+0xbc>)
 80069cc:	441a      	add	r2, r3
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	3304      	adds	r3, #4
 80069d2:	4619      	mov	r1, r3
 80069d4:	4610      	mov	r0, r2
 80069d6:	f7fe fa44 	bl	8004e62 <vListInsertEnd>
 80069da:	e005      	b.n	80069e8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	3318      	adds	r3, #24
 80069e0:	4619      	mov	r1, r3
 80069e2:	480e      	ldr	r0, [pc, #56]	@ (8006a1c <xTaskRemoveFromEventList+0xc0>)
 80069e4:	f7fe fa3d 	bl	8004e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006a20 <xTaskRemoveFromEventList+0xc4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d905      	bls.n	8006a02 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80069f6:	2301      	movs	r3, #1
 80069f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80069fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006a24 <xTaskRemoveFromEventList+0xc8>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e001      	b.n	8006a06 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a06:	697b      	ldr	r3, [r7, #20]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	2000141c 	.word	0x2000141c
 8006a14:	200013fc 	.word	0x200013fc
 8006a18:	20000f24 	.word	0x20000f24
 8006a1c:	200013b4 	.word	0x200013b4
 8006a20:	20000f20 	.word	0x20000f20
 8006a24:	20001408 	.word	0x20001408

08006a28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a30:	4b06      	ldr	r3, [pc, #24]	@ (8006a4c <vTaskInternalSetTimeOutState+0x24>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a38:	4b05      	ldr	r3, [pc, #20]	@ (8006a50 <vTaskInternalSetTimeOutState+0x28>)
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	605a      	str	r2, [r3, #4]
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	2000140c 	.word	0x2000140c
 8006a50:	200013f8 	.word	0x200013f8

08006a54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10d      	bne.n	8006a80 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a68:	b672      	cpsid	i
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	b662      	cpsie	i
 8006a78:	613b      	str	r3, [r7, #16]
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	e7fd      	b.n	8006a7c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8a:	b672      	cpsid	i
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	b662      	cpsie	i
 8006a9a:	60fb      	str	r3, [r7, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006aa2:	f000 ff83 	bl	80079ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8006b1c <xTaskCheckForTimeOut+0xc8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d102      	bne.n	8006ac6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	e023      	b.n	8006b0e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b15      	ldr	r3, [pc, #84]	@ (8006b20 <xTaskCheckForTimeOut+0xcc>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d007      	beq.n	8006ae2 <xTaskCheckForTimeOut+0x8e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d302      	bcc.n	8006ae2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006adc:	2301      	movs	r3, #1
 8006ade:	61fb      	str	r3, [r7, #28]
 8006ae0:	e015      	b.n	8006b0e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d20b      	bcs.n	8006b04 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff ff95 	bl	8006a28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e004      	b.n	8006b0e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b0e:	f000 ff83 	bl	8007a18 <vPortExitCritical>

	return xReturn;
 8006b12:	69fb      	ldr	r3, [r7, #28]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	200013f8 	.word	0x200013f8
 8006b20:	2000140c 	.word	0x2000140c

08006b24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b28:	4b03      	ldr	r3, [pc, #12]	@ (8006b38 <vTaskMissedYield+0x14>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	20001408 	.word	0x20001408

08006b3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b44:	f000 f852 	bl	8006bec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b48:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <prvIdleTask+0x28>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d9f9      	bls.n	8006b44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <prvIdleTask+0x2c>)
 8006b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b60:	e7f0      	b.n	8006b44 <prvIdleTask+0x8>
 8006b62:	bf00      	nop
 8006b64:	20000f24 	.word	0x20000f24
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
 8006b76:	e00c      	b.n	8006b92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4a12      	ldr	r2, [pc, #72]	@ (8006bcc <prvInitialiseTaskLists+0x60>)
 8006b84:	4413      	add	r3, r2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe f93e 	bl	8004e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	607b      	str	r3, [r7, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b37      	cmp	r3, #55	@ 0x37
 8006b96:	d9ef      	bls.n	8006b78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b98:	480d      	ldr	r0, [pc, #52]	@ (8006bd0 <prvInitialiseTaskLists+0x64>)
 8006b9a:	f7fe f935 	bl	8004e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b9e:	480d      	ldr	r0, [pc, #52]	@ (8006bd4 <prvInitialiseTaskLists+0x68>)
 8006ba0:	f7fe f932 	bl	8004e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ba4:	480c      	ldr	r0, [pc, #48]	@ (8006bd8 <prvInitialiseTaskLists+0x6c>)
 8006ba6:	f7fe f92f 	bl	8004e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006baa:	480c      	ldr	r0, [pc, #48]	@ (8006bdc <prvInitialiseTaskLists+0x70>)
 8006bac:	f7fe f92c 	bl	8004e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bb0:	480b      	ldr	r0, [pc, #44]	@ (8006be0 <prvInitialiseTaskLists+0x74>)
 8006bb2:	f7fe f929 	bl	8004e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8006be4 <prvInitialiseTaskLists+0x78>)
 8006bb8:	4a05      	ldr	r2, [pc, #20]	@ (8006bd0 <prvInitialiseTaskLists+0x64>)
 8006bba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <prvInitialiseTaskLists+0x7c>)
 8006bbe:	4a05      	ldr	r2, [pc, #20]	@ (8006bd4 <prvInitialiseTaskLists+0x68>)
 8006bc0:	601a      	str	r2, [r3, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000f24 	.word	0x20000f24
 8006bd0:	20001384 	.word	0x20001384
 8006bd4:	20001398 	.word	0x20001398
 8006bd8:	200013b4 	.word	0x200013b4
 8006bdc:	200013c8 	.word	0x200013c8
 8006be0:	200013e0 	.word	0x200013e0
 8006be4:	200013ac 	.word	0x200013ac
 8006be8:	200013b0 	.word	0x200013b0

08006bec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bf2:	e019      	b.n	8006c28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006bf4:	f000 feda 	bl	80079ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bf8:	4b10      	ldr	r3, [pc, #64]	@ (8006c3c <prvCheckTasksWaitingTermination+0x50>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe f989 	bl	8004f1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <prvCheckTasksWaitingTermination+0x54>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	4a0b      	ldr	r2, [pc, #44]	@ (8006c40 <prvCheckTasksWaitingTermination+0x54>)
 8006c12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c14:	4b0b      	ldr	r3, [pc, #44]	@ (8006c44 <prvCheckTasksWaitingTermination+0x58>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c44 <prvCheckTasksWaitingTermination+0x58>)
 8006c1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c1e:	f000 fefb 	bl	8007a18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f810 	bl	8006c48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c28:	4b06      	ldr	r3, [pc, #24]	@ (8006c44 <prvCheckTasksWaitingTermination+0x58>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e1      	bne.n	8006bf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	200013c8 	.word	0x200013c8
 8006c40:	200013f4 	.word	0x200013f4
 8006c44:	200013dc 	.word	0x200013dc

08006c48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d108      	bne.n	8006c6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 f8a0 	bl	8007da4 <vPortFree>
				vPortFree( pxTCB );
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 f89d 	bl	8007da4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c6a:	e01b      	b.n	8006ca4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d103      	bne.n	8006c7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 f894 	bl	8007da4 <vPortFree>
	}
 8006c7c:	e012      	b.n	8006ca4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d00d      	beq.n	8006ca4 <prvDeleteTCB+0x5c>
	__asm volatile
 8006c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8c:	b672      	cpsid	i
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	b662      	cpsie	i
 8006c9c:	60fb      	str	r3, [r7, #12]
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	e7fd      	b.n	8006ca0 <prvDeleteTCB+0x58>
	}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce4 <prvResetNextTaskUnblockTime+0x38>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <prvResetNextTaskUnblockTime+0x3c>)
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cc4:	e008      	b.n	8006cd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cc6:	4b07      	ldr	r3, [pc, #28]	@ (8006ce4 <prvResetNextTaskUnblockTime+0x38>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	4a04      	ldr	r2, [pc, #16]	@ (8006ce8 <prvResetNextTaskUnblockTime+0x3c>)
 8006cd6:	6013      	str	r3, [r2, #0]
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	200013ac 	.word	0x200013ac
 8006ce8:	20001414 	.word	0x20001414

08006cec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8006d20 <xTaskGetSchedulerState+0x34>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d102      	bne.n	8006d00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	607b      	str	r3, [r7, #4]
 8006cfe:	e008      	b.n	8006d12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d00:	4b08      	ldr	r3, [pc, #32]	@ (8006d24 <xTaskGetSchedulerState+0x38>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	e001      	b.n	8006d12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d12:	687b      	ldr	r3, [r7, #4]
	}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	20001400 	.word	0x20001400
 8006d24:	2000141c 	.word	0x2000141c

08006d28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d051      	beq.n	8006de2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d42:	4b2a      	ldr	r3, [pc, #168]	@ (8006dec <xTaskPriorityInherit+0xc4>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d241      	bcs.n	8006dd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	db06      	blt.n	8006d62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d54:	4b25      	ldr	r3, [pc, #148]	@ (8006dec <xTaskPriorityInherit+0xc4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6959      	ldr	r1, [r3, #20]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4a1f      	ldr	r2, [pc, #124]	@ (8006df0 <xTaskPriorityInherit+0xc8>)
 8006d74:	4413      	add	r3, r2
 8006d76:	4299      	cmp	r1, r3
 8006d78:	d122      	bne.n	8006dc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe f8cc 	bl	8004f1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d84:	4b19      	ldr	r3, [pc, #100]	@ (8006dec <xTaskPriorityInherit+0xc4>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d92:	4b18      	ldr	r3, [pc, #96]	@ (8006df4 <xTaskPriorityInherit+0xcc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d903      	bls.n	8006da2 <xTaskPriorityInherit+0x7a>
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d9e:	4a15      	ldr	r2, [pc, #84]	@ (8006df4 <xTaskPriorityInherit+0xcc>)
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4a10      	ldr	r2, [pc, #64]	@ (8006df0 <xTaskPriorityInherit+0xc8>)
 8006db0:	441a      	add	r2, r3
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4619      	mov	r1, r3
 8006db8:	4610      	mov	r0, r2
 8006dba:	f7fe f852 	bl	8004e62 <vListInsertEnd>
 8006dbe:	e004      	b.n	8006dca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <xTaskPriorityInherit+0xc4>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
 8006dce:	e008      	b.n	8006de2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006dd4:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <xTaskPriorityInherit+0xc4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d201      	bcs.n	8006de2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006dde:	2301      	movs	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006de2:	68fb      	ldr	r3, [r7, #12]
	}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	20000f20 	.word	0x20000f20
 8006df0:	20000f24 	.word	0x20000f24
 8006df4:	200013fc 	.word	0x200013fc

08006df8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d05c      	beq.n	8006ec8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e0e:	4b31      	ldr	r3, [pc, #196]	@ (8006ed4 <xTaskPriorityDisinherit+0xdc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d00d      	beq.n	8006e34 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1c:	b672      	cpsid	i
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	b662      	cpsie	i
 8006e2c:	60fb      	str	r3, [r7, #12]
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	e7fd      	b.n	8006e30 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10d      	bne.n	8006e58 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	b672      	cpsid	i
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	b662      	cpsie	i
 8006e50:	60bb      	str	r3, [r7, #8]
}
 8006e52:	bf00      	nop
 8006e54:	bf00      	nop
 8006e56:	e7fd      	b.n	8006e54 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e5c:	1e5a      	subs	r2, r3, #1
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d02c      	beq.n	8006ec8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d128      	bne.n	8006ec8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe f84e 	bl	8004f1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e98:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed8 <xTaskPriorityDisinherit+0xe0>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d903      	bls.n	8006ea8 <xTaskPriorityDisinherit+0xb0>
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ed8 <xTaskPriorityDisinherit+0xe0>)
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4a09      	ldr	r2, [pc, #36]	@ (8006edc <xTaskPriorityDisinherit+0xe4>)
 8006eb6:	441a      	add	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f7fd ffcf 	bl	8004e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ec8:	697b      	ldr	r3, [r7, #20]
	}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000f20 	.word	0x20000f20
 8006ed8:	200013fc 	.word	0x200013fc
 8006edc:	20000f24 	.word	0x20000f24

08006ee0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d070      	beq.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10d      	bne.n	8006f1c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	b672      	cpsid	i
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	b662      	cpsie	i
 8006f14:	60fb      	str	r3, [r7, #12]
}
 8006f16:	bf00      	nop
 8006f18:	bf00      	nop
 8006f1a:	e7fd      	b.n	8006f18 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d902      	bls.n	8006f2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	61fb      	str	r3, [r7, #28]
 8006f2a:	e002      	b.n	8006f32 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f30:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d04e      	beq.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d149      	bne.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f46:	4b27      	ldr	r3, [pc, #156]	@ (8006fe4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d10d      	bne.n	8006f6c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	b672      	cpsid	i
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	b662      	cpsie	i
 8006f64:	60bb      	str	r3, [r7, #8]
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	db04      	blt.n	8006f8a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	6959      	ldr	r1, [r3, #20]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4a13      	ldr	r2, [pc, #76]	@ (8006fe8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006f9a:	4413      	add	r3, r2
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	d11c      	bne.n	8006fda <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fd ffb9 	bl	8004f1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fae:	4b0f      	ldr	r3, [pc, #60]	@ (8006fec <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d903      	bls.n	8006fbe <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fba:	4a0c      	ldr	r2, [pc, #48]	@ (8006fec <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4a07      	ldr	r2, [pc, #28]	@ (8006fe8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006fcc:	441a      	add	r2, r3
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f7fd ff44 	bl	8004e62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fda:	bf00      	nop
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000f20 	.word	0x20000f20
 8006fe8:	20000f24 	.word	0x20000f24
 8006fec:	200013fc 	.word	0x200013fc

08006ff0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ff4:	4b07      	ldr	r3, [pc, #28]	@ (8007014 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ffc:	4b05      	ldr	r3, [pc, #20]	@ (8007014 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007002:	3201      	adds	r2, #1
 8007004:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007006:	4b03      	ldr	r3, [pc, #12]	@ (8007014 <pvTaskIncrementMutexHeldCount+0x24>)
 8007008:	681b      	ldr	r3, [r3, #0]
	}
 800700a:	4618      	mov	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	20000f20 	.word	0x20000f20

08007018 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007022:	4b21      	ldr	r3, [pc, #132]	@ (80070a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007028:	4b20      	ldr	r3, [pc, #128]	@ (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fd ff74 	bl	8004f1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703a:	d10a      	bne.n	8007052 <prvAddCurrentTaskToDelayedList+0x3a>
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007042:	4b1a      	ldr	r3, [pc, #104]	@ (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4819      	ldr	r0, [pc, #100]	@ (80070b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800704c:	f7fd ff09 	bl	8004e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007050:	e026      	b.n	80070a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800705a:	4b14      	ldr	r3, [pc, #80]	@ (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	429a      	cmp	r2, r3
 8007068:	d209      	bcs.n	800707e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800706a:	4b12      	ldr	r3, [pc, #72]	@ (80070b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	4b0f      	ldr	r3, [pc, #60]	@ (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3304      	adds	r3, #4
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f7fd ff17 	bl	8004eaa <vListInsert>
}
 800707c:	e010      	b.n	80070a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800707e:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	4b0a      	ldr	r3, [pc, #40]	@ (80070ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	3304      	adds	r3, #4
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f7fd ff0d 	bl	8004eaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007090:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	d202      	bcs.n	80070a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800709a:	4a08      	ldr	r2, [pc, #32]	@ (80070bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	bf00      	nop
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	200013f8 	.word	0x200013f8
 80070ac:	20000f20 	.word	0x20000f20
 80070b0:	200013e0 	.word	0x200013e0
 80070b4:	200013b0 	.word	0x200013b0
 80070b8:	200013ac 	.word	0x200013ac
 80070bc:	20001414 	.word	0x20001414

080070c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	@ 0x28
 80070c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070ca:	f000 fb21 	bl	8007710 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007148 <xTimerCreateTimerTask+0x88>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d021      	beq.n	800711a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070da:	2300      	movs	r3, #0
 80070dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80070de:	1d3a      	adds	r2, r7, #4
 80070e0:	f107 0108 	add.w	r1, r7, #8
 80070e4:	f107 030c 	add.w	r3, r7, #12
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fd fe73 	bl	8004dd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	9202      	str	r2, [sp, #8]
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	2302      	movs	r3, #2
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	2300      	movs	r3, #0
 80070fe:	460a      	mov	r2, r1
 8007100:	4912      	ldr	r1, [pc, #72]	@ (800714c <xTimerCreateTimerTask+0x8c>)
 8007102:	4813      	ldr	r0, [pc, #76]	@ (8007150 <xTimerCreateTimerTask+0x90>)
 8007104:	f7fe ffa8 	bl	8006058 <xTaskCreateStatic>
 8007108:	4603      	mov	r3, r0
 800710a:	4a12      	ldr	r2, [pc, #72]	@ (8007154 <xTimerCreateTimerTask+0x94>)
 800710c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800710e:	4b11      	ldr	r3, [pc, #68]	@ (8007154 <xTimerCreateTimerTask+0x94>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007116:	2301      	movs	r3, #1
 8007118:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10d      	bne.n	800713c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	b672      	cpsid	i
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	b662      	cpsie	i
 8007134:	613b      	str	r3, [r7, #16]
}
 8007136:	bf00      	nop
 8007138:	bf00      	nop
 800713a:	e7fd      	b.n	8007138 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800713c:	697b      	ldr	r3, [r7, #20]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20001450 	.word	0x20001450
 800714c:	080080e4 	.word	0x080080e4
 8007150:	08007299 	.word	0x08007299
 8007154:	20001454 	.word	0x20001454

08007158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	@ 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007166:	2300      	movs	r3, #0
 8007168:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10d      	bne.n	800718c <xTimerGenericCommand+0x34>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007174:	b672      	cpsid	i
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	b662      	cpsie	i
 8007184:	623b      	str	r3, [r7, #32]
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800718c:	4b19      	ldr	r3, [pc, #100]	@ (80071f4 <xTimerGenericCommand+0x9c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d02a      	beq.n	80071ea <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b05      	cmp	r3, #5
 80071a4:	dc18      	bgt.n	80071d8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071a6:	f7ff fda1 	bl	8006cec <xTaskGetSchedulerState>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d109      	bne.n	80071c4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071b0:	4b10      	ldr	r3, [pc, #64]	@ (80071f4 <xTimerGenericCommand+0x9c>)
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	f107 0110 	add.w	r1, r7, #16
 80071b8:	2300      	movs	r3, #0
 80071ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071bc:	f7fe f8a8 	bl	8005310 <xQueueGenericSend>
 80071c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80071c2:	e012      	b.n	80071ea <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071c4:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <xTimerGenericCommand+0x9c>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	f107 0110 	add.w	r1, r7, #16
 80071cc:	2300      	movs	r3, #0
 80071ce:	2200      	movs	r2, #0
 80071d0:	f7fe f89e 	bl	8005310 <xQueueGenericSend>
 80071d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80071d6:	e008      	b.n	80071ea <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071d8:	4b06      	ldr	r3, [pc, #24]	@ (80071f4 <xTimerGenericCommand+0x9c>)
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	f107 0110 	add.w	r1, r7, #16
 80071e0:	2300      	movs	r3, #0
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	f7fe f99e 	bl	8005524 <xQueueGenericSendFromISR>
 80071e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3728      	adds	r7, #40	@ 0x28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20001450 	.word	0x20001450

080071f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007202:	4b24      	ldr	r3, [pc, #144]	@ (8007294 <prvProcessExpiredTimer+0x9c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	3304      	adds	r3, #4
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd fe83 	bl	8004f1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d025      	beq.n	8007270 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	699a      	ldr	r2, [r3, #24]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	18d1      	adds	r1, r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	6978      	ldr	r0, [r7, #20]
 8007232:	f000 f8d7 	bl	80073e4 <prvInsertTimerInActiveList>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d022      	beq.n	8007282 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800723c:	2300      	movs	r3, #0
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	2300      	movs	r3, #0
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	2100      	movs	r1, #0
 8007246:	6978      	ldr	r0, [r7, #20]
 8007248:	f7ff ff86 	bl	8007158 <xTimerGenericCommand>
 800724c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d116      	bne.n	8007282 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007258:	b672      	cpsid	i
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	b662      	cpsie	i
 8007268:	60fb      	str	r3, [r7, #12]
}
 800726a:	bf00      	nop
 800726c:	bf00      	nop
 800726e:	e7fd      	b.n	800726c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007276:	f023 0301 	bic.w	r3, r3, #1
 800727a:	b2da      	uxtb	r2, r3
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	6978      	ldr	r0, [r7, #20]
 8007288:	4798      	blx	r3
}
 800728a:	bf00      	nop
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	20001448 	.word	0x20001448

08007298 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072a0:	f107 0308 	add.w	r3, r7, #8
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 f859 	bl	800735c <prvGetNextExpireTime>
 80072aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	4619      	mov	r1, r3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f805 	bl	80072c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072b6:	f000 f8d7 	bl	8007468 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072ba:	bf00      	nop
 80072bc:	e7f0      	b.n	80072a0 <prvTimerTask+0x8>
	...

080072c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072ca:	f7ff f917 	bl	80064fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072ce:	f107 0308 	add.w	r3, r7, #8
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f866 	bl	80073a4 <prvSampleTimeNow>
 80072d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d130      	bne.n	8007342 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <prvProcessTimerOrBlockTask+0x3c>
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d806      	bhi.n	80072fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80072ee:	f7ff f913 	bl	8006518 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80072f2:	68f9      	ldr	r1, [r7, #12]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ff7f 	bl	80071f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80072fa:	e024      	b.n	8007346 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d008      	beq.n	8007314 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007302:	4b13      	ldr	r3, [pc, #76]	@ (8007350 <prvProcessTimerOrBlockTask+0x90>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <prvProcessTimerOrBlockTask+0x50>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <prvProcessTimerOrBlockTask+0x52>
 8007310:	2300      	movs	r3, #0
 8007312:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007314:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <prvProcessTimerOrBlockTask+0x94>)
 8007316:	6818      	ldr	r0, [r3, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4619      	mov	r1, r3
 8007322:	f7fe fe65 	bl	8005ff0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007326:	f7ff f8f7 	bl	8006518 <xTaskResumeAll>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007330:	4b09      	ldr	r3, [pc, #36]	@ (8007358 <prvProcessTimerOrBlockTask+0x98>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
}
 8007340:	e001      	b.n	8007346 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007342:	f7ff f8e9 	bl	8006518 <xTaskResumeAll>
}
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	2000144c 	.word	0x2000144c
 8007354:	20001450 	.word	0x20001450
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007364:	4b0e      	ldr	r3, [pc, #56]	@ (80073a0 <prvGetNextExpireTime+0x44>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <prvGetNextExpireTime+0x16>
 800736e:	2201      	movs	r2, #1
 8007370:	e000      	b.n	8007374 <prvGetNextExpireTime+0x18>
 8007372:	2200      	movs	r2, #0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007380:	4b07      	ldr	r3, [pc, #28]	@ (80073a0 <prvGetNextExpireTime+0x44>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	e001      	b.n	8007390 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007390:	68fb      	ldr	r3, [r7, #12]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	20001448 	.word	0x20001448

080073a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073ac:	f7ff f954 	bl	8006658 <xTaskGetTickCount>
 80073b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073b2:	4b0b      	ldr	r3, [pc, #44]	@ (80073e0 <prvSampleTimeNow+0x3c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d205      	bcs.n	80073c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073bc:	f000 f940 	bl	8007640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
 80073c6:	e002      	b.n	80073ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073ce:	4a04      	ldr	r2, [pc, #16]	@ (80073e0 <prvSampleTimeNow+0x3c>)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073d4:	68fb      	ldr	r3, [r7, #12]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20001458 	.word	0x20001458

080073e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d812      	bhi.n	8007430 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	429a      	cmp	r2, r3
 8007416:	d302      	bcc.n	800741e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	e01b      	b.n	8007456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800741e:	4b10      	ldr	r3, [pc, #64]	@ (8007460 <prvInsertTimerInActiveList+0x7c>)
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7fd fd3e 	bl	8004eaa <vListInsert>
 800742e:	e012      	b.n	8007456 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d206      	bcs.n	8007446 <prvInsertTimerInActiveList+0x62>
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d302      	bcc.n	8007446 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007440:	2301      	movs	r3, #1
 8007442:	617b      	str	r3, [r7, #20]
 8007444:	e007      	b.n	8007456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007446:	4b07      	ldr	r3, [pc, #28]	@ (8007464 <prvInsertTimerInActiveList+0x80>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fd fd2a 	bl	8004eaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007456:	697b      	ldr	r3, [r7, #20]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3718      	adds	r7, #24
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	2000144c 	.word	0x2000144c
 8007464:	20001448 	.word	0x20001448

08007468 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08e      	sub	sp, #56	@ 0x38
 800746c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800746e:	e0d4      	b.n	800761a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	da1b      	bge.n	80074ae <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007476:	1d3b      	adds	r3, r7, #4
 8007478:	3304      	adds	r3, #4
 800747a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800747c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10d      	bne.n	800749e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	b672      	cpsid	i
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	b662      	cpsie	i
 8007496:	61fb      	str	r3, [r7, #28]
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	e7fd      	b.n	800749a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800749e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074a4:	6850      	ldr	r0, [r2, #4]
 80074a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074a8:	6892      	ldr	r2, [r2, #8]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f2c0 80b2 	blt.w	800761a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c4:	3304      	adds	r3, #4
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd fd28 	bl	8004f1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074cc:	463b      	mov	r3, r7
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff ff68 	bl	80073a4 <prvSampleTimeNow>
 80074d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b09      	cmp	r3, #9
 80074da:	f200 809b 	bhi.w	8007614 <prvProcessReceivedCommands+0x1ac>
 80074de:	a201      	add	r2, pc, #4	@ (adr r2, 80074e4 <prvProcessReceivedCommands+0x7c>)
 80074e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	0800750d 	.word	0x0800750d
 80074ec:	0800750d 	.word	0x0800750d
 80074f0:	08007587 	.word	0x08007587
 80074f4:	0800759b 	.word	0x0800759b
 80074f8:	080075eb 	.word	0x080075eb
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	0800750d 	.word	0x0800750d
 8007504:	08007587 	.word	0x08007587
 8007508:	0800759b 	.word	0x0800759b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	b2da      	uxtb	r2, r3
 8007518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	18d1      	adds	r1, r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800752a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800752c:	f7ff ff5a 	bl	80073e4 <prvInsertTimerInActiveList>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d070      	beq.n	8007618 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d065      	beq.n	8007618 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	441a      	add	r2, r3
 8007554:	2300      	movs	r3, #0
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	2300      	movs	r3, #0
 800755a:	2100      	movs	r1, #0
 800755c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800755e:	f7ff fdfb 	bl	8007158 <xTimerGenericCommand>
 8007562:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d156      	bne.n	8007618 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756e:	b672      	cpsid	i
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	b662      	cpsie	i
 800757e:	61bb      	str	r3, [r7, #24]
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	e7fd      	b.n	8007582 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800758c:	f023 0301 	bic.w	r3, r3, #1
 8007590:	b2da      	uxtb	r2, r3
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007598:	e03f      	b.n	800761a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075a0:	f043 0301 	orr.w	r3, r3, #1
 80075a4:	b2da      	uxtb	r2, r3
 80075a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10d      	bne.n	80075d6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075be:	b672      	cpsid	i
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	b662      	cpsie	i
 80075ce:	617b      	str	r3, [r7, #20]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	699a      	ldr	r2, [r3, #24]
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	18d1      	adds	r1, r2, r3
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e4:	f7ff fefe 	bl	80073e4 <prvInsertTimerInActiveList>
					break;
 80075e8:	e017      	b.n	800761a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d103      	bne.n	8007600 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80075f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075fa:	f000 fbd3 	bl	8007da4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80075fe:	e00c      	b.n	800761a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	b2da      	uxtb	r2, r3
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007612:	e002      	b.n	800761a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007614:	bf00      	nop
 8007616:	e000      	b.n	800761a <prvProcessReceivedCommands+0x1b2>
					break;
 8007618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800761a:	4b08      	ldr	r3, [pc, #32]	@ (800763c <prvProcessReceivedCommands+0x1d4>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	1d39      	adds	r1, r7, #4
 8007620:	2200      	movs	r2, #0
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe f8ba 	bl	800579c <xQueueReceive>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	f47f af20 	bne.w	8007470 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	3730      	adds	r7, #48	@ 0x30
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20001450 	.word	0x20001450

08007640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007646:	e04b      	b.n	80076e0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007648:	4b2f      	ldr	r3, [pc, #188]	@ (8007708 <prvSwitchTimerLists+0xc8>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007652:	4b2d      	ldr	r3, [pc, #180]	@ (8007708 <prvSwitchTimerLists+0xc8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3304      	adds	r3, #4
 8007660:	4618      	mov	r0, r3
 8007662:	f7fd fc5b 	bl	8004f1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	d031      	beq.n	80076e0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4413      	add	r3, r2
 8007684:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	429a      	cmp	r2, r3
 800768c:	d90e      	bls.n	80076ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800769a:	4b1b      	ldr	r3, [pc, #108]	@ (8007708 <prvSwitchTimerLists+0xc8>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3304      	adds	r3, #4
 80076a2:	4619      	mov	r1, r3
 80076a4:	4610      	mov	r0, r2
 80076a6:	f7fd fc00 	bl	8004eaa <vListInsert>
 80076aa:	e019      	b.n	80076e0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076ac:	2300      	movs	r3, #0
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	2300      	movs	r3, #0
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	2100      	movs	r1, #0
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fd4e 	bl	8007158 <xTimerGenericCommand>
 80076bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10d      	bne.n	80076e0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80076c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c8:	b672      	cpsid	i
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	b662      	cpsie	i
 80076d8:	603b      	str	r3, [r7, #0]
}
 80076da:	bf00      	nop
 80076dc:	bf00      	nop
 80076de:	e7fd      	b.n	80076dc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e0:	4b09      	ldr	r3, [pc, #36]	@ (8007708 <prvSwitchTimerLists+0xc8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1ae      	bne.n	8007648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076ea:	4b07      	ldr	r3, [pc, #28]	@ (8007708 <prvSwitchTimerLists+0xc8>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076f0:	4b06      	ldr	r3, [pc, #24]	@ (800770c <prvSwitchTimerLists+0xcc>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a04      	ldr	r2, [pc, #16]	@ (8007708 <prvSwitchTimerLists+0xc8>)
 80076f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076f8:	4a04      	ldr	r2, [pc, #16]	@ (800770c <prvSwitchTimerLists+0xcc>)
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6013      	str	r3, [r2, #0]
}
 80076fe:	bf00      	nop
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20001448 	.word	0x20001448
 800770c:	2000144c 	.word	0x2000144c

08007710 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007716:	f000 f949 	bl	80079ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800771a:	4b15      	ldr	r3, [pc, #84]	@ (8007770 <prvCheckForValidListAndQueue+0x60>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d120      	bne.n	8007764 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007722:	4814      	ldr	r0, [pc, #80]	@ (8007774 <prvCheckForValidListAndQueue+0x64>)
 8007724:	f7fd fb70 	bl	8004e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007728:	4813      	ldr	r0, [pc, #76]	@ (8007778 <prvCheckForValidListAndQueue+0x68>)
 800772a:	f7fd fb6d 	bl	8004e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800772e:	4b13      	ldr	r3, [pc, #76]	@ (800777c <prvCheckForValidListAndQueue+0x6c>)
 8007730:	4a10      	ldr	r2, [pc, #64]	@ (8007774 <prvCheckForValidListAndQueue+0x64>)
 8007732:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007734:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <prvCheckForValidListAndQueue+0x70>)
 8007736:	4a10      	ldr	r2, [pc, #64]	@ (8007778 <prvCheckForValidListAndQueue+0x68>)
 8007738:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800773a:	2300      	movs	r3, #0
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	4b11      	ldr	r3, [pc, #68]	@ (8007784 <prvCheckForValidListAndQueue+0x74>)
 8007740:	4a11      	ldr	r2, [pc, #68]	@ (8007788 <prvCheckForValidListAndQueue+0x78>)
 8007742:	2110      	movs	r1, #16
 8007744:	200a      	movs	r0, #10
 8007746:	f7fd fc7f 	bl	8005048 <xQueueGenericCreateStatic>
 800774a:	4603      	mov	r3, r0
 800774c:	4a08      	ldr	r2, [pc, #32]	@ (8007770 <prvCheckForValidListAndQueue+0x60>)
 800774e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007750:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <prvCheckForValidListAndQueue+0x60>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007758:	4b05      	ldr	r3, [pc, #20]	@ (8007770 <prvCheckForValidListAndQueue+0x60>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	490b      	ldr	r1, [pc, #44]	@ (800778c <prvCheckForValidListAndQueue+0x7c>)
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe fbf2 	bl	8005f48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007764:	f000 f958 	bl	8007a18 <vPortExitCritical>
}
 8007768:	bf00      	nop
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20001450 	.word	0x20001450
 8007774:	20001420 	.word	0x20001420
 8007778:	20001434 	.word	0x20001434
 800777c:	20001448 	.word	0x20001448
 8007780:	2000144c 	.word	0x2000144c
 8007784:	200014fc 	.word	0x200014fc
 8007788:	2000145c 	.word	0x2000145c
 800778c:	080080ec 	.word	0x080080ec

08007790 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3b04      	subs	r3, #4
 80077a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3b04      	subs	r3, #4
 80077ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f023 0201 	bic.w	r2, r3, #1
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3b04      	subs	r3, #4
 80077be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077c0:	4a0c      	ldr	r2, [pc, #48]	@ (80077f4 <pxPortInitialiseStack+0x64>)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3b14      	subs	r3, #20
 80077ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3b04      	subs	r3, #4
 80077d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f06f 0202 	mvn.w	r2, #2
 80077de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3b20      	subs	r3, #32
 80077e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077e6:	68fb      	ldr	r3, [r7, #12]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	080077f9 	.word	0x080077f9

080077f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007802:	4b15      	ldr	r3, [pc, #84]	@ (8007858 <prvTaskExitError+0x60>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d00d      	beq.n	8007828 <prvTaskExitError+0x30>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	b672      	cpsid	i
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	b662      	cpsie	i
 8007820:	60fb      	str	r3, [r7, #12]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <prvTaskExitError+0x2c>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782c:	b672      	cpsid	i
 800782e:	f383 8811 	msr	BASEPRI, r3
 8007832:	f3bf 8f6f 	isb	sy
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	b662      	cpsie	i
 800783c:	60bb      	str	r3, [r7, #8]
}
 800783e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007840:	bf00      	nop
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0fc      	beq.n	8007842 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	2000000c 	.word	0x2000000c
 800785c:	00000000 	.word	0x00000000

08007860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007860:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <pxCurrentTCBConst2>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6808      	ldr	r0, [r1, #0]
 8007866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	f380 8809 	msr	PSP, r0
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	4770      	bx	lr
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst2>:
 8007880:	20000f20 	.word	0x20000f20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007888:	4808      	ldr	r0, [pc, #32]	@ (80078ac <prvPortStartFirstTask+0x24>)
 800788a:	6800      	ldr	r0, [r0, #0]
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f380 8808 	msr	MSP, r0
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8814 	msr	CONTROL, r0
 800789a:	b662      	cpsie	i
 800789c:	b661      	cpsie	f
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	df00      	svc	0
 80078a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078aa:	bf00      	nop
 80078ac:	e000ed08 	.word	0xe000ed08

080078b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078b6:	4b37      	ldr	r3, [pc, #220]	@ (8007994 <xPortStartScheduler+0xe4>)
 80078b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	22ff      	movs	r2, #255	@ 0xff
 80078c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b2f      	ldr	r3, [pc, #188]	@ (8007998 <xPortStartScheduler+0xe8>)
 80078dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078de:	4b2f      	ldr	r3, [pc, #188]	@ (800799c <xPortStartScheduler+0xec>)
 80078e0:	2207      	movs	r2, #7
 80078e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078e4:	e009      	b.n	80078fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80078e6:	4b2d      	ldr	r3, [pc, #180]	@ (800799c <xPortStartScheduler+0xec>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	4a2b      	ldr	r2, [pc, #172]	@ (800799c <xPortStartScheduler+0xec>)
 80078ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007902:	2b80      	cmp	r3, #128	@ 0x80
 8007904:	d0ef      	beq.n	80078e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007906:	4b25      	ldr	r3, [pc, #148]	@ (800799c <xPortStartScheduler+0xec>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f1c3 0307 	rsb	r3, r3, #7
 800790e:	2b04      	cmp	r3, #4
 8007910:	d00d      	beq.n	800792e <xPortStartScheduler+0x7e>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	b672      	cpsid	i
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	b662      	cpsie	i
 8007926:	60bb      	str	r3, [r7, #8]
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	e7fd      	b.n	800792a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800792e:	4b1b      	ldr	r3, [pc, #108]	@ (800799c <xPortStartScheduler+0xec>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	4a19      	ldr	r2, [pc, #100]	@ (800799c <xPortStartScheduler+0xec>)
 8007936:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007938:	4b18      	ldr	r3, [pc, #96]	@ (800799c <xPortStartScheduler+0xec>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007940:	4a16      	ldr	r2, [pc, #88]	@ (800799c <xPortStartScheduler+0xec>)
 8007942:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800794c:	4b14      	ldr	r3, [pc, #80]	@ (80079a0 <xPortStartScheduler+0xf0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a13      	ldr	r2, [pc, #76]	@ (80079a0 <xPortStartScheduler+0xf0>)
 8007952:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007956:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007958:	4b11      	ldr	r3, [pc, #68]	@ (80079a0 <xPortStartScheduler+0xf0>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a10      	ldr	r2, [pc, #64]	@ (80079a0 <xPortStartScheduler+0xf0>)
 800795e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007962:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007964:	f000 f8dc 	bl	8007b20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007968:	4b0e      	ldr	r3, [pc, #56]	@ (80079a4 <xPortStartScheduler+0xf4>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800796e:	f000 f8fb 	bl	8007b68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007972:	4b0d      	ldr	r3, [pc, #52]	@ (80079a8 <xPortStartScheduler+0xf8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a0c      	ldr	r2, [pc, #48]	@ (80079a8 <xPortStartScheduler+0xf8>)
 8007978:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800797c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800797e:	f7ff ff83 	bl	8007888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007982:	f7fe ff35 	bl	80067f0 <vTaskSwitchContext>
	prvTaskExitError();
 8007986:	f7ff ff37 	bl	80077f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	e000e400 	.word	0xe000e400
 8007998:	2000154c 	.word	0x2000154c
 800799c:	20001550 	.word	0x20001550
 80079a0:	e000ed20 	.word	0xe000ed20
 80079a4:	2000000c 	.word	0x2000000c
 80079a8:	e000ef34 	.word	0xe000ef34

080079ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b6:	b672      	cpsid	i
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	b662      	cpsie	i
 80079c6:	607b      	str	r3, [r7, #4]
}
 80079c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079ca:	4b11      	ldr	r3, [pc, #68]	@ (8007a10 <vPortEnterCritical+0x64>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3301      	adds	r3, #1
 80079d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007a10 <vPortEnterCritical+0x64>)
 80079d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a10 <vPortEnterCritical+0x64>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d112      	bne.n	8007a02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007a14 <vPortEnterCritical+0x68>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00d      	beq.n	8007a02 <vPortEnterCritical+0x56>
	__asm volatile
 80079e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ea:	b672      	cpsid	i
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	b662      	cpsie	i
 80079fa:	603b      	str	r3, [r7, #0]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <vPortEnterCritical+0x52>
	}
}
 8007a02:	bf00      	nop
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	2000000c 	.word	0x2000000c
 8007a14:	e000ed04 	.word	0xe000ed04

08007a18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a1e:	4b13      	ldr	r3, [pc, #76]	@ (8007a6c <vPortExitCritical+0x54>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10d      	bne.n	8007a42 <vPortExitCritical+0x2a>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	b672      	cpsid	i
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	b662      	cpsie	i
 8007a3a:	607b      	str	r3, [r7, #4]
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	e7fd      	b.n	8007a3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007a42:	4b0a      	ldr	r3, [pc, #40]	@ (8007a6c <vPortExitCritical+0x54>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3b01      	subs	r3, #1
 8007a48:	4a08      	ldr	r2, [pc, #32]	@ (8007a6c <vPortExitCritical+0x54>)
 8007a4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a4c:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <vPortExitCritical+0x54>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d105      	bne.n	8007a60 <vPortExitCritical+0x48>
 8007a54:	2300      	movs	r3, #0
 8007a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f383 8811 	msr	BASEPRI, r3
}
 8007a5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	2000000c 	.word	0x2000000c

08007a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b15      	ldr	r3, [pc, #84]	@ (8007ad0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	f01e 0f10 	tst.w	lr, #16
 8007a80:	bf08      	it	eq
 8007a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a94:	b672      	cpsid	i
 8007a96:	f380 8811 	msr	BASEPRI, r0
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	b662      	cpsie	i
 8007aa4:	f7fe fea4 	bl	80067f0 <vTaskSwitchContext>
 8007aa8:	f04f 0000 	mov.w	r0, #0
 8007aac:	f380 8811 	msr	BASEPRI, r0
 8007ab0:	bc09      	pop	{r0, r3}
 8007ab2:	6819      	ldr	r1, [r3, #0]
 8007ab4:	6808      	ldr	r0, [r1, #0]
 8007ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	f01e 0f10 	tst.w	lr, #16
 8007abe:	bf08      	it	eq
 8007ac0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ac4:	f380 8809 	msr	PSP, r0
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop

08007ad0 <pxCurrentTCBConst>:
 8007ad0:	20000f20 	.word	0x20000f20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop

08007ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	b672      	cpsid	i
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	b662      	cpsie	i
 8007af2:	607b      	str	r3, [r7, #4]
}
 8007af4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007af6:	f7fe fdbf 	bl	8006678 <xTaskIncrementTick>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d003      	beq.n	8007b08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b00:	4b06      	ldr	r3, [pc, #24]	@ (8007b1c <SysTick_Handler+0x44>)
 8007b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	f383 8811 	msr	BASEPRI, r3
}
 8007b12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	e000ed04 	.word	0xe000ed04

08007b20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b24:	4b0b      	ldr	r3, [pc, #44]	@ (8007b54 <vPortSetupTimerInterrupt+0x34>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b58 <vPortSetupTimerInterrupt+0x38>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b30:	4b0a      	ldr	r3, [pc, #40]	@ (8007b5c <vPortSetupTimerInterrupt+0x3c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a0a      	ldr	r2, [pc, #40]	@ (8007b60 <vPortSetupTimerInterrupt+0x40>)
 8007b36:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3a:	099b      	lsrs	r3, r3, #6
 8007b3c:	4a09      	ldr	r2, [pc, #36]	@ (8007b64 <vPortSetupTimerInterrupt+0x44>)
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b42:	4b04      	ldr	r3, [pc, #16]	@ (8007b54 <vPortSetupTimerInterrupt+0x34>)
 8007b44:	2207      	movs	r2, #7
 8007b46:	601a      	str	r2, [r3, #0]
}
 8007b48:	bf00      	nop
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	e000e010 	.word	0xe000e010
 8007b58:	e000e018 	.word	0xe000e018
 8007b5c:	20000000 	.word	0x20000000
 8007b60:	10624dd3 	.word	0x10624dd3
 8007b64:	e000e014 	.word	0xe000e014

08007b68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007b78 <vPortEnableVFP+0x10>
 8007b6c:	6801      	ldr	r1, [r0, #0]
 8007b6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007b72:	6001      	str	r1, [r0, #0]
 8007b74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b76:	bf00      	nop
 8007b78:	e000ed88 	.word	0xe000ed88

08007b7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b82:	f3ef 8305 	mrs	r3, IPSR
 8007b86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b0f      	cmp	r3, #15
 8007b8c:	d917      	bls.n	8007bbe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf8 <vPortValidateInterruptPriority+0x7c>)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4413      	add	r3, r2
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b98:	4b18      	ldr	r3, [pc, #96]	@ (8007bfc <vPortValidateInterruptPriority+0x80>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	7afa      	ldrb	r2, [r7, #11]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d20d      	bcs.n	8007bbe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	607b      	str	r3, [r7, #4]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bbe:	4b10      	ldr	r3, [pc, #64]	@ (8007c00 <vPortValidateInterruptPriority+0x84>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c04 <vPortValidateInterruptPriority+0x88>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d90d      	bls.n	8007bea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	b672      	cpsid	i
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	b662      	cpsie	i
 8007be2:	603b      	str	r3, [r7, #0]
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop
 8007be8:	e7fd      	b.n	8007be6 <vPortValidateInterruptPriority+0x6a>
	}
 8007bea:	bf00      	nop
 8007bec:	3714      	adds	r7, #20
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	e000e3f0 	.word	0xe000e3f0
 8007bfc:	2000154c 	.word	0x2000154c
 8007c00:	e000ed0c 	.word	0xe000ed0c
 8007c04:	20001550 	.word	0x20001550

08007c08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	@ 0x28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c14:	f7fe fc72 	bl	80064fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c18:	4b5d      	ldr	r3, [pc, #372]	@ (8007d90 <pvPortMalloc+0x188>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c20:	f000 f920 	bl	8007e64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c24:	4b5b      	ldr	r3, [pc, #364]	@ (8007d94 <pvPortMalloc+0x18c>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f040 8094 	bne.w	8007d5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d020      	beq.n	8007c7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007c38:	2208      	movs	r2, #8
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d017      	beq.n	8007c7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f023 0307 	bic.w	r3, r3, #7
 8007c50:	3308      	adds	r3, #8
 8007c52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00d      	beq.n	8007c7a <pvPortMalloc+0x72>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c62:	b672      	cpsid	i
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	b662      	cpsie	i
 8007c72:	617b      	str	r3, [r7, #20]
}
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d06c      	beq.n	8007d5a <pvPortMalloc+0x152>
 8007c80:	4b45      	ldr	r3, [pc, #276]	@ (8007d98 <pvPortMalloc+0x190>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d867      	bhi.n	8007d5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c8a:	4b44      	ldr	r3, [pc, #272]	@ (8007d9c <pvPortMalloc+0x194>)
 8007c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c8e:	4b43      	ldr	r3, [pc, #268]	@ (8007d9c <pvPortMalloc+0x194>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c94:	e004      	b.n	8007ca0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d903      	bls.n	8007cb2 <pvPortMalloc+0xaa>
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1f1      	bne.n	8007c96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cb2:	4b37      	ldr	r3, [pc, #220]	@ (8007d90 <pvPortMalloc+0x188>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d04e      	beq.n	8007d5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	4413      	add	r3, r2
 8007cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	6a3b      	ldr	r3, [r7, #32]
 8007ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	1ad2      	subs	r2, r2, r3
 8007cd6:	2308      	movs	r3, #8
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d922      	bls.n	8007d24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00d      	beq.n	8007d0c <pvPortMalloc+0x104>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	b672      	cpsid	i
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	b662      	cpsie	i
 8007d04:	613b      	str	r3, [r7, #16]
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	1ad2      	subs	r2, r2, r3
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d1e:	69b8      	ldr	r0, [r7, #24]
 8007d20:	f000 f902 	bl	8007f28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d24:	4b1c      	ldr	r3, [pc, #112]	@ (8007d98 <pvPortMalloc+0x190>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007d98 <pvPortMalloc+0x190>)
 8007d30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d32:	4b19      	ldr	r3, [pc, #100]	@ (8007d98 <pvPortMalloc+0x190>)
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	4b1a      	ldr	r3, [pc, #104]	@ (8007da0 <pvPortMalloc+0x198>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d203      	bcs.n	8007d46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d3e:	4b16      	ldr	r3, [pc, #88]	@ (8007d98 <pvPortMalloc+0x190>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a17      	ldr	r2, [pc, #92]	@ (8007da0 <pvPortMalloc+0x198>)
 8007d44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	4b12      	ldr	r3, [pc, #72]	@ (8007d94 <pvPortMalloc+0x18c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d5a:	f7fe fbdd 	bl	8006518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00d      	beq.n	8007d84 <pvPortMalloc+0x17c>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d6c:	b672      	cpsid	i
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	b662      	cpsie	i
 8007d7c:	60fb      	str	r3, [r7, #12]
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	e7fd      	b.n	8007d80 <pvPortMalloc+0x178>
	return pvReturn;
 8007d84:	69fb      	ldr	r3, [r7, #28]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3728      	adds	r7, #40	@ 0x28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	2000515c 	.word	0x2000515c
 8007d94:	20005168 	.word	0x20005168
 8007d98:	20005160 	.word	0x20005160
 8007d9c:	20005154 	.word	0x20005154
 8007da0:	20005164 	.word	0x20005164

08007da4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d04e      	beq.n	8007e54 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007db6:	2308      	movs	r3, #8
 8007db8:	425b      	negs	r3, r3
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	4b24      	ldr	r3, [pc, #144]	@ (8007e5c <vPortFree+0xb8>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10d      	bne.n	8007dee <vPortFree+0x4a>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	b672      	cpsid	i
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	b662      	cpsie	i
 8007de6:	60fb      	str	r3, [r7, #12]
}
 8007de8:	bf00      	nop
 8007dea:	bf00      	nop
 8007dec:	e7fd      	b.n	8007dea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00d      	beq.n	8007e12 <vPortFree+0x6e>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	b672      	cpsid	i
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	b662      	cpsie	i
 8007e0a:	60bb      	str	r3, [r7, #8]
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	e7fd      	b.n	8007e0e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	4b11      	ldr	r3, [pc, #68]	@ (8007e5c <vPortFree+0xb8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d019      	beq.n	8007e54 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d115      	bne.n	8007e54 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e5c <vPortFree+0xb8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	43db      	mvns	r3, r3
 8007e32:	401a      	ands	r2, r3
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e38:	f7fe fb60 	bl	80064fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	4b07      	ldr	r3, [pc, #28]	@ (8007e60 <vPortFree+0xbc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4413      	add	r3, r2
 8007e46:	4a06      	ldr	r2, [pc, #24]	@ (8007e60 <vPortFree+0xbc>)
 8007e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e4a:	6938      	ldr	r0, [r7, #16]
 8007e4c:	f000 f86c 	bl	8007f28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e50:	f7fe fb62 	bl	8006518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e54:	bf00      	nop
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20005168 	.word	0x20005168
 8007e60:	20005160 	.word	0x20005160

08007e64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e6a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007e6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e70:	4b27      	ldr	r3, [pc, #156]	@ (8007f10 <prvHeapInit+0xac>)
 8007e72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00c      	beq.n	8007e98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	3307      	adds	r3, #7
 8007e82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0307 	bic.w	r3, r3, #7
 8007e8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	4a1f      	ldr	r2, [pc, #124]	@ (8007f10 <prvHeapInit+0xac>)
 8007e94:	4413      	add	r3, r2
 8007e96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f14 <prvHeapInit+0xb0>)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8007f14 <prvHeapInit+0xb0>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	4413      	add	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0307 	bic.w	r3, r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	4a15      	ldr	r2, [pc, #84]	@ (8007f18 <prvHeapInit+0xb4>)
 8007ec4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ec6:	4b14      	ldr	r3, [pc, #80]	@ (8007f18 <prvHeapInit+0xb4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ece:	4b12      	ldr	r3, [pc, #72]	@ (8007f18 <prvHeapInit+0xb4>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	1ad2      	subs	r2, r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8007f18 <prvHeapInit+0xb4>)
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8007f1c <prvHeapInit+0xb8>)
 8007ef2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	4a09      	ldr	r2, [pc, #36]	@ (8007f20 <prvHeapInit+0xbc>)
 8007efa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007efc:	4b09      	ldr	r3, [pc, #36]	@ (8007f24 <prvHeapInit+0xc0>)
 8007efe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f02:	601a      	str	r2, [r3, #0]
}
 8007f04:	bf00      	nop
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	20001554 	.word	0x20001554
 8007f14:	20005154 	.word	0x20005154
 8007f18:	2000515c 	.word	0x2000515c
 8007f1c:	20005164 	.word	0x20005164
 8007f20:	20005160 	.word	0x20005160
 8007f24:	20005168 	.word	0x20005168

08007f28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f30:	4b28      	ldr	r3, [pc, #160]	@ (8007fd4 <prvInsertBlockIntoFreeList+0xac>)
 8007f32:	60fb      	str	r3, [r7, #12]
 8007f34:	e002      	b.n	8007f3c <prvInsertBlockIntoFreeList+0x14>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d8f7      	bhi.n	8007f36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	4413      	add	r3, r2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d108      	bne.n	8007f6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	441a      	add	r2, r3
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	68ba      	ldr	r2, [r7, #8]
 8007f74:	441a      	add	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d118      	bne.n	8007fb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	4b15      	ldr	r3, [pc, #84]	@ (8007fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d00d      	beq.n	8007fa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	441a      	add	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	601a      	str	r2, [r3, #0]
 8007fa4:	e008      	b.n	8007fb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	601a      	str	r2, [r3, #0]
 8007fae:	e003      	b.n	8007fb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d002      	beq.n	8007fc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fc6:	bf00      	nop
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	20005154 	.word	0x20005154
 8007fd8:	2000515c 	.word	0x2000515c

08007fdc <memset>:
 8007fdc:	4402      	add	r2, r0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d100      	bne.n	8007fe6 <memset+0xa>
 8007fe4:	4770      	bx	lr
 8007fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8007fea:	e7f9      	b.n	8007fe0 <memset+0x4>

08007fec <__libc_init_array>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	4d0d      	ldr	r5, [pc, #52]	@ (8008024 <__libc_init_array+0x38>)
 8007ff0:	4c0d      	ldr	r4, [pc, #52]	@ (8008028 <__libc_init_array+0x3c>)
 8007ff2:	1b64      	subs	r4, r4, r5
 8007ff4:	10a4      	asrs	r4, r4, #2
 8007ff6:	2600      	movs	r6, #0
 8007ff8:	42a6      	cmp	r6, r4
 8007ffa:	d109      	bne.n	8008010 <__libc_init_array+0x24>
 8007ffc:	4d0b      	ldr	r5, [pc, #44]	@ (800802c <__libc_init_array+0x40>)
 8007ffe:	4c0c      	ldr	r4, [pc, #48]	@ (8008030 <__libc_init_array+0x44>)
 8008000:	f000 f826 	bl	8008050 <_init>
 8008004:	1b64      	subs	r4, r4, r5
 8008006:	10a4      	asrs	r4, r4, #2
 8008008:	2600      	movs	r6, #0
 800800a:	42a6      	cmp	r6, r4
 800800c:	d105      	bne.n	800801a <__libc_init_array+0x2e>
 800800e:	bd70      	pop	{r4, r5, r6, pc}
 8008010:	f855 3b04 	ldr.w	r3, [r5], #4
 8008014:	4798      	blx	r3
 8008016:	3601      	adds	r6, #1
 8008018:	e7ee      	b.n	8007ff8 <__libc_init_array+0xc>
 800801a:	f855 3b04 	ldr.w	r3, [r5], #4
 800801e:	4798      	blx	r3
 8008020:	3601      	adds	r6, #1
 8008022:	e7f2      	b.n	800800a <__libc_init_array+0x1e>
 8008024:	08008190 	.word	0x08008190
 8008028:	08008190 	.word	0x08008190
 800802c:	08008190 	.word	0x08008190
 8008030:	08008194 	.word	0x08008194

08008034 <memcpy>:
 8008034:	440a      	add	r2, r1
 8008036:	4291      	cmp	r1, r2
 8008038:	f100 33ff 	add.w	r3, r0, #4294967295
 800803c:	d100      	bne.n	8008040 <memcpy+0xc>
 800803e:	4770      	bx	lr
 8008040:	b510      	push	{r4, lr}
 8008042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800804a:	4291      	cmp	r1, r2
 800804c:	d1f9      	bne.n	8008042 <memcpy+0xe>
 800804e:	bd10      	pop	{r4, pc}

08008050 <_init>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr

0800805c <_fini>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr
