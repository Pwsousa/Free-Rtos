
Exercicio_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d68  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007f68  08007f68  00008f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800807c  0800807c  0000a150  2**0
                  CONTENTS
  4 .ARM          00000008  0800807c  0800807c  0000907c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008084  08008084  0000a150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008084  08008084  00009084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008088  08008088  00009088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800808c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  0800809c  0000a010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  0800813c  0000a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000501c  20000150  080081dc  0000a150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000516c  080081dc  0000a16c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY
 14 .debug_info   000210c8  00000000  00000000  0000a17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000410c  00000000  00000000  0002b246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a38  00000000  00000000  0002f358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001472  00000000  00000000  00030d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004683  00000000  00000000  00032202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001eefd  00000000  00000000  00036885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d6c2  00000000  00000000  00055782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00162e44  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006fd4  00000000  00000000  00162e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  00169e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08007f50 	.word	0x08007f50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08007f50 	.word	0x08007f50

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b96a 	b.w	800053c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	460c      	mov	r4, r1
 8000288:	2b00      	cmp	r3, #0
 800028a:	d14e      	bne.n	800032a <__udivmoddi4+0xaa>
 800028c:	4694      	mov	ip, r2
 800028e:	458c      	cmp	ip, r1
 8000290:	4686      	mov	lr, r0
 8000292:	fab2 f282 	clz	r2, r2
 8000296:	d962      	bls.n	800035e <__udivmoddi4+0xde>
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0320 	rsb	r3, r2, #32
 800029e:	4091      	lsls	r1, r2
 80002a0:	fa20 f303 	lsr.w	r3, r0, r3
 80002a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a8:	4319      	orrs	r1, r3
 80002aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f f68c 	uxth.w	r6, ip
 80002b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	fb07 1114 	mls	r1, r7, r4, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb04 f106 	mul.w	r1, r4, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002d6:	f080 8112 	bcs.w	80004fe <__udivmoddi4+0x27e>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 810f 	bls.w	80004fe <__udivmoddi4+0x27e>
 80002e0:	3c02      	subs	r4, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ee:	fb07 1110 	mls	r1, r7, r0, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb00 f606 	mul.w	r6, r0, r6
 80002fa:	429e      	cmp	r6, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x94>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f100 31ff 	add.w	r1, r0, #4294967295
 8000306:	f080 80fc 	bcs.w	8000502 <__udivmoddi4+0x282>
 800030a:	429e      	cmp	r6, r3
 800030c:	f240 80f9 	bls.w	8000502 <__udivmoddi4+0x282>
 8000310:	4463      	add	r3, ip
 8000312:	3802      	subs	r0, #2
 8000314:	1b9b      	subs	r3, r3, r6
 8000316:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800031a:	2100      	movs	r1, #0
 800031c:	b11d      	cbz	r5, 8000326 <__udivmoddi4+0xa6>
 800031e:	40d3      	lsrs	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	e9c5 3200 	strd	r3, r2, [r5]
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d905      	bls.n	800033a <__udivmoddi4+0xba>
 800032e:	b10d      	cbz	r5, 8000334 <__udivmoddi4+0xb4>
 8000330:	e9c5 0100 	strd	r0, r1, [r5]
 8000334:	2100      	movs	r1, #0
 8000336:	4608      	mov	r0, r1
 8000338:	e7f5      	b.n	8000326 <__udivmoddi4+0xa6>
 800033a:	fab3 f183 	clz	r1, r3
 800033e:	2900      	cmp	r1, #0
 8000340:	d146      	bne.n	80003d0 <__udivmoddi4+0x150>
 8000342:	42a3      	cmp	r3, r4
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xcc>
 8000346:	4290      	cmp	r0, r2
 8000348:	f0c0 80f0 	bcc.w	800052c <__udivmoddi4+0x2ac>
 800034c:	1a86      	subs	r6, r0, r2
 800034e:	eb64 0303 	sbc.w	r3, r4, r3
 8000352:	2001      	movs	r0, #1
 8000354:	2d00      	cmp	r5, #0
 8000356:	d0e6      	beq.n	8000326 <__udivmoddi4+0xa6>
 8000358:	e9c5 6300 	strd	r6, r3, [r5]
 800035c:	e7e3      	b.n	8000326 <__udivmoddi4+0xa6>
 800035e:	2a00      	cmp	r2, #0
 8000360:	f040 8090 	bne.w	8000484 <__udivmoddi4+0x204>
 8000364:	eba1 040c 	sub.w	r4, r1, ip
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	fa1f f78c 	uxth.w	r7, ip
 8000370:	2101      	movs	r1, #1
 8000372:	fbb4 f6f8 	udiv	r6, r4, r8
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb08 4416 	mls	r4, r8, r6, r4
 800037e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000382:	fb07 f006 	mul.w	r0, r7, r6
 8000386:	4298      	cmp	r0, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x11c>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x11a>
 8000394:	4298      	cmp	r0, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 800039a:	4626      	mov	r6, r4
 800039c:	1a1c      	subs	r4, r3, r0
 800039e:	fa1f f38e 	uxth.w	r3, lr
 80003a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a6:	fb08 4410 	mls	r4, r8, r0, r4
 80003aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ae:	fb00 f707 	mul.w	r7, r0, r7
 80003b2:	429f      	cmp	r7, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x148>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x146>
 80003c0:	429f      	cmp	r7, r3
 80003c2:	f200 80b0 	bhi.w	8000526 <__udivmoddi4+0x2a6>
 80003c6:	4620      	mov	r0, r4
 80003c8:	1bdb      	subs	r3, r3, r7
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	e7a5      	b.n	800031c <__udivmoddi4+0x9c>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 f706 	lsr.w	r7, r2, r6
 80003da:	431f      	orrs	r7, r3
 80003dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e0:	fa04 f301 	lsl.w	r3, r4, r1
 80003e4:	ea43 030c 	orr.w	r3, r3, ip
 80003e8:	40f4      	lsrs	r4, r6
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f4:	fbb4 fef0 	udiv	lr, r4, r0
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000400:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000404:	fb0e f90c 	mul.w	r9, lr, ip
 8000408:	45a1      	cmp	r9, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90a      	bls.n	8000426 <__udivmoddi4+0x1a6>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000416:	f080 8084 	bcs.w	8000522 <__udivmoddi4+0x2a2>
 800041a:	45a1      	cmp	r9, r4
 800041c:	f240 8081 	bls.w	8000522 <__udivmoddi4+0x2a2>
 8000420:	f1ae 0e02 	sub.w	lr, lr, #2
 8000424:	443c      	add	r4, r7
 8000426:	eba4 0409 	sub.w	r4, r4, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000432:	fb00 4413 	mls	r4, r0, r3, r4
 8000436:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	45a4      	cmp	ip, r4
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1d2>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 30ff 	add.w	r0, r3, #4294967295
 8000448:	d267      	bcs.n	800051a <__udivmoddi4+0x29a>
 800044a:	45a4      	cmp	ip, r4
 800044c:	d965      	bls.n	800051a <__udivmoddi4+0x29a>
 800044e:	3b02      	subs	r3, #2
 8000450:	443c      	add	r4, r7
 8000452:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000456:	fba0 9302 	umull	r9, r3, r0, r2
 800045a:	eba4 040c 	sub.w	r4, r4, ip
 800045e:	429c      	cmp	r4, r3
 8000460:	46ce      	mov	lr, r9
 8000462:	469c      	mov	ip, r3
 8000464:	d351      	bcc.n	800050a <__udivmoddi4+0x28a>
 8000466:	d04e      	beq.n	8000506 <__udivmoddi4+0x286>
 8000468:	b155      	cbz	r5, 8000480 <__udivmoddi4+0x200>
 800046a:	ebb8 030e 	subs.w	r3, r8, lr
 800046e:	eb64 040c 	sbc.w	r4, r4, ip
 8000472:	fa04 f606 	lsl.w	r6, r4, r6
 8000476:	40cb      	lsrs	r3, r1
 8000478:	431e      	orrs	r6, r3
 800047a:	40cc      	lsrs	r4, r1
 800047c:	e9c5 6400 	strd	r6, r4, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	e750      	b.n	8000326 <__udivmoddi4+0xa6>
 8000484:	f1c2 0320 	rsb	r3, r2, #32
 8000488:	fa20 f103 	lsr.w	r1, r0, r3
 800048c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000490:	fa24 f303 	lsr.w	r3, r4, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	430c      	orrs	r4, r1
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa00 fe02 	lsl.w	lr, r0, r2
 80004a0:	fa1f f78c 	uxth.w	r7, ip
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b2:	fb00 f107 	mul.w	r1, r0, r7
 80004b6:	4299      	cmp	r1, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x24c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f100 36ff 	add.w	r6, r0, #4294967295
 80004c2:	d22c      	bcs.n	800051e <__udivmoddi4+0x29e>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d92a      	bls.n	800051e <__udivmoddi4+0x29e>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d4:	fb08 3311 	mls	r3, r8, r1, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb01 f307 	mul.w	r3, r1, r7
 80004e0:	42a3      	cmp	r3, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x276>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ec:	d213      	bcs.n	8000516 <__udivmoddi4+0x296>
 80004ee:	42a3      	cmp	r3, r4
 80004f0:	d911      	bls.n	8000516 <__udivmoddi4+0x296>
 80004f2:	3902      	subs	r1, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	1ae4      	subs	r4, r4, r3
 80004f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004fc:	e739      	b.n	8000372 <__udivmoddi4+0xf2>
 80004fe:	4604      	mov	r4, r0
 8000500:	e6f0      	b.n	80002e4 <__udivmoddi4+0x64>
 8000502:	4608      	mov	r0, r1
 8000504:	e706      	b.n	8000314 <__udivmoddi4+0x94>
 8000506:	45c8      	cmp	r8, r9
 8000508:	d2ae      	bcs.n	8000468 <__udivmoddi4+0x1e8>
 800050a:	ebb9 0e02 	subs.w	lr, r9, r2
 800050e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000512:	3801      	subs	r0, #1
 8000514:	e7a8      	b.n	8000468 <__udivmoddi4+0x1e8>
 8000516:	4631      	mov	r1, r6
 8000518:	e7ed      	b.n	80004f6 <__udivmoddi4+0x276>
 800051a:	4603      	mov	r3, r0
 800051c:	e799      	b.n	8000452 <__udivmoddi4+0x1d2>
 800051e:	4630      	mov	r0, r6
 8000520:	e7d4      	b.n	80004cc <__udivmoddi4+0x24c>
 8000522:	46d6      	mov	lr, sl
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1a6>
 8000526:	4463      	add	r3, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74d      	b.n	80003c8 <__udivmoddi4+0x148>
 800052c:	4606      	mov	r6, r0
 800052e:	4623      	mov	r3, r4
 8000530:	4608      	mov	r0, r1
 8000532:	e70f      	b.n	8000354 <__udivmoddi4+0xd4>
 8000534:	3e02      	subs	r6, #2
 8000536:	4463      	add	r3, ip
 8000538:	e730      	b.n	800039c <__udivmoddi4+0x11c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fd39 	bl	8000fba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f844 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f960 	bl	8000810 <MX_GPIO_Init>
  MX_ETH_Init();
 8000550:	f000 f8b2 	bl	80006b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f8fe 	bl	8000754 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000558:	f000 f92c 	bl	80007b4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f004 f984 	bl	8004868 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem01 */
  Sem01Handle = osSemaphoreNew(2, 2, &Sem01_attributes);
 8000560:	4a11      	ldr	r2, [pc, #68]	@ (80005a8 <main+0x68>)
 8000562:	2102      	movs	r1, #2
 8000564:	2002      	movs	r0, #2
 8000566:	f004 fabd 	bl	8004ae4 <osSemaphoreNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <main+0x6c>)
 800056e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(Task_01, NULL, &Task01_attributes);
 8000570:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <main+0x70>)
 8000572:	2100      	movs	r1, #0
 8000574:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <main+0x74>)
 8000576:	f004 f9e1 	bl	800493c <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <main+0x78>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(Task_02, NULL, &Task02_attributes);
 8000580:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <main+0x7c>)
 8000582:	2100      	movs	r1, #0
 8000584:	480e      	ldr	r0, [pc, #56]	@ (80005c0 <main+0x80>)
 8000586:	f004 f9d9 	bl	800493c <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <main+0x84>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(Task_03, NULL, &Task03_attributes);
 8000590:	4a0d      	ldr	r2, [pc, #52]	@ (80005c8 <main+0x88>)
 8000592:	2100      	movs	r1, #0
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <main+0x8c>)
 8000596:	f004 f9d1 	bl	800493c <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a0c      	ldr	r2, [pc, #48]	@ (80005d0 <main+0x90>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f004 f996 	bl	80048d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <main+0x64>
 80005a8:	08008054 	.word	0x08008054
 80005ac:	200007c8 	.word	0x200007c8
 80005b0:	08007fe8 	.word	0x08007fe8
 80005b4:	08000965 	.word	0x08000965
 80005b8:	200007bc 	.word	0x200007bc
 80005bc:	0800800c 	.word	0x0800800c
 80005c0:	080009c1 	.word	0x080009c1
 80005c4:	200007c0 	.word	0x200007c0
 80005c8:	08008030 	.word	0x08008030
 80005cc:	08000a1d 	.word	0x08000a1d
 80005d0:	200007c4 	.word	0x200007c4

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2234      	movs	r2, #52	@ 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f007 fc7a 	bl	8007edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f8:	f001 fc84 	bl	8001f04 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	4b2c      	ldr	r3, [pc, #176]	@ (80006b0 <SystemClock_Config+0xdc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a2b      	ldr	r2, [pc, #172]	@ (80006b0 <SystemClock_Config+0xdc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000614:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <SystemClock_Config+0xe0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800061c:	4a25      	ldr	r2, [pc, #148]	@ (80006b4 <SystemClock_Config+0xe0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000638:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000648:	2360      	movs	r3, #96	@ 0x60
 800064a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000650:	2304      	movs	r3, #4
 8000652:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fcb1 	bl	8001fc4 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 fa0e 	bl	8000a88 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066c:	f001 fc5a 	bl	8001f24 <HAL_PWREx_EnableOverDrive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000676:	f000 fa07 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2103      	movs	r1, #3
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ff42 	bl	8002520 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006a2:	f000 f9f1 	bl	8000a88 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_ETH_Init+0x84>)
 80006be:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <MX_ETH_Init+0x88>)
 80006c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006d0:	22e1      	movs	r2, #225	@ 0xe1
 80006d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_ETH_Init+0x84>)
 80006e8:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_ETH_Init+0x84>)
 80006ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_ETH_Init+0x84>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <MX_ETH_Init+0x90>)
 80006f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_ETH_Init+0x84>)
 80006fc:	4a13      	ldr	r2, [pc, #76]	@ (800074c <MX_ETH_Init+0x94>)
 80006fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_ETH_Init+0x84>)
 8000702:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000706:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_ETH_Init+0x84>)
 800070a:	f000 fd89 	bl	8001220 <HAL_ETH_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f9b8 	bl	8000a88 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000718:	2238      	movs	r2, #56	@ 0x38
 800071a:	2100      	movs	r1, #0
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <MX_ETH_Init+0x98>)
 800071e:	f007 fbdd 	bl	8007edc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_ETH_Init+0x98>)
 8000724:	2221      	movs	r2, #33	@ 0x21
 8000726:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_ETH_Init+0x98>)
 800072a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800072e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_ETH_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200001a4 	.word	0x200001a4
 8000740:	40028000 	.word	0x40028000
 8000744:	200007cc 	.word	0x200007cc
 8000748:	200000b0 	.word	0x200000b0
 800074c:	20000010 	.word	0x20000010
 8000750:	2000016c 	.word	0x2000016c

08000754 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000758:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	@ (80007b0 <MX_USART3_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_USART3_UART_Init+0x58>)
 8000798:	f003 f810 	bl	80037bc <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f971 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000254 	.word	0x20000254
 80007b0:	40004800 	.word	0x40004800

080007b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b8:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	2206      	movs	r2, #6
 80007c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c8:	2202      	movs	r2, #2
 80007ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007da:	2201      	movs	r2, #1
 80007dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f8:	f001 fa49 	bl	8001c8e <HAL_PCD_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000802:	f000 f941 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200002dc 	.word	0x200002dc

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	@ 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b4b      	ldr	r3, [pc, #300]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a4a      	ldr	r2, [pc, #296]	@ (8000954 <MX_GPIO_Init+0x144>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b48      	ldr	r3, [pc, #288]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b45      	ldr	r3, [pc, #276]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a44      	ldr	r2, [pc, #272]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b42      	ldr	r3, [pc, #264]	@ (8000954 <MX_GPIO_Init+0x144>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b3f      	ldr	r3, [pc, #252]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a3e      	ldr	r2, [pc, #248]	@ (8000954 <MX_GPIO_Init+0x144>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a38      	ldr	r2, [pc, #224]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <MX_GPIO_Init+0x144>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a32      	ldr	r2, [pc, #200]	@ (8000954 <MX_GPIO_Init+0x144>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <MX_GPIO_Init+0x144>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	4b2d      	ldr	r3, [pc, #180]	@ (8000954 <MX_GPIO_Init+0x144>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000954 <MX_GPIO_Init+0x144>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <MX_GPIO_Init+0x144>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008bc:	4826      	ldr	r0, [pc, #152]	@ (8000958 <MX_GPIO_Init+0x148>)
 80008be:	f001 f9a9 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2140      	movs	r1, #64	@ 0x40
 80008c6:	4825      	ldr	r0, [pc, #148]	@ (800095c <MX_GPIO_Init+0x14c>)
 80008c8:	f001 f9a4 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	481f      	ldr	r0, [pc, #124]	@ (8000960 <MX_GPIO_Init+0x150>)
 80008e4:	f000 ffea 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4815      	ldr	r0, [pc, #84]	@ (8000958 <MX_GPIO_Init+0x148>)
 8000902:	f000 ffdb 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000906:	2340      	movs	r3, #64	@ 0x40
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	480f      	ldr	r0, [pc, #60]	@ (800095c <MX_GPIO_Init+0x14c>)
 800091e:	f000 ffcd 	bl	80018bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000922:	2380      	movs	r3, #128	@ 0x80
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4809      	ldr	r0, [pc, #36]	@ (800095c <MX_GPIO_Init+0x14c>)
 8000936:	f000 ffc1 	bl	80018bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2028      	movs	r0, #40	@ 0x28
 8000940:	f000 fc44 	bl	80011cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000944:	2028      	movs	r0, #40	@ 0x28
 8000946:	f000 fc5d 	bl	8001204 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	@ 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40020400 	.word	0x40020400
 800095c:	40021800 	.word	0x40021800
 8000960:	40020800 	.word	0x40020800

08000964 <Task_01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_01 */
void Task_01(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  char *str1 = "Task 01 -> Entrando \n";
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <Task_01+0x50>)
 800096e:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str1, strlen(str1),100);
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f7ff fc65 	bl	8000240 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	b29a      	uxth	r2, r3
 800097a:	2364      	movs	r3, #100	@ 0x64
 800097c:	68f9      	ldr	r1, [r7, #12]
 800097e:	480e      	ldr	r0, [pc, #56]	@ (80009b8 <Task_01+0x54>)
 8000980:	f002 ff6a 	bl	8003858 <HAL_UART_Transmit>
	  osDelay(1000);
 8000984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000988:	f004 f87e 	bl	8004a88 <osDelay>
	  osSemaphoreAcquire(Sem01Handle, osWaitForever);
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <Task_01+0x58>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f04f 31ff 	mov.w	r1, #4294967295
 8000994:	4618      	mov	r0, r3
 8000996:	f004 f941 	bl	8004c1c <osSemaphoreAcquire>


	  uint8_t cont = osSemaphoreGetCount(Sem01Handle);
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <Task_01+0x58>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 f9a2 	bl	8004ce8 <osSemaphoreGetCount>
 80009a4:	4603      	mov	r3, r0
 80009a6:	72fb      	strb	r3, [r7, #11]
	  osDelay(1000);
 80009a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ac:	f004 f86c 	bl	8004a88 <osDelay>
  {
 80009b0:	bf00      	nop
 80009b2:	e7db      	b.n	800096c <Task_01+0x8>
 80009b4:	08007f88 	.word	0x08007f88
 80009b8:	20000254 	.word	0x20000254
 80009bc:	200007c8 	.word	0x200007c8

080009c0 <Task_02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_02 */
void Task_02(void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_02 */
  /* Infinite loop */
  for(;;)
  {

	  char *str2 = "Task 02 -> Entrando \n";
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <Task_02+0x50>)
 80009ca:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str2, strlen(str2),100);
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fc37 	bl	8000240 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	2364      	movs	r3, #100	@ 0x64
 80009d8:	68f9      	ldr	r1, [r7, #12]
 80009da:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <Task_02+0x54>)
 80009dc:	f002 ff3c 	bl	8003858 <HAL_UART_Transmit>
	  osDelay(1000);
 80009e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e4:	f004 f850 	bl	8004a88 <osDelay>
	  osSemaphoreAcquire(Sem01Handle, osWaitForever);
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <Task_02+0x58>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 f913 	bl	8004c1c <osSemaphoreAcquire>

	  uint8_t cont = osSemaphoreGetCount(Sem01Handle);
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <Task_02+0x58>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 f974 	bl	8004ce8 <osSemaphoreGetCount>
 8000a00:	4603      	mov	r3, r0
 8000a02:	72fb      	strb	r3, [r7, #11]
	  osDelay(1000);
 8000a04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a08:	f004 f83e 	bl	8004a88 <osDelay>
  {
 8000a0c:	bf00      	nop
 8000a0e:	e7db      	b.n	80009c8 <Task_02+0x8>
 8000a10:	08007fa0 	.word	0x08007fa0
 8000a14:	20000254 	.word	0x20000254
 8000a18:	200007c8 	.word	0x200007c8

08000a1c <Task_03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_03 */
void Task_03(void *argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_03 */
  /* Infinite loop */
  for(;;)
  {

	  char *str3 = "Task 03 -> Entrando \n";
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <Task_03+0x3c>)
 8000a26:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str3, strlen(str3),100);
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f7ff fc09 	bl	8000240 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	2364      	movs	r3, #100	@ 0x64
 8000a34:	68f9      	ldr	r1, [r7, #12]
 8000a36:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <Task_03+0x40>)
 8000a38:	f002 ff0e 	bl	8003858 <HAL_UART_Transmit>
	  osDelay(1000);
 8000a3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a40:	f004 f822 	bl	8004a88 <osDelay>
	  osSemaphoreAcquire(Sem01Handle, osWaitForever);
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <Task_03+0x44>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 f8e5 	bl	8004c1c <osSemaphoreAcquire>
  {
 8000a52:	bf00      	nop
 8000a54:	e7e6      	b.n	8000a24 <Task_03+0x8>
 8000a56:	bf00      	nop
 8000a58:	08007fb8 	.word	0x08007fb8
 8000a5c:	20000254 	.word	0x20000254
 8000a60:	200007c8 	.word	0x200007c8

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 faad 	bl	8000fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40010000 	.word	0x40010000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	210f      	movs	r1, #15
 8000ace:	f06f 0001 	mvn.w	r0, #1
 8000ad2:	f000 fb7b 	bl	80011cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a4e      	ldr	r2, [pc, #312]	@ (8000c3c <HAL_ETH_MspInit+0x158>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f040 8096 	bne.w	8000c34 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b08:	4b4d      	ldr	r3, [pc, #308]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b14:	4b4a      	ldr	r3, [pc, #296]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b1c:	623b      	str	r3, [r7, #32]
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	4b47      	ldr	r3, [pc, #284]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	4a46      	ldr	r2, [pc, #280]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2c:	4b44      	ldr	r3, [pc, #272]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b34:	61fb      	str	r3, [r7, #28]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	4b41      	ldr	r3, [pc, #260]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	4a40      	ldr	r2, [pc, #256]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b44:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b50:	4b3b      	ldr	r3, [pc, #236]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b54:	4a3a      	ldr	r2, [pc, #232]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5c:	4b38      	ldr	r3, [pc, #224]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	f003 0304 	and.w	r3, r3, #4
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	4a34      	ldr	r2, [pc, #208]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b74:	4b32      	ldr	r3, [pc, #200]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b80:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a2e      	ldr	r2, [pc, #184]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b98:	4b29      	ldr	r3, [pc, #164]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9c:	4a28      	ldr	r2, [pc, #160]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba4:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <HAL_ETH_MspInit+0x15c>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bb0:	2332      	movs	r3, #50	@ 0x32
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481e      	ldr	r0, [pc, #120]	@ (8000c44 <HAL_ETH_MspInit+0x160>)
 8000bcc:	f000 fe76 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bd0:	2386      	movs	r3, #134	@ 0x86
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <HAL_ETH_MspInit+0x164>)
 8000bec:	f000 fe66 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480f      	ldr	r0, [pc, #60]	@ (8000c4c <HAL_ETH_MspInit+0x168>)
 8000c0e:	f000 fe55 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c12:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <HAL_ETH_MspInit+0x16c>)
 8000c30:	f000 fe44 	bl	80018bc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c34:	bf00      	nop
 8000c36:	3738      	adds	r7, #56	@ 0x38
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40028000 	.word	0x40028000
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ae      	sub	sp, #184	@ 0xb8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2290      	movs	r2, #144	@ 0x90
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f007 f931 	bl	8007edc <memset>
  if(huart->Instance==USART3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <HAL_UART_MspInit+0xb4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d13c      	bne.n	8000cfe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fe9c 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9e:	f7ff fef3 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_UART_MspInit+0xb8>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a19      	ldr	r2, [pc, #100]	@ (8000d0c <HAL_UART_MspInit+0xb8>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <HAL_UART_MspInit+0xb8>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_UART_MspInit+0xb8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <HAL_UART_MspInit+0xb8>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_UART_MspInit+0xb8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cec:	2307      	movs	r3, #7
 8000cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_UART_MspInit+0xbc>)
 8000cfa:	f000 fddf 	bl	80018bc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cfe:	bf00      	nop
 8000d00:	37b8      	adds	r7, #184	@ 0xb8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40004800 	.word	0x40004800
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0ae      	sub	sp, #184	@ 0xb8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2290      	movs	r2, #144	@ 0x90
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f007 f8d1 	bl	8007edc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d42:	d159      	bne.n	8000df8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000d48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 fe3b 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d60:	f7ff fe92 	bl	8000a88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d68:	4a25      	ldr	r2, [pc, #148]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d70:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d7c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d96:	230a      	movs	r3, #10
 8000d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4818      	ldr	r0, [pc, #96]	@ (8000e04 <HAL_PCD_MspInit+0xf0>)
 8000da4:	f000 fd8a 	bl	80018bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4810      	ldr	r0, [pc, #64]	@ (8000e04 <HAL_PCD_MspInit+0xf0>)
 8000dc4:	f000 fd7a 	bl	80018bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd2:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dea:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <HAL_PCD_MspInit+0xec>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000df8:	bf00      	nop
 8000dfa:	37b8      	adds	r7, #184	@ 0xb8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	@ 0x30
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <HAL_InitTick+0xcc>)
 8000e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ed4 <HAL_InitTick+0xcc>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <HAL_InitTick+0xcc>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e30:	f107 020c 	add.w	r2, r7, #12
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fd96 	bl	800296c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e40:	f001 fd80 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 8000e44:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e48:	4a23      	ldr	r2, [pc, #140]	@ (8000ed8 <HAL_InitTick+0xd0>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	3b01      	subs	r3, #1
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e54:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e56:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <HAL_InitTick+0xd8>)
 8000e58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e62:	4a1e      	ldr	r2, [pc, #120]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e74:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e7a:	4818      	ldr	r0, [pc, #96]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e7c:	f002 f9d0 	bl	8003220 <HAL_TIM_Base_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d11b      	bne.n	8000ec6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e8e:	4813      	ldr	r0, [pc, #76]	@ (8000edc <HAL_InitTick+0xd4>)
 8000e90:	f002 fa28 	bl	80032e4 <HAL_TIM_Base_Start_IT>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d111      	bne.n	8000ec6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ea2:	2019      	movs	r0, #25
 8000ea4:	f000 f9ae 	bl	8001204 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d808      	bhi.n	8000ec0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	2019      	movs	r0, #25
 8000eb4:	f000 f98a 	bl	80011cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <HAL_InitTick+0xdc>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e002      	b.n	8000ec6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3730      	adds	r7, #48	@ 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	431bde83 	.word	0x431bde83
 8000edc:	200007d4 	.word	0x200007d4
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <NMI_Handler+0x4>

08000ef0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <MemManage_Handler+0x4>

08000f00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f26:	f002 fa55 	bl	80033d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200007d4 	.word	0x200007d4

08000f34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f38:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f3c:	f000 fe84 	bl	8001c48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	@ (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f006 ffa9 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fad1 	bl	8000540 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fac:	0800808c 	.word	0x0800808c
  ldr r2, =_sbss
 8000fb0:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000fb4:	2000516c 	.word	0x2000516c

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>

08000fba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbe:	2003      	movs	r0, #3
 8000fc0:	f000 f8f9 	bl	80011b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc4:	200f      	movs	r0, #15
 8000fc6:	f7ff ff1f 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fca:	f7ff fd63 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000820 	.word	0x20000820

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000820 	.word	0x20000820

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	4313      	orrs	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0000 	.word	0x05fa0000

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	@ (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	@ (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff4c 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011de:	f7ff ff61 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	68b9      	ldr	r1, [r7, #8]
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f7ff ffb1 	bl	8001150 <NVIC_EncodePriority>
 80011ee:	4602      	mov	r2, r0
 80011f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff80 	bl	80010fc <__NVIC_SetPriority>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff54 	bl	80010c0 <__NVIC_EnableIRQ>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e086      	b.n	8001340 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001238:	2b00      	cmp	r3, #0
 800123a:	d106      	bne.n	800124a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2220      	movs	r2, #32
 8001240:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fc4d 	bl	8000ae4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <HAL_ETH_Init+0x128>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a3e      	ldr	r2, [pc, #248]	@ (8001348 <HAL_ETH_Init+0x128>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b3c      	ldr	r3, [pc, #240]	@ (8001348 <HAL_ETH_Init+0x128>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001262:	4b3a      	ldr	r3, [pc, #232]	@ (800134c <HAL_ETH_Init+0x12c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4a39      	ldr	r2, [pc, #228]	@ (800134c <HAL_ETH_Init+0x12c>)
 8001268:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800126c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800126e:	4b37      	ldr	r3, [pc, #220]	@ (800134c <HAL_ETH_Init+0x12c>)
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4935      	ldr	r1, [pc, #212]	@ (800134c <HAL_ETH_Init+0x12c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800127c:	4b33      	ldr	r3, [pc, #204]	@ (800134c <HAL_ETH_Init+0x12c>)
 800127e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001296:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001298:	f7ff feb0 	bl	8000ffc <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800129e:	e011      	b.n	80012c4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012a0:	f7ff feac 	bl	8000ffc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012ae:	d909      	bls.n	80012c4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2204      	movs	r2, #4
 80012b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	22e0      	movs	r2, #224	@ 0xe0
 80012bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e03d      	b.n	8001340 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e4      	bne.n	80012a0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f97a 	bl	80015d0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fa25 	bl	800172c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fa7b 	bl	80017de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	461a      	mov	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f9e3 	bl	80016bc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001304:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_ETH_Init+0x130>)
 8001314:	430b      	orrs	r3, r1
 8001316:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800132a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2210      	movs	r2, #16
 800133a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	00020060 	.word	0x00020060

08001354 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4b53      	ldr	r3, [pc, #332]	@ (80014b8 <ETH_SetMACConfig+0x164>)
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	7b9b      	ldrb	r3, [r3, #14]
 8001372:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	7c12      	ldrb	r2, [r2, #16]
 8001378:	2a00      	cmp	r2, #0
 800137a:	d102      	bne.n	8001382 <ETH_SetMACConfig+0x2e>
 800137c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001380:	e000      	b.n	8001384 <ETH_SetMACConfig+0x30>
 8001382:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001384:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	7c52      	ldrb	r2, [r2, #17]
 800138a:	2a00      	cmp	r2, #0
 800138c:	d102      	bne.n	8001394 <ETH_SetMACConfig+0x40>
 800138e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001392:	e000      	b.n	8001396 <ETH_SetMACConfig+0x42>
 8001394:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001396:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800139c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	7fdb      	ldrb	r3, [r3, #31]
 80013a2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013a4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	7f92      	ldrb	r2, [r2, #30]
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d102      	bne.n	80013ba <ETH_SetMACConfig+0x66>
 80013b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013b8:	e000      	b.n	80013bc <ETH_SetMACConfig+0x68>
 80013ba:	2200      	movs	r2, #0
                        macconf->Speed |
 80013bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	7f1b      	ldrb	r3, [r3, #28]
 80013c2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013c4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	791b      	ldrb	r3, [r3, #4]
 80013d0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013da:	2a00      	cmp	r2, #0
 80013dc:	d102      	bne.n	80013e4 <ETH_SetMACConfig+0x90>
 80013de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013e2:	e000      	b.n	80013e6 <ETH_SetMACConfig+0x92>
 80013e4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	7bdb      	ldrb	r3, [r3, #15]
 80013ec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013ee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80013fc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013fe:	4313      	orrs	r3, r2
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff fdfc 	bl	8001014 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001432:	4013      	ands	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001442:	2a00      	cmp	r2, #0
 8001444:	d101      	bne.n	800144a <ETH_SetMACConfig+0xf6>
 8001446:	2280      	movs	r2, #128	@ 0x80
 8001448:	e000      	b.n	800144c <ETH_SetMACConfig+0xf8>
 800144a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800144c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001452:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800145a:	2a01      	cmp	r2, #1
 800145c:	d101      	bne.n	8001462 <ETH_SetMACConfig+0x10e>
 800145e:	2208      	movs	r2, #8
 8001460:	e000      	b.n	8001464 <ETH_SetMACConfig+0x110>
 8001462:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001464:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800146c:	2a01      	cmp	r2, #1
 800146e:	d101      	bne.n	8001474 <ETH_SetMACConfig+0x120>
 8001470:	2204      	movs	r2, #4
 8001472:	e000      	b.n	8001476 <ETH_SetMACConfig+0x122>
 8001474:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001476:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800147e:	2a01      	cmp	r2, #1
 8001480:	d101      	bne.n	8001486 <ETH_SetMACConfig+0x132>
 8001482:	2202      	movs	r2, #2
 8001484:	e000      	b.n	8001488 <ETH_SetMACConfig+0x134>
 8001486:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001488:	4313      	orrs	r3, r2
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4313      	orrs	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff fdb7 	bl	8001014 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	fd20810f 	.word	0xfd20810f

080014bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4b3d      	ldr	r3, [pc, #244]	@ (80015cc <ETH_SetDMAConfig+0x110>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	7b1b      	ldrb	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <ETH_SetDMAConfig+0x2c>
 80014e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014e6:	e000      	b.n	80014ea <ETH_SetDMAConfig+0x2e>
 80014e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	7b5b      	ldrb	r3, [r3, #13]
 80014ee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014f0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	7f52      	ldrb	r2, [r2, #29]
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d102      	bne.n	8001500 <ETH_SetDMAConfig+0x44>
 80014fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014fe:	e000      	b.n	8001502 <ETH_SetDMAConfig+0x46>
 8001500:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001502:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	7b9b      	ldrb	r3, [r3, #14]
 8001508:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800150a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001510:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7f1b      	ldrb	r3, [r3, #28]
 8001516:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001518:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	7f9b      	ldrb	r3, [r3, #30]
 800151e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001520:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001526:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800152e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001530:	4313      	orrs	r3, r2
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4313      	orrs	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001540:	461a      	mov	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff fd5e 	bl	8001014 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001560:	461a      	mov	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	791b      	ldrb	r3, [r3, #4]
 800156a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001570:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001576:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800157c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001584:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001586:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800158e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001594:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800159e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015a2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fd2f 	bl	8001014 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	f8de3f23 	.word	0xf8de3f23

080015d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0a6      	sub	sp, #152	@ 0x98
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015d8:	2301      	movs	r3, #1
 80015da:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80015de:	2301      	movs	r3, #1
 80015e0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001612:	2300      	movs	r3, #0
 8001614:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800161c:	2300      	movs	r3, #0
 800161e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001638:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800163c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800163e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800164a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800164e:	4619      	mov	r1, r3
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fe7f 	bl	8001354 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001656:	2301      	movs	r3, #1
 8001658:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800165a:	2301      	movs	r3, #1
 800165c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001664:	2301      	movs	r3, #1
 8001666:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800167c:	2301      	movs	r3, #1
 800167e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001682:	2301      	movs	r3, #1
 8001684:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800168c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001690:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001696:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4619      	mov	r1, r3
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ff05 	bl	80014bc <ETH_SetDMAConfig>
}
 80016b2:	bf00      	nop
 80016b4:	3798      	adds	r7, #152	@ 0x98
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3305      	adds	r3, #5
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	3204      	adds	r2, #4
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <ETH_MACAddressConfig+0x68>)
 80016de:	4413      	add	r3, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3303      	adds	r3, #3
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	061a      	lsls	r2, r3, #24
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3302      	adds	r3, #2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3301      	adds	r3, #1
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	4313      	orrs	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	4313      	orrs	r3, r2
 8001708:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <ETH_MACAddressConfig+0x6c>)
 800170e:	4413      	add	r3, r2
 8001710:	461a      	mov	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	371c      	adds	r7, #28
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40028040 	.word	0x40028040
 8001728:	40028044 	.word	0x40028044

0800172c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e03e      	b.n	80017b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68d9      	ldr	r1, [r3, #12]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	3206      	adds	r2, #6
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d80c      	bhi.n	800179c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68d9      	ldr	r1, [r3, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	461a      	mov	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	e004      	b.n	80017a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3301      	adds	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d9bd      	bls.n	800173a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017d0:	611a      	str	r2, [r3, #16]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e048      	b.n	800187e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6919      	ldr	r1, [r3, #16]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001828:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001842:	68b9      	ldr	r1, [r7, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	3212      	adds	r2, #18
 800184a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d80c      	bhi.n	800186e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6919      	ldr	r1, [r3, #16]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	e004      	b.n	8001878 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d9b3      	bls.n	80017ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ae:	60da      	str	r2, [r3, #12]
}
 80018b0:	bf00      	nop
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	@ 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e175      	b.n	8001bc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f040 8164 	bne.w	8001bc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d005      	beq.n	8001912 <HAL_GPIO_Init+0x56>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d130      	bne.n	8001974 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001948:	2201      	movs	r2, #1
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	f003 0201 	and.w	r2, r3, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	2b03      	cmp	r3, #3
 800197e:	d017      	beq.n	80019b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d123      	bne.n	8001a04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	08da      	lsrs	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3208      	adds	r2, #8
 80019fe:	69b9      	ldr	r1, [r7, #24]
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0203 	and.w	r2, r3, #3
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80be 	beq.w	8001bc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <HAL_GPIO_Init+0x324>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a65      	ldr	r2, [pc, #404]	@ (8001be0 <HAL_GPIO_Init+0x324>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <HAL_GPIO_Init+0x324>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a5e:	4a61      	ldr	r2, [pc, #388]	@ (8001be4 <HAL_GPIO_Init+0x328>)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a58      	ldr	r2, [pc, #352]	@ (8001be8 <HAL_GPIO_Init+0x32c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d037      	beq.n	8001afa <HAL_GPIO_Init+0x23e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a57      	ldr	r2, [pc, #348]	@ (8001bec <HAL_GPIO_Init+0x330>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d031      	beq.n	8001af6 <HAL_GPIO_Init+0x23a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a56      	ldr	r2, [pc, #344]	@ (8001bf0 <HAL_GPIO_Init+0x334>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d02b      	beq.n	8001af2 <HAL_GPIO_Init+0x236>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a55      	ldr	r2, [pc, #340]	@ (8001bf4 <HAL_GPIO_Init+0x338>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d025      	beq.n	8001aee <HAL_GPIO_Init+0x232>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a54      	ldr	r2, [pc, #336]	@ (8001bf8 <HAL_GPIO_Init+0x33c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01f      	beq.n	8001aea <HAL_GPIO_Init+0x22e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a53      	ldr	r2, [pc, #332]	@ (8001bfc <HAL_GPIO_Init+0x340>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d019      	beq.n	8001ae6 <HAL_GPIO_Init+0x22a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a52      	ldr	r2, [pc, #328]	@ (8001c00 <HAL_GPIO_Init+0x344>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d013      	beq.n	8001ae2 <HAL_GPIO_Init+0x226>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a51      	ldr	r2, [pc, #324]	@ (8001c04 <HAL_GPIO_Init+0x348>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00d      	beq.n	8001ade <HAL_GPIO_Init+0x222>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a50      	ldr	r2, [pc, #320]	@ (8001c08 <HAL_GPIO_Init+0x34c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d007      	beq.n	8001ada <HAL_GPIO_Init+0x21e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c0c <HAL_GPIO_Init+0x350>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_GPIO_Init+0x21a>
 8001ad2:	2309      	movs	r3, #9
 8001ad4:	e012      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	e010      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001ada:	2308      	movs	r3, #8
 8001adc:	e00e      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e00c      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001ae2:	2306      	movs	r3, #6
 8001ae4:	e00a      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	e008      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001aea:	2304      	movs	r3, #4
 8001aec:	e006      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001aee:	2303      	movs	r3, #3
 8001af0:	e004      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e002      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x240>
 8001afa:	2300      	movs	r3, #0
 8001afc:	69fa      	ldr	r2, [r7, #28]
 8001afe:	f002 0203 	and.w	r2, r2, #3
 8001b02:	0092      	lsls	r2, r2, #2
 8001b04:	4093      	lsls	r3, r2
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b0c:	4935      	ldr	r1, [pc, #212]	@ (8001be4 <HAL_GPIO_Init+0x328>)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c10 <HAL_GPIO_Init+0x354>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b3e:	4a34      	ldr	r2, [pc, #208]	@ (8001c10 <HAL_GPIO_Init+0x354>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b44:	4b32      	ldr	r3, [pc, #200]	@ (8001c10 <HAL_GPIO_Init+0x354>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b68:	4a29      	ldr	r2, [pc, #164]	@ (8001c10 <HAL_GPIO_Init+0x354>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b6e:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <HAL_GPIO_Init+0x354>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b92:	4a1f      	ldr	r2, [pc, #124]	@ (8001c10 <HAL_GPIO_Init+0x354>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b98:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <HAL_GPIO_Init+0x354>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bbc:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <HAL_GPIO_Init+0x354>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b0f      	cmp	r3, #15
 8001bcc:	f67f ae86 	bls.w	80018dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3724      	adds	r7, #36	@ 0x24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40013800 	.word	0x40013800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	40020c00 	.word	0x40020c00
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40021400 	.word	0x40021400
 8001c00:	40021800 	.word	0x40021800
 8001c04:	40021c00 	.word	0x40021c00
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40022400 	.word	0x40022400
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c5e:	4a05      	ldr	r2, [pc, #20]	@ (8001c74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f806 	bl	8001c78 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40013c00 	.word	0x40013c00

08001c78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af02      	add	r7, sp, #8
 8001c94:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e108      	b.n	8001eb2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff f82a 	bl	8000d14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cce:	d102      	bne.n	8001cd6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fb20 	bl	8004320 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7c1a      	ldrb	r2, [r3, #16]
 8001ce8:	f88d 2000 	strb.w	r2, [sp]
 8001cec:	3304      	adds	r3, #4
 8001cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cf0:	f002 fabc 	bl	800426c <USB_CoreInit>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0d5      	b.n	8001eb2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f002 fb18 	bl	8004342 <USB_SetCurrentMode>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0c6      	b.n	8001eb2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e04a      	b.n	8001dc0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3315      	adds	r3, #21
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3314      	adds	r3, #20
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	b298      	uxth	r0, r3
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	332e      	adds	r3, #46	@ 0x2e
 8001d66:	4602      	mov	r2, r0
 8001d68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	3318      	adds	r3, #24
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	331c      	adds	r3, #28
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3320      	adds	r3, #32
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	3324      	adds	r3, #36	@ 0x24
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	791b      	ldrb	r3, [r3, #4]
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3af      	bcc.n	8001d2a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
 8001dce:	e044      	b.n	8001e5a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3301      	adds	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	791b      	ldrb	r3, [r3, #4]
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3b5      	bcc.n	8001dd0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7c1a      	ldrb	r2, [r3, #16]
 8001e6c:	f88d 2000 	strb.w	r2, [sp]
 8001e70:	3304      	adds	r3, #4
 8001e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e74:	f002 fab2 	bl	80043dc <USB_DevInit>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e013      	b.n	8001eb2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7b1b      	ldrb	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f80b 	bl	8001ebc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fc6d 	bl	800478a <USB_DevDisconnect>

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001eea:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <HAL_PCDEx_ActivateLPM+0x44>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	10000003 	.word	0x10000003

08001f04 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40007000 	.word	0x40007000

08001f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a22      	ldr	r2, [pc, #136]	@ (8001fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f52:	f7ff f853 	bl	8000ffc <HAL_GetTick>
 8001f56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f58:	e009      	b.n	8001f6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f5a:	f7ff f84f 	bl	8000ffc <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f68:	d901      	bls.n	8001f6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e022      	b.n	8001fb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f6e:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f7a:	d1ee      	bne.n	8001f5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f7c:	4b10      	ldr	r3, [pc, #64]	@ (8001fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0f      	ldr	r2, [pc, #60]	@ (8001fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f88:	f7ff f838 	bl	8000ffc <HAL_GetTick>
 8001f8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f8e:	e009      	b.n	8001fa4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f90:	f7ff f834 	bl	8000ffc <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f9e:	d901      	bls.n	8001fa4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e007      	b.n	8001fb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fb0:	d1ee      	bne.n	8001f90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e29b      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	4b96      	ldr	r3, [pc, #600]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff4:	4b93      	ldr	r3, [pc, #588]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d112      	bne.n	8002026 <HAL_RCC_OscConfig+0x62>
 8002000:	4b90      	ldr	r3, [pc, #576]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002008:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b8d      	ldr	r3, [pc, #564]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d06c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x130>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d168      	bne.n	80020f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e275      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x7a>
 8002030:	4b84      	ldr	r3, [pc, #528]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a83      	ldr	r2, [pc, #524]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e02e      	b.n	800209c <HAL_RCC_OscConfig+0xd8>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x9c>
 8002046:	4b7f      	ldr	r3, [pc, #508]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7e      	ldr	r2, [pc, #504]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b7c      	ldr	r3, [pc, #496]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7b      	ldr	r2, [pc, #492]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002058:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xd8>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0xc0>
 800206a:	4b76      	ldr	r3, [pc, #472]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a75      	ldr	r2, [pc, #468]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b73      	ldr	r3, [pc, #460]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a72      	ldr	r2, [pc, #456]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xd8>
 8002084:	4b6f      	ldr	r3, [pc, #444]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6e      	ldr	r2, [pc, #440]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b6c      	ldr	r3, [pc, #432]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6b      	ldr	r2, [pc, #428]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe ffaa 	bl	8000ffc <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7fe ffa6 	bl	8000ffc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e229      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b61      	ldr	r3, [pc, #388]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xe8>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff96 	bl	8000ffc <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7fe ff92 	bl	8000ffc <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	@ 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e215      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b57      	ldr	r3, [pc, #348]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x110>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d069      	beq.n	80021d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002102:	4b50      	ldr	r3, [pc, #320]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210e:	4b4d      	ldr	r3, [pc, #308]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x190>
 800211a:	4b4a      	ldr	r3, [pc, #296]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b47      	ldr	r3, [pc, #284]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x17a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1e9      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b41      	ldr	r3, [pc, #260]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	493d      	ldr	r1, [pc, #244]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e040      	b.n	80021d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d023      	beq.n	80021a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b39      	ldr	r3, [pc, #228]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a38      	ldr	r2, [pc, #224]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7fe ff48 	bl	8000ffc <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002170:	f7fe ff44 	bl	8000ffc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1c7      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002182:	4b30      	ldr	r3, [pc, #192]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218e:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4929      	ldr	r1, [pc, #164]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
 80021a2:	e018      	b.n	80021d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a26      	ldr	r2, [pc, #152]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe ff24 	bl	8000ffc <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b8:	f7fe ff20 	bl	8000ffc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e1a3      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d038      	beq.n	8002254 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ea:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 80021ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ee:	4a15      	ldr	r2, [pc, #84]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f6:	f7fe ff01 	bl	8000ffc <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fe:	f7fe fefd 	bl	8000ffc <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e180      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x23a>
 800221c:	e01a      	b.n	8002254 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002222:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <HAL_RCC_OscConfig+0x280>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7fe fee7 	bl	8000ffc <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7fe fee3 	bl	8000ffc <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d903      	bls.n	8002248 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e166      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
 8002244:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	4b92      	ldr	r3, [pc, #584]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800224a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1ee      	bne.n	8002232 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 80a4 	beq.w	80023aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002262:	4b8c      	ldr	r3, [pc, #560]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10d      	bne.n	800228a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b89      	ldr	r3, [pc, #548]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	4a88      	ldr	r2, [pc, #544]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002278:	6413      	str	r3, [r2, #64]	@ 0x40
 800227a:	4b86      	ldr	r3, [pc, #536]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228a:	4b83      	ldr	r3, [pc, #524]	@ (8002498 <HAL_RCC_OscConfig+0x4d4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002296:	4b80      	ldr	r3, [pc, #512]	@ (8002498 <HAL_RCC_OscConfig+0x4d4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7f      	ldr	r2, [pc, #508]	@ (8002498 <HAL_RCC_OscConfig+0x4d4>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7fe feab 	bl	8000ffc <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7fe fea7 	bl	8000ffc <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	@ 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e12a      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022bc:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <HAL_RCC_OscConfig+0x4d4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x31a>
 80022d0:	4b70      	ldr	r3, [pc, #448]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d4:	4a6f      	ldr	r2, [pc, #444]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6713      	str	r3, [r2, #112]	@ 0x70
 80022dc:	e02d      	b.n	800233a <HAL_RCC_OscConfig+0x376>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x33c>
 80022e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	4a6a      	ldr	r2, [pc, #424]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f2:	4b68      	ldr	r3, [pc, #416]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	4a67      	ldr	r2, [pc, #412]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fe:	e01c      	b.n	800233a <HAL_RCC_OscConfig+0x376>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x35e>
 8002308:	4b62      	ldr	r3, [pc, #392]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	4a61      	ldr	r2, [pc, #388]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6713      	str	r3, [r2, #112]	@ 0x70
 8002314:	4b5f      	ldr	r3, [pc, #380]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002318:	4a5e      	ldr	r2, [pc, #376]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x376>
 8002322:	4b5c      	ldr	r3, [pc, #368]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002326:	4a5b      	ldr	r2, [pc, #364]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6713      	str	r3, [r2, #112]	@ 0x70
 800232e:	4b59      	ldr	r3, [pc, #356]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002332:	4a58      	ldr	r2, [pc, #352]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7fe fe5b 	bl	8000ffc <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe fe57 	bl	8000ffc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0d8      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b4c      	ldr	r3, [pc, #304]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCC_OscConfig+0x386>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236e:	f7fe fe45 	bl	8000ffc <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7fe fe41 	bl	8000ffc <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0c2      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ee      	bne.n	8002376 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b3d      	ldr	r3, [pc, #244]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80ae 	beq.w	8002510 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b4:	4b37      	ldr	r3, [pc, #220]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d06d      	beq.n	800249c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d14b      	bne.n	8002460 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b32      	ldr	r3, [pc, #200]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a31      	ldr	r2, [pc, #196]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80023ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d4:	f7fe fe12 	bl	8000ffc <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe fe0e 	bl	8000ffc <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e091      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ee:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69da      	ldr	r2, [r3, #28]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	085b      	lsrs	r3, r3, #1
 8002412:	3b01      	subs	r3, #1
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	071b      	lsls	r3, r3, #28
 8002426:	491b      	ldr	r1, [pc, #108]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fde0 	bl	8000ffc <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fddc 	bl	8000ffc <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e05f      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x47c>
 800245e:	e057      	b.n	8002510 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0b      	ldr	r2, [pc, #44]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800246a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fdc6 	bl	8000ffc <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fdc2 	bl	8000ffc <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e045      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002486:	4b03      	ldr	r3, [pc, #12]	@ (8002494 <HAL_RCC_OscConfig+0x4d0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0x4b0>
 8002492:	e03d      	b.n	8002510 <HAL_RCC_OscConfig+0x54c>
 8002494:	40023800 	.word	0x40023800
 8002498:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800249c:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <HAL_RCC_OscConfig+0x558>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d030      	beq.n	800250c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d129      	bne.n	800250c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d122      	bne.n	800250c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d119      	bne.n	800250c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	3b01      	subs	r3, #1
 80024e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d10f      	bne.n	800250c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800

08002520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0d0      	b.n	80026da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b6a      	ldr	r3, [pc, #424]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d910      	bls.n	8002568 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b67      	ldr	r3, [pc, #412]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 020f 	bic.w	r2, r3, #15
 800254e:	4965      	ldr	r1, [pc, #404]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b8      	b.n	80026da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b59      	ldr	r3, [pc, #356]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a58      	ldr	r2, [pc, #352]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800258a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b53      	ldr	r3, [pc, #332]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a52      	ldr	r2, [pc, #328]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b50      	ldr	r3, [pc, #320]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494d      	ldr	r1, [pc, #308]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d040      	beq.n	8002644 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d115      	bne.n	8002602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e073      	b.n	80026da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b3d      	ldr	r3, [pc, #244]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06b      	b.n	80026da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b39      	ldr	r3, [pc, #228]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4936      	ldr	r1, [pc, #216]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002614:	f7fe fcf2 	bl	8000ffc <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7fe fcee 	bl	8000ffc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e053      	b.n	80026da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b2d      	ldr	r3, [pc, #180]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d210      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b24      	ldr	r3, [pc, #144]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 020f 	bic.w	r2, r3, #15
 800265a:	4922      	ldr	r1, [pc, #136]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e032      	b.n	80026da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4916      	ldr	r1, [pc, #88]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800269e:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490e      	ldr	r1, [pc, #56]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f821 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490a      	ldr	r1, [pc, #40]	@ (80026ec <HAL_RCC_ClockConfig+0x1cc>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_RCC_ClockConfig+0x1d0>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ce:	4b09      	ldr	r3, [pc, #36]	@ (80026f4 <HAL_RCC_ClockConfig+0x1d4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fb98 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08008064 	.word	0x08008064
 80026f0:	20000000 	.word	0x20000000
 80026f4:	20000004 	.word	0x20000004

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026fc:	b094      	sub	sp, #80	@ 0x50
 80026fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	647b      	str	r3, [r7, #68]	@ 0x44
 8002704:	2300      	movs	r3, #0
 8002706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002708:	2300      	movs	r3, #0
 800270a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002710:	4b79      	ldr	r3, [pc, #484]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d00d      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x40>
 800271c:	2b08      	cmp	r3, #8
 800271e:	f200 80e1 	bhi.w	80028e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x34>
 8002726:	2b04      	cmp	r3, #4
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x3a>
 800272a:	e0db      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b73      	ldr	r3, [pc, #460]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x204>)
 800272e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002730:	e0db      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002732:	4b73      	ldr	r3, [pc, #460]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x208>)
 8002734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002736:	e0d8      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002738:	4b6f      	ldr	r3, [pc, #444]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002740:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002742:	4b6d      	ldr	r3, [pc, #436]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d063      	beq.n	8002816 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b6a      	ldr	r3, [pc, #424]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	2200      	movs	r2, #0
 8002756:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002758:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800275a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	633b      	str	r3, [r7, #48]	@ 0x30
 8002762:	2300      	movs	r3, #0
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
 8002766:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800276a:	4622      	mov	r2, r4
 800276c:	462b      	mov	r3, r5
 800276e:	f04f 0000 	mov.w	r0, #0
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	0159      	lsls	r1, r3, #5
 8002778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277c:	0150      	lsls	r0, r2, #5
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4621      	mov	r1, r4
 8002784:	1a51      	subs	r1, r2, r1
 8002786:	6139      	str	r1, [r7, #16]
 8002788:	4629      	mov	r1, r5
 800278a:	eb63 0301 	sbc.w	r3, r3, r1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800279c:	4659      	mov	r1, fp
 800279e:	018b      	lsls	r3, r1, #6
 80027a0:	4651      	mov	r1, sl
 80027a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a6:	4651      	mov	r1, sl
 80027a8:	018a      	lsls	r2, r1, #6
 80027aa:	4651      	mov	r1, sl
 80027ac:	ebb2 0801 	subs.w	r8, r2, r1
 80027b0:	4659      	mov	r1, fp
 80027b2:	eb63 0901 	sbc.w	r9, r3, r1
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ca:	4690      	mov	r8, r2
 80027cc:	4699      	mov	r9, r3
 80027ce:	4623      	mov	r3, r4
 80027d0:	eb18 0303 	adds.w	r3, r8, r3
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	462b      	mov	r3, r5
 80027d8:	eb49 0303 	adc.w	r3, r9, r3
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027ea:	4629      	mov	r1, r5
 80027ec:	024b      	lsls	r3, r1, #9
 80027ee:	4621      	mov	r1, r4
 80027f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027f4:	4621      	mov	r1, r4
 80027f6:	024a      	lsls	r2, r1, #9
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027fe:	2200      	movs	r2, #0
 8002800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002802:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002804:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002808:	f7fd fd22 	bl	8000250 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4613      	mov	r3, r2
 8002812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002814:	e058      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002816:	4b38      	ldr	r3, [pc, #224]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	2200      	movs	r2, #0
 800281e:	4618      	mov	r0, r3
 8002820:	4611      	mov	r1, r2
 8002822:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002826:	623b      	str	r3, [r7, #32]
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
 800282c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002830:	4642      	mov	r2, r8
 8002832:	464b      	mov	r3, r9
 8002834:	f04f 0000 	mov.w	r0, #0
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	0159      	lsls	r1, r3, #5
 800283e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002842:	0150      	lsls	r0, r2, #5
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4641      	mov	r1, r8
 800284a:	ebb2 0a01 	subs.w	sl, r2, r1
 800284e:	4649      	mov	r1, r9
 8002850:	eb63 0b01 	sbc.w	fp, r3, r1
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002860:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002864:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002868:	ebb2 040a 	subs.w	r4, r2, sl
 800286c:	eb63 050b 	sbc.w	r5, r3, fp
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	00eb      	lsls	r3, r5, #3
 800287a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800287e:	00e2      	lsls	r2, r4, #3
 8002880:	4614      	mov	r4, r2
 8002882:	461d      	mov	r5, r3
 8002884:	4643      	mov	r3, r8
 8002886:	18e3      	adds	r3, r4, r3
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	464b      	mov	r3, r9
 800288c:	eb45 0303 	adc.w	r3, r5, r3
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800289e:	4629      	mov	r1, r5
 80028a0:	028b      	lsls	r3, r1, #10
 80028a2:	4621      	mov	r1, r4
 80028a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a8:	4621      	mov	r1, r4
 80028aa:	028a      	lsls	r2, r1, #10
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b2:	2200      	movs	r2, #0
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	61fa      	str	r2, [r7, #28]
 80028b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028bc:	f7fd fcc8 	bl	8000250 <__aeabi_uldivmod>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4613      	mov	r3, r2
 80028c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	0c1b      	lsrs	r3, r3, #16
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	3301      	adds	r3, #1
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e2:	e002      	b.n	80028ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b05      	ldr	r3, [pc, #20]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x204>)
 80028e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3750      	adds	r7, #80	@ 0x50
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	00f42400 	.word	0x00f42400
 8002900:	007a1200 	.word	0x007a1200

08002904 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b03      	ldr	r3, [pc, #12]	@ (8002918 <HAL_RCC_GetHCLKFreq+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000000 	.word	0x20000000

0800291c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002920:	f7ff fff0 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0a9b      	lsrs	r3, r3, #10
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4903      	ldr	r1, [pc, #12]	@ (8002940 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40023800 	.word	0x40023800
 8002940:	08008074 	.word	0x08008074

08002944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002948:	f7ff ffdc 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 800294c:	4602      	mov	r2, r0
 800294e:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	0b5b      	lsrs	r3, r3, #13
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	4903      	ldr	r1, [pc, #12]	@ (8002968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800295a:	5ccb      	ldrb	r3, [r1, r3]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40023800 	.word	0x40023800
 8002968:	08008074 	.word	0x08008074

0800296c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	220f      	movs	r2, #15
 800297a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800297c:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_RCC_GetClockConfig+0x5c>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <HAL_RCC_GetClockConfig+0x5c>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029a0:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_RCC_GetClockConfig+0x5c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	08db      	lsrs	r3, r3, #3
 80029a6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029ae:	4b07      	ldr	r3, [pc, #28]	@ (80029cc <HAL_RCC_GetClockConfig+0x60>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 020f 	and.w	r2, r3, #15
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40023c00 	.word	0x40023c00

080029d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029f8:	4b69      	ldr	r3, [pc, #420]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a68      	ldr	r2, [pc, #416]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a02:	6093      	str	r3, [r2, #8]
 8002a04:	4b66      	ldr	r3, [pc, #408]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0c:	4964      	ldr	r1, [pc, #400]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d017      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a30:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a38:	4959      	ldr	r1, [pc, #356]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a48:	d101      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d017      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a66:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	494a      	ldr	r1, [pc, #296]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a84:	d101      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a86:	2301      	movs	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 808b 	beq.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	4a39      	ldr	r2, [pc, #228]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac0:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002acc:	4b35      	ldr	r3, [pc, #212]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a34      	ldr	r2, [pc, #208]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fa90 	bl	8000ffc <HAL_GetTick>
 8002adc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe fa8c 	bl	8000ffc <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	@ 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e38f      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002af2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002afe:	4b28      	ldr	r3, [pc, #160]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d035      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d02e      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b1c:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b44:	4b16      	ldr	r3, [pc, #88]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d114      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fa54 	bl	8000ffc <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe fa50 	bl	8000ffc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e351      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ee      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b86:	d111      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b94:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b96:	400b      	ands	r3, r1
 8002b98:	4901      	ldr	r1, [pc, #4]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	0ffffcff 	.word	0x0ffffcff
 8002bac:	4bac      	ldr	r3, [pc, #688]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	4aab      	ldr	r2, [pc, #684]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002bb6:	6093      	str	r3, [r2, #8]
 8002bb8:	4ba9      	ldr	r3, [pc, #676]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc4:	49a6      	ldr	r1, [pc, #664]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d010      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bd6:	4ba2      	ldr	r3, [pc, #648]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bdc:	4aa0      	ldr	r2, [pc, #640]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002be2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002be6:	4b9e      	ldr	r3, [pc, #632]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf0:	499b      	ldr	r1, [pc, #620]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c04:	4b96      	ldr	r3, [pc, #600]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c12:	4993      	ldr	r1, [pc, #588]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c26:	4b8e      	ldr	r3, [pc, #568]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c34:	498a      	ldr	r1, [pc, #552]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c48:	4b85      	ldr	r3, [pc, #532]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c56:	4982      	ldr	r1, [pc, #520]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c6a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c70:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	4979      	ldr	r1, [pc, #484]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c8c:	4b74      	ldr	r3, [pc, #464]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c92:	f023 0203 	bic.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	4971      	ldr	r1, [pc, #452]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cae:	4b6c      	ldr	r3, [pc, #432]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb4:	f023 020c 	bic.w	r2, r3, #12
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cbc:	4968      	ldr	r1, [pc, #416]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cd0:	4b63      	ldr	r3, [pc, #396]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cde:	4960      	ldr	r1, [pc, #384]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d00:	4957      	ldr	r1, [pc, #348]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d14:	4b52      	ldr	r3, [pc, #328]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d22:	494f      	ldr	r1, [pc, #316]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d36:	4b4a      	ldr	r3, [pc, #296]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d44:	4946      	ldr	r1, [pc, #280]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d58:	4b41      	ldr	r3, [pc, #260]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	493e      	ldr	r1, [pc, #248]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d88:	4935      	ldr	r1, [pc, #212]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d9c:	4b30      	ldr	r3, [pc, #192]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002daa:	492d      	ldr	r1, [pc, #180]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d011      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002dbe:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dcc:	4924      	ldr	r1, [pc, #144]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dfe:	4b18      	ldr	r3, [pc, #96]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0c:	4914      	ldr	r1, [pc, #80]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e20:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e30:	490b      	ldr	r1, [pc, #44]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00f      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e44:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e54:	4902      	ldr	r1, [pc, #8]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e5c:	e002      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e70:	4b8a      	ldr	r3, [pc, #552]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e80:	4986      	ldr	r1, [pc, #536]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e94:	4b81      	ldr	r3, [pc, #516]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e9a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea4:	497d      	ldr	r1, [pc, #500]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d006      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80d6 	beq.w	800306c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ec0:	4b76      	ldr	r3, [pc, #472]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a75      	ldr	r2, [pc, #468]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ecc:	f7fe f896 	bl	8000ffc <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ed4:	f7fe f892 	bl	8000ffc <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b64      	cmp	r3, #100	@ 0x64
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e195      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d021      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d11d      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f06:	4b65      	ldr	r3, [pc, #404]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f14:	4b61      	ldr	r3, [pc, #388]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f1a:	0e1b      	lsrs	r3, r3, #24
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	019a      	lsls	r2, r3, #6
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	041b      	lsls	r3, r3, #16
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	071b      	lsls	r3, r3, #28
 8002f3a:	4958      	ldr	r1, [pc, #352]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d004      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02e      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f6c:	d129      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f7c:	4b47      	ldr	r3, [pc, #284]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f82:	0f1b      	lsrs	r3, r3, #28
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	019a      	lsls	r2, r3, #6
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	061b      	lsls	r3, r3, #24
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	493e      	ldr	r1, [pc, #248]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002faa:	4b3c      	ldr	r3, [pc, #240]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fb0:	f023 021f 	bic.w	r2, r3, #31
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	4938      	ldr	r1, [pc, #224]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01d      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fce:	4b33      	ldr	r3, [pc, #204]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe2:	0f1b      	lsrs	r3, r3, #28
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	019a      	lsls	r2, r3, #6
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	071b      	lsls	r3, r3, #28
 8003002:	4926      	ldr	r1, [pc, #152]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d011      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	019a      	lsls	r2, r3, #6
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	071b      	lsls	r3, r3, #28
 8003032:	491a      	ldr	r1, [pc, #104]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800303a:	4b18      	ldr	r3, [pc, #96]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a17      	ldr	r2, [pc, #92]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003040:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003046:	f7fd ffd9 	bl	8000ffc <HAL_GetTick>
 800304a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800304e:	f7fd ffd5 	bl	8000ffc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	@ 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0d8      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003060:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b01      	cmp	r3, #1
 8003070:	f040 80ce 	bne.w	8003210 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003074:	4b09      	ldr	r3, [pc, #36]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a08      	ldr	r2, [pc, #32]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800307e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003080:	f7fd ffbc 	bl	8000ffc <HAL_GetTick>
 8003084:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003086:	e00b      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003088:	f7fd ffb8 	bl	8000ffc <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	@ 0x64
 8003094:	d904      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e0bb      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800309a:	bf00      	nop
 800309c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030a0:	4b5e      	ldr	r3, [pc, #376]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030ac:	d0ec      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02e      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d12a      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030d6:	4b51      	ldr	r3, [pc, #324]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030dc:	0c1b      	lsrs	r3, r3, #16
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030e4:	4b4d      	ldr	r3, [pc, #308]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ea:	0f1b      	lsrs	r3, r3, #28
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	019a      	lsls	r2, r3, #6
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	041b      	lsls	r3, r3, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	061b      	lsls	r3, r3, #24
 8003104:	431a      	orrs	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	071b      	lsls	r3, r3, #28
 800310a:	4944      	ldr	r1, [pc, #272]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003112:	4b42      	ldr	r3, [pc, #264]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003118:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	493d      	ldr	r1, [pc, #244]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d022      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800313c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003140:	d11d      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003142:	4b36      	ldr	r3, [pc, #216]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	0e1b      	lsrs	r3, r3, #24
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003150:	4b32      	ldr	r3, [pc, #200]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	0f1b      	lsrs	r3, r3, #28
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	019a      	lsls	r2, r3, #6
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	071b      	lsls	r3, r3, #28
 8003176:	4929      	ldr	r1, [pc, #164]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d028      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800318a:	4b24      	ldr	r3, [pc, #144]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003190:	0e1b      	lsrs	r3, r3, #24
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003198:	4b20      	ldr	r3, [pc, #128]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319e:	0c1b      	lsrs	r3, r3, #16
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	019a      	lsls	r2, r3, #6
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	431a      	orrs	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	071b      	lsls	r3, r3, #28
 80031be:	4917      	ldr	r1, [pc, #92]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031c6:	4b15      	ldr	r3, [pc, #84]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	4911      	ldr	r1, [pc, #68]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0e      	ldr	r2, [pc, #56]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e8:	f7fd ff08 	bl	8000ffc <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031f0:	f7fd ff04 	bl	8000ffc <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e007      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003202:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800320a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800320e:	d1ef      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800

08003220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e049      	b.n	80032c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f841 	bl	80032ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3304      	adds	r3, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f000 f9e8 	bl	8003634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d001      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e054      	b.n	80033a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a26      	ldr	r2, [pc, #152]	@ (80033b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d01d      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	@ (80033b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	@ (80033bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1e      	ldr	r2, [pc, #120]	@ (80033c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1c      	ldr	r2, [pc, #112]	@ (80033c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x80>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1b      	ldr	r2, [pc, #108]	@ (80033cc <HAL_TIM_Base_Start_IT+0xe8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d115      	bne.n	8003390 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <HAL_TIM_Base_Start_IT+0xec>)
 800336c:	4013      	ands	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b06      	cmp	r3, #6
 8003374:	d015      	beq.n	80033a2 <HAL_TIM_Base_Start_IT+0xbe>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337c:	d011      	beq.n	80033a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	e008      	b.n	80033a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e000      	b.n	80033a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	40010400 	.word	0x40010400
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40001800 	.word	0x40001800
 80033d0:	00010007 	.word	0x00010007

080033d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d020      	beq.n	8003438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01b      	beq.n	8003438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0202 	mvn.w	r2, #2
 8003408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8e9 	bl	80035f6 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8db 	bl	80035e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f8ec 	bl	800360a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d020      	beq.n	8003484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0204 	mvn.w	r2, #4
 8003454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8c3 	bl	80035f6 <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8b5 	bl	80035e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f8c6 	bl	800360a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d020      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0208 	mvn.w	r2, #8
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2204      	movs	r2, #4
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	f003 0303 	and.w	r3, r3, #3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f89d 	bl	80035f6 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f88f 	bl	80035e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f8a0 	bl	800360a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d020      	beq.n	800351c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0210 	mvn.w	r2, #16
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2208      	movs	r2, #8
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f877 	bl	80035f6 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f869 	bl	80035e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f87a 	bl	800360a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0201 	mvn.w	r2, #1
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fa92 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f913 	bl	8003794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	d007      	beq.n	8003592 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800358a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f90b 	bl	80037a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 f834 	bl	800361e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00c      	beq.n	80035da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f06f 0220 	mvn.w	r2, #32
 80035d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f8d3 	bl	8003780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
	...

08003634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a43      	ldr	r2, [pc, #268]	@ (8003754 <TIM_Base_SetConfig+0x120>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003652:	d00f      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a40      	ldr	r2, [pc, #256]	@ (8003758 <TIM_Base_SetConfig+0x124>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d00b      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a3f      	ldr	r2, [pc, #252]	@ (800375c <TIM_Base_SetConfig+0x128>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3e      	ldr	r2, [pc, #248]	@ (8003760 <TIM_Base_SetConfig+0x12c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a3d      	ldr	r2, [pc, #244]	@ (8003764 <TIM_Base_SetConfig+0x130>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d108      	bne.n	8003686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a32      	ldr	r2, [pc, #200]	@ (8003754 <TIM_Base_SetConfig+0x120>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d02b      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003694:	d027      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2f      	ldr	r2, [pc, #188]	@ (8003758 <TIM_Base_SetConfig+0x124>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d023      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2e      	ldr	r2, [pc, #184]	@ (800375c <TIM_Base_SetConfig+0x128>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01f      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003760 <TIM_Base_SetConfig+0x12c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d01b      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <TIM_Base_SetConfig+0x130>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d017      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003768 <TIM_Base_SetConfig+0x134>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2a      	ldr	r2, [pc, #168]	@ (800376c <TIM_Base_SetConfig+0x138>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00f      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a29      	ldr	r2, [pc, #164]	@ (8003770 <TIM_Base_SetConfig+0x13c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a28      	ldr	r2, [pc, #160]	@ (8003774 <TIM_Base_SetConfig+0x140>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a27      	ldr	r2, [pc, #156]	@ (8003778 <TIM_Base_SetConfig+0x144>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a26      	ldr	r2, [pc, #152]	@ (800377c <TIM_Base_SetConfig+0x148>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0e      	ldr	r2, [pc, #56]	@ (8003754 <TIM_Base_SetConfig+0x120>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_Base_SetConfig+0xf2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a10      	ldr	r2, [pc, #64]	@ (8003764 <TIM_Base_SetConfig+0x130>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d103      	bne.n	800372e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f043 0204 	orr.w	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]
}
 8003746:	bf00      	nop
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	40000400 	.word	0x40000400
 800375c:	40000800 	.word	0x40000800
 8003760:	40000c00 	.word	0x40000c00
 8003764:	40010400 	.word	0x40010400
 8003768:	40014000 	.word	0x40014000
 800376c:	40014400 	.word	0x40014400
 8003770:	40014800 	.word	0x40014800
 8003774:	40001800 	.word	0x40001800
 8003778:	40001c00 	.word	0x40001c00
 800377c:	40002000 	.word	0x40002000

08003780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e040      	b.n	8003850 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fa38 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	@ 0x24
 80037e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0201 	bic.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fb16 	bl	8003e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8af 	bl	800396c <UART_SetConfig>
 800380e:	4603      	mov	r3, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e01b      	b.n	8003850 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fb95 	bl	8003f78 <UART_CheckIdleState>
 800384e:	4603      	mov	r3, r0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	@ 0x28
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800386c:	2b20      	cmp	r3, #32
 800386e:	d177      	bne.n	8003960 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_UART_Transmit+0x24>
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e070      	b.n	8003962 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2221      	movs	r2, #33	@ 0x21
 800388c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388e:	f7fd fbb5 	bl	8000ffc <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ac:	d108      	bne.n	80038c0 <HAL_UART_Transmit+0x68>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d104      	bne.n	80038c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e003      	b.n	80038c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038c8:	e02f      	b.n	800392a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2180      	movs	r1, #128	@ 0x80
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fbf7 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2220      	movs	r2, #32
 80038e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e03b      	b.n	8003962 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	3302      	adds	r3, #2
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	e007      	b.n	8003918 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3301      	adds	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1c9      	bne.n	80038ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2200      	movs	r2, #0
 800393e:	2140      	movs	r1, #64	@ 0x40
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fbc1 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e005      	b.n	8003962 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4ba6      	ldr	r3, [pc, #664]	@ (8003c30 <UART_SetConfig+0x2c4>)
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6812      	ldr	r2, [r2, #0]
 800399e:	6979      	ldr	r1, [r7, #20]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a94      	ldr	r2, [pc, #592]	@ (8003c34 <UART_SetConfig+0x2c8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d120      	bne.n	8003a2a <UART_SetConfig+0xbe>
 80039e8:	4b93      	ldr	r3, [pc, #588]	@ (8003c38 <UART_SetConfig+0x2cc>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d816      	bhi.n	8003a24 <UART_SetConfig+0xb8>
 80039f6:	a201      	add	r2, pc, #4	@ (adr r2, 80039fc <UART_SetConfig+0x90>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a19 	.word	0x08003a19
 8003a04:	08003a13 	.word	0x08003a13
 8003a08:	08003a1f 	.word	0x08003a1f
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e150      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a12:	2302      	movs	r3, #2
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e14d      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e14a      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e147      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a24:	2310      	movs	r3, #16
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e144      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a83      	ldr	r2, [pc, #524]	@ (8003c3c <UART_SetConfig+0x2d0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d132      	bne.n	8003a9a <UART_SetConfig+0x12e>
 8003a34:	4b80      	ldr	r3, [pc, #512]	@ (8003c38 <UART_SetConfig+0x2cc>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d828      	bhi.n	8003a94 <UART_SetConfig+0x128>
 8003a42:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <UART_SetConfig+0xdc>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003a95 	.word	0x08003a95
 8003a50:	08003a95 	.word	0x08003a95
 8003a54:	08003a95 	.word	0x08003a95
 8003a58:	08003a89 	.word	0x08003a89
 8003a5c:	08003a95 	.word	0x08003a95
 8003a60:	08003a95 	.word	0x08003a95
 8003a64:	08003a95 	.word	0x08003a95
 8003a68:	08003a83 	.word	0x08003a83
 8003a6c:	08003a95 	.word	0x08003a95
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a95 	.word	0x08003a95
 8003a78:	08003a8f 	.word	0x08003a8f
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e118      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a82:	2302      	movs	r3, #2
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e115      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e112      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	77fb      	strb	r3, [r7, #31]
 8003a92:	e10f      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a94:	2310      	movs	r3, #16
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e10c      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a68      	ldr	r2, [pc, #416]	@ (8003c40 <UART_SetConfig+0x2d4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d120      	bne.n	8003ae6 <UART_SetConfig+0x17a>
 8003aa4:	4b64      	ldr	r3, [pc, #400]	@ (8003c38 <UART_SetConfig+0x2cc>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003aae:	2b30      	cmp	r3, #48	@ 0x30
 8003ab0:	d013      	beq.n	8003ada <UART_SetConfig+0x16e>
 8003ab2:	2b30      	cmp	r3, #48	@ 0x30
 8003ab4:	d814      	bhi.n	8003ae0 <UART_SetConfig+0x174>
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d009      	beq.n	8003ace <UART_SetConfig+0x162>
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d810      	bhi.n	8003ae0 <UART_SetConfig+0x174>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <UART_SetConfig+0x15c>
 8003ac2:	2b10      	cmp	r3, #16
 8003ac4:	d006      	beq.n	8003ad4 <UART_SetConfig+0x168>
 8003ac6:	e00b      	b.n	8003ae0 <UART_SetConfig+0x174>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e0f2      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e0ef      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e0ec      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003ada:	2308      	movs	r3, #8
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e0e9      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e0e6      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a56      	ldr	r2, [pc, #344]	@ (8003c44 <UART_SetConfig+0x2d8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d120      	bne.n	8003b32 <UART_SetConfig+0x1c6>
 8003af0:	4b51      	ldr	r3, [pc, #324]	@ (8003c38 <UART_SetConfig+0x2cc>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003afa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003afc:	d013      	beq.n	8003b26 <UART_SetConfig+0x1ba>
 8003afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b00:	d814      	bhi.n	8003b2c <UART_SetConfig+0x1c0>
 8003b02:	2b80      	cmp	r3, #128	@ 0x80
 8003b04:	d009      	beq.n	8003b1a <UART_SetConfig+0x1ae>
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d810      	bhi.n	8003b2c <UART_SetConfig+0x1c0>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <UART_SetConfig+0x1a8>
 8003b0e:	2b40      	cmp	r3, #64	@ 0x40
 8003b10:	d006      	beq.n	8003b20 <UART_SetConfig+0x1b4>
 8003b12:	e00b      	b.n	8003b2c <UART_SetConfig+0x1c0>
 8003b14:	2300      	movs	r3, #0
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e0cc      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e0c9      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b20:	2304      	movs	r3, #4
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e0c6      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b26:	2308      	movs	r3, #8
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e0c3      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e0c0      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a44      	ldr	r2, [pc, #272]	@ (8003c48 <UART_SetConfig+0x2dc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d125      	bne.n	8003b88 <UART_SetConfig+0x21c>
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <UART_SetConfig+0x2cc>)
 8003b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b4a:	d017      	beq.n	8003b7c <UART_SetConfig+0x210>
 8003b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b50:	d817      	bhi.n	8003b82 <UART_SetConfig+0x216>
 8003b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b56:	d00b      	beq.n	8003b70 <UART_SetConfig+0x204>
 8003b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b5c:	d811      	bhi.n	8003b82 <UART_SetConfig+0x216>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <UART_SetConfig+0x1fe>
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b66:	d006      	beq.n	8003b76 <UART_SetConfig+0x20a>
 8003b68:	e00b      	b.n	8003b82 <UART_SetConfig+0x216>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e0a1      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b70:	2302      	movs	r3, #2
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e09e      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b76:	2304      	movs	r3, #4
 8003b78:	77fb      	strb	r3, [r7, #31]
 8003b7a:	e09b      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e098      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b82:	2310      	movs	r3, #16
 8003b84:	77fb      	strb	r3, [r7, #31]
 8003b86:	e095      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8003c4c <UART_SetConfig+0x2e0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d125      	bne.n	8003bde <UART_SetConfig+0x272>
 8003b92:	4b29      	ldr	r3, [pc, #164]	@ (8003c38 <UART_SetConfig+0x2cc>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ba0:	d017      	beq.n	8003bd2 <UART_SetConfig+0x266>
 8003ba2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ba6:	d817      	bhi.n	8003bd8 <UART_SetConfig+0x26c>
 8003ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bac:	d00b      	beq.n	8003bc6 <UART_SetConfig+0x25a>
 8003bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb2:	d811      	bhi.n	8003bd8 <UART_SetConfig+0x26c>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <UART_SetConfig+0x254>
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bbc:	d006      	beq.n	8003bcc <UART_SetConfig+0x260>
 8003bbe:	e00b      	b.n	8003bd8 <UART_SetConfig+0x26c>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	77fb      	strb	r3, [r7, #31]
 8003bc4:	e076      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	77fb      	strb	r3, [r7, #31]
 8003bca:	e073      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003bcc:	2304      	movs	r3, #4
 8003bce:	77fb      	strb	r3, [r7, #31]
 8003bd0:	e070      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	77fb      	strb	r3, [r7, #31]
 8003bd6:	e06d      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003bd8:	2310      	movs	r3, #16
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e06a      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <UART_SetConfig+0x2e4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d138      	bne.n	8003c5a <UART_SetConfig+0x2ee>
 8003be8:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <UART_SetConfig+0x2cc>)
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003bf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bf6:	d017      	beq.n	8003c28 <UART_SetConfig+0x2bc>
 8003bf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bfc:	d82a      	bhi.n	8003c54 <UART_SetConfig+0x2e8>
 8003bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c02:	d00b      	beq.n	8003c1c <UART_SetConfig+0x2b0>
 8003c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c08:	d824      	bhi.n	8003c54 <UART_SetConfig+0x2e8>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <UART_SetConfig+0x2aa>
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c12:	d006      	beq.n	8003c22 <UART_SetConfig+0x2b6>
 8003c14:	e01e      	b.n	8003c54 <UART_SetConfig+0x2e8>
 8003c16:	2300      	movs	r3, #0
 8003c18:	77fb      	strb	r3, [r7, #31]
 8003c1a:	e04b      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e048      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003c22:	2304      	movs	r3, #4
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e045      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e042      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003c2e:	bf00      	nop
 8003c30:	efff69f3 	.word	0xefff69f3
 8003c34:	40011000 	.word	0x40011000
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	40004800 	.word	0x40004800
 8003c44:	40004c00 	.word	0x40004c00
 8003c48:	40005000 	.word	0x40005000
 8003c4c:	40011400 	.word	0x40011400
 8003c50:	40007800 	.word	0x40007800
 8003c54:	2310      	movs	r3, #16
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e02c      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a72      	ldr	r2, [pc, #456]	@ (8003e28 <UART_SetConfig+0x4bc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d125      	bne.n	8003cb0 <UART_SetConfig+0x344>
 8003c64:	4b71      	ldr	r3, [pc, #452]	@ (8003e2c <UART_SetConfig+0x4c0>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c6e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c72:	d017      	beq.n	8003ca4 <UART_SetConfig+0x338>
 8003c74:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003c78:	d817      	bhi.n	8003caa <UART_SetConfig+0x33e>
 8003c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c7e:	d00b      	beq.n	8003c98 <UART_SetConfig+0x32c>
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c84:	d811      	bhi.n	8003caa <UART_SetConfig+0x33e>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <UART_SetConfig+0x326>
 8003c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8e:	d006      	beq.n	8003c9e <UART_SetConfig+0x332>
 8003c90:	e00b      	b.n	8003caa <UART_SetConfig+0x33e>
 8003c92:	2300      	movs	r3, #0
 8003c94:	77fb      	strb	r3, [r7, #31]
 8003c96:	e00d      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	77fb      	strb	r3, [r7, #31]
 8003c9c:	e00a      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003c9e:	2304      	movs	r3, #4
 8003ca0:	77fb      	strb	r3, [r7, #31]
 8003ca2:	e007      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	77fb      	strb	r3, [r7, #31]
 8003ca8:	e004      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003caa:	2310      	movs	r3, #16
 8003cac:	77fb      	strb	r3, [r7, #31]
 8003cae:	e001      	b.n	8003cb4 <UART_SetConfig+0x348>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cbc:	d15b      	bne.n	8003d76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d828      	bhi.n	8003d16 <UART_SetConfig+0x3aa>
 8003cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <UART_SetConfig+0x360>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003cf9 	.word	0x08003cf9
 8003cd4:	08003d01 	.word	0x08003d01
 8003cd8:	08003d17 	.word	0x08003d17
 8003cdc:	08003d07 	.word	0x08003d07
 8003ce0:	08003d17 	.word	0x08003d17
 8003ce4:	08003d17 	.word	0x08003d17
 8003ce8:	08003d17 	.word	0x08003d17
 8003cec:	08003d0f 	.word	0x08003d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f7fe fe14 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 8003cf4:	61b8      	str	r0, [r7, #24]
        break;
 8003cf6:	e013      	b.n	8003d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf8:	f7fe fe24 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 8003cfc:	61b8      	str	r0, [r7, #24]
        break;
 8003cfe:	e00f      	b.n	8003d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d00:	4b4b      	ldr	r3, [pc, #300]	@ (8003e30 <UART_SetConfig+0x4c4>)
 8003d02:	61bb      	str	r3, [r7, #24]
        break;
 8003d04:	e00c      	b.n	8003d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d06:	f7fe fcf7 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 8003d0a:	61b8      	str	r0, [r7, #24]
        break;
 8003d0c:	e008      	b.n	8003d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d12:	61bb      	str	r3, [r7, #24]
        break;
 8003d14:	e004      	b.n	8003d20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d074      	beq.n	8003e10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	005a      	lsls	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	441a      	add	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b0f      	cmp	r3, #15
 8003d40:	d916      	bls.n	8003d70 <UART_SetConfig+0x404>
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d48:	d212      	bcs.n	8003d70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	f023 030f 	bic.w	r3, r3, #15
 8003d52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	89fb      	ldrh	r3, [r7, #14]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	89fa      	ldrh	r2, [r7, #14]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	e04f      	b.n	8003e10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	77bb      	strb	r3, [r7, #30]
 8003d74:	e04c      	b.n	8003e10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d76:	7ffb      	ldrb	r3, [r7, #31]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d828      	bhi.n	8003dce <UART_SetConfig+0x462>
 8003d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d84 <UART_SetConfig+0x418>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08003dcf 	.word	0x08003dcf
 8003d94:	08003dbf 	.word	0x08003dbf
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003dcf 	.word	0x08003dcf
 8003da0:	08003dcf 	.word	0x08003dcf
 8003da4:	08003dc7 	.word	0x08003dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da8:	f7fe fdb8 	bl	800291c <HAL_RCC_GetPCLK1Freq>
 8003dac:	61b8      	str	r0, [r7, #24]
        break;
 8003dae:	e013      	b.n	8003dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7fe fdc8 	bl	8002944 <HAL_RCC_GetPCLK2Freq>
 8003db4:	61b8      	str	r0, [r7, #24]
        break;
 8003db6:	e00f      	b.n	8003dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e30 <UART_SetConfig+0x4c4>)
 8003dba:	61bb      	str	r3, [r7, #24]
        break;
 8003dbc:	e00c      	b.n	8003dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dbe:	f7fe fc9b 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 8003dc2:	61b8      	str	r0, [r7, #24]
        break;
 8003dc4:	e008      	b.n	8003dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dca:	61bb      	str	r3, [r7, #24]
        break;
 8003dcc:	e004      	b.n	8003dd8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	77bb      	strb	r3, [r7, #30]
        break;
 8003dd6:	bf00      	nop
    }

    if (pclk != 0U)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d018      	beq.n	8003e10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	085a      	lsrs	r2, r3, #1
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	441a      	add	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b0f      	cmp	r3, #15
 8003df6:	d909      	bls.n	8003e0c <UART_SetConfig+0x4a0>
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dfe:	d205      	bcs.n	8003e0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	e001      	b.n	8003e10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40007c00 	.word	0x40007c00
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	00f42400 	.word	0x00f42400

08003e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01a      	beq.n	8003f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f32:	d10a      	bne.n	8003f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	605a      	str	r2, [r3, #4]
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b098      	sub	sp, #96	@ 0x60
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f88:	f7fd f838 	bl	8000ffc <HAL_GetTick>
 8003f8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d12e      	bne.n	8003ffa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f88c 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d021      	beq.n	8003ffa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e062      	b.n	80040c0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d149      	bne.n	800409c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004008:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004010:	2200      	movs	r2, #0
 8004012:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f856 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d03c      	beq.n	800409c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	e853 3f00 	ldrex	r3, [r3]
 800402e:	623b      	str	r3, [r7, #32]
   return(result);
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004036:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
 8004042:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004044:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004048:	e841 2300 	strex	r3, r2, [r1]
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e6      	bne.n	8004022 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	e853 3f00 	ldrex	r3, [r3]
 8004062:	60fb      	str	r3, [r7, #12]
   return(result);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004074:	61fa      	str	r2, [r7, #28]
 8004076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	69b9      	ldr	r1, [r7, #24]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	617b      	str	r3, [r7, #20]
   return(result);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e5      	bne.n	8004054 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e011      	b.n	80040c0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3758      	adds	r7, #88	@ 0x58
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d8:	e04f      	b.n	800417a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d04b      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fc ff8b 	bl	8000ffc <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e04e      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d037      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0xb2>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b80      	cmp	r3, #128	@ 0x80
 800410e:	d034      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b40      	cmp	r3, #64	@ 0x40
 8004114:	d031      	beq.n	800417a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d110      	bne.n	8004146 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2208      	movs	r2, #8
 800412a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f838 	bl	80041a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2208      	movs	r2, #8
 8004136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e029      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004154:	d111      	bne.n	800417a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800415e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f81e 	bl	80041a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2220      	movs	r2, #32
 800416a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e00f      	b.n	800419a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	69da      	ldr	r2, [r3, #28]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4013      	ands	r3, r2
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	bf0c      	ite	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	2300      	movne	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	429a      	cmp	r2, r3
 8004196:	d0a0      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b095      	sub	sp, #84	@ 0x54
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e6      	bne.n	80041aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3308      	adds	r3, #8
 80041e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3308      	adds	r3, #8
 80041fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e5      	bne.n	80041dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	2b01      	cmp	r3, #1
 8004216:	d118      	bne.n	800424a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	60bb      	str	r3, [r7, #8]
   return(result);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f023 0310 	bic.w	r3, r3, #16
 800422c:	647b      	str	r3, [r7, #68]	@ 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6979      	ldr	r1, [r7, #20]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	613b      	str	r3, [r7, #16]
   return(result);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e6      	bne.n	8004218 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800425e:	bf00      	nop
 8004260:	3754      	adds	r7, #84	@ 0x54
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800426c:	b084      	sub	sp, #16
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	f107 001c 	add.w	r0, r7, #28
 800427a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800427e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004282:	2b01      	cmp	r3, #1
 8004284:	d121      	bne.n	80042ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	4b21      	ldr	r3, [pc, #132]	@ (800431c <USB_CoreInit+0xb0>)
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fa92 	bl	80047e8 <USB_CoreReset>
 80042c4:	4603      	mov	r3, r0
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e010      	b.n	80042ec <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa86 	bl	80047e8 <USB_CoreReset>
 80042dc:	4603      	mov	r3, r0
 80042de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80042ec:	7fbb      	ldrb	r3, [r7, #30]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10b      	bne.n	800430a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f043 0206 	orr.w	r2, r3, #6
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800430a:	7bfb      	ldrb	r3, [r7, #15]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004316:	b004      	add	sp, #16
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	ffbdffbf 	.word	0xffbdffbf

08004320 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 0201 	bic.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d115      	bne.n	8004390 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004370:	200a      	movs	r0, #10
 8004372:	f7fc fe4f 	bl	8001014 <HAL_Delay>
      ms += 10U;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	330a      	adds	r3, #10
 800437a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa25 	bl	80047cc <USB_GetMode>
 8004382:	4603      	mov	r3, r0
 8004384:	2b01      	cmp	r3, #1
 8004386:	d01e      	beq.n	80043c6 <USB_SetCurrentMode+0x84>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2bc7      	cmp	r3, #199	@ 0xc7
 800438c:	d9f0      	bls.n	8004370 <USB_SetCurrentMode+0x2e>
 800438e:	e01a      	b.n	80043c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d115      	bne.n	80043c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043a2:	200a      	movs	r0, #10
 80043a4:	f7fc fe36 	bl	8001014 <HAL_Delay>
      ms += 10U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	330a      	adds	r3, #10
 80043ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fa0c 	bl	80047cc <USB_GetMode>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <USB_SetCurrentMode+0x84>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80043be:	d9f0      	bls.n	80043a2 <USB_SetCurrentMode+0x60>
 80043c0:	e001      	b.n	80043c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e005      	b.n	80043d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2bc8      	cmp	r3, #200	@ 0xc8
 80043ca:	d101      	bne.n	80043d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043dc:	b084      	sub	sp, #16
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	e009      	b.n	8004410 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3340      	adds	r3, #64	@ 0x40
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	2200      	movs	r2, #0
 8004408:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	3301      	adds	r3, #1
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b0e      	cmp	r3, #14
 8004414:	d9f2      	bls.n	80043fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004416:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11c      	bne.n	8004458 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004436:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e005      	b.n	8004464 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800446a:	461a      	mov	r2, r3
 800446c:	2300      	movs	r3, #0
 800446e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004470:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10d      	bne.n	8004494 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004480:	2100      	movs	r1, #0
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f968 	bl	8004758 <USB_SetDevSpeed>
 8004488:	e008      	b.n	800449c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800448a:	2101      	movs	r1, #1
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f963 	bl	8004758 <USB_SetDevSpeed>
 8004492:	e003      	b.n	800449c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004494:	2103      	movs	r1, #3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f95e 	bl	8004758 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800449c:	2110      	movs	r1, #16
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8fa 	bl	8004698 <USB_FlushTxFifo>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f924 	bl	80046fc <USB_FlushRxFifo>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c4:	461a      	mov	r2, r3
 80044c6:	2300      	movs	r3, #0
 80044c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044d0:	461a      	mov	r2, r3
 80044d2:	2300      	movs	r3, #0
 80044d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044dc:	461a      	mov	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e043      	b.n	8004570 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044fe:	d118      	bne.n	8004532 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10a      	bne.n	800451c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004512:	461a      	mov	r2, r3
 8004514:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	e013      	b.n	8004544 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004528:	461a      	mov	r2, r3
 800452a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e008      	b.n	8004544 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453e:	461a      	mov	r2, r3
 8004540:	2300      	movs	r3, #0
 8004542:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004550:	461a      	mov	r2, r3
 8004552:	2300      	movs	r3, #0
 8004554:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004562:	461a      	mov	r2, r3
 8004564:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004568:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3301      	adds	r3, #1
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004574:	461a      	mov	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4293      	cmp	r3, r2
 800457a:	d3b5      	bcc.n	80044e8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	e043      	b.n	800460a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004598:	d118      	bne.n	80045cc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ac:	461a      	mov	r2, r3
 80045ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e013      	b.n	80045de <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c2:	461a      	mov	r2, r3
 80045c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e008      	b.n	80045de <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fc:	461a      	mov	r2, r3
 80045fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004602:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	3301      	adds	r3, #1
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800460e:	461a      	mov	r2, r3
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4293      	cmp	r3, r2
 8004614:	d3b5      	bcc.n	8004582 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004624:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004628:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004636:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004638:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f043 0210 	orr.w	r2, r3, #16
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	4b0f      	ldr	r3, [pc, #60]	@ (8004690 <USB_DevInit+0x2b4>)
 8004652:	4313      	orrs	r3, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004658:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f043 0208 	orr.w	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800466c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004670:	2b01      	cmp	r3, #1
 8004672:	d105      	bne.n	8004680 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	4b06      	ldr	r3, [pc, #24]	@ (8004694 <USB_DevInit+0x2b8>)
 800467a:	4313      	orrs	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800468c:	b004      	add	sp, #16
 800468e:	4770      	bx	lr
 8004690:	803c3800 	.word	0x803c3800
 8004694:	40000004 	.word	0x40000004

08004698 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046b2:	d901      	bls.n	80046b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e01b      	b.n	80046f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	daf2      	bge.n	80046a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	019b      	lsls	r3, r3, #6
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046dc:	d901      	bls.n	80046e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e006      	b.n	80046f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d0f0      	beq.n	80046d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3714      	adds	r7, #20
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004714:	d901      	bls.n	800471a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e018      	b.n	800474c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	daf2      	bge.n	8004708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2210      	movs	r2, #16
 800472a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004738:	d901      	bls.n	800473e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e006      	b.n	800474c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0310 	and.w	r3, r3, #16
 8004746:	2b10      	cmp	r3, #16
 8004748:	d0f0      	beq.n	800472c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3714      	adds	r7, #20
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800478a:	b480      	push	{r7}
 800478c:	b085      	sub	sp, #20
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047a4:	f023 0303 	bic.w	r3, r3, #3
 80047a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047b8:	f043 0302 	orr.w	r3, r3, #2
 80047bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	f003 0301 	and.w	r3, r3, #1
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004800:	d901      	bls.n	8004806 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e022      	b.n	800484c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	daf2      	bge.n	80047f4 <USB_CoreReset+0xc>

  count = 10U;
 800480e:	230a      	movs	r3, #10
 8004810:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004812:	e002      	b.n	800481a <USB_CoreReset+0x32>
  {
    count--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f9      	bne.n	8004814 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004838:	d901      	bls.n	800483e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e006      	b.n	800484c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b01      	cmp	r3, #1
 8004848:	d0f0      	beq.n	800482c <USB_CoreReset+0x44>

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800485c:	bf00      	nop
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486e:	f3ef 8305 	mrs	r3, IPSR
 8004872:	60bb      	str	r3, [r7, #8]
  return(result);
 8004874:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10f      	bne.n	800489a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800487a:	f3ef 8310 	mrs	r3, PRIMASK
 800487e:	607b      	str	r3, [r7, #4]
  return(result);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d105      	bne.n	8004892 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004886:	f3ef 8311 	mrs	r3, BASEPRI
 800488a:	603b      	str	r3, [r7, #0]
  return(result);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <osKernelInitialize+0x3a>
 8004892:	4b0e      	ldr	r3, [pc, #56]	@ (80048cc <osKernelInitialize+0x64>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d103      	bne.n	80048a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800489a:	f06f 0305 	mvn.w	r3, #5
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e00c      	b.n	80048bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048a2:	4b0a      	ldr	r3, [pc, #40]	@ (80048cc <osKernelInitialize+0x64>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048aa:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <osKernelInitialize+0x64>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e002      	b.n	80048bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80048bc:	68fb      	ldr	r3, [r7, #12]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000824 	.word	0x20000824

080048d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048d6:	f3ef 8305 	mrs	r3, IPSR
 80048da:	60bb      	str	r3, [r7, #8]
  return(result);
 80048dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e2:	f3ef 8310 	mrs	r3, PRIMASK
 80048e6:	607b      	str	r3, [r7, #4]
  return(result);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048ee:	f3ef 8311 	mrs	r3, BASEPRI
 80048f2:	603b      	str	r3, [r7, #0]
  return(result);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <osKernelStart+0x3a>
 80048fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004938 <osKernelStart+0x68>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d103      	bne.n	800490a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004902:	f06f 0305 	mvn.w	r3, #5
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e010      	b.n	800492c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800490a:	4b0b      	ldr	r3, [pc, #44]	@ (8004938 <osKernelStart+0x68>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d109      	bne.n	8004926 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004912:	f7ff ffa1 	bl	8004858 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004916:	4b08      	ldr	r3, [pc, #32]	@ (8004938 <osKernelStart+0x68>)
 8004918:	2202      	movs	r2, #2
 800491a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800491c:	f001 fd02 	bl	8006324 <vTaskStartScheduler>
      stat = osOK;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e002      	b.n	800492c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004926:	f04f 33ff 	mov.w	r3, #4294967295
 800492a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800492c:	68fb      	ldr	r3, [r7, #12]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000824 	.word	0x20000824

0800493c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b090      	sub	sp, #64	@ 0x40
 8004940:	af04      	add	r7, sp, #16
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800494c:	f3ef 8305 	mrs	r3, IPSR
 8004950:	61fb      	str	r3, [r7, #28]
  return(result);
 8004952:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004954:	2b00      	cmp	r3, #0
 8004956:	f040 808f 	bne.w	8004a78 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495a:	f3ef 8310 	mrs	r3, PRIMASK
 800495e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d105      	bne.n	8004972 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004966:	f3ef 8311 	mrs	r3, BASEPRI
 800496a:	617b      	str	r3, [r7, #20]
  return(result);
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <osThreadNew+0x3e>
 8004972:	4b44      	ldr	r3, [pc, #272]	@ (8004a84 <osThreadNew+0x148>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d07e      	beq.n	8004a78 <osThreadNew+0x13c>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d07b      	beq.n	8004a78 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004980:	2380      	movs	r3, #128	@ 0x80
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004984:	2318      	movs	r3, #24
 8004986:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004988:	2300      	movs	r3, #0
 800498a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295
 8004990:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d045      	beq.n	8004a24 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <osThreadNew+0x6a>
        name = attr->name;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <osThreadNew+0x90>
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	2b38      	cmp	r3, #56	@ 0x38
 80049be:	d805      	bhi.n	80049cc <osThreadNew+0x90>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <osThreadNew+0x94>
        return (NULL);
 80049cc:	2300      	movs	r3, #0
 80049ce:	e054      	b.n	8004a7a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00e      	beq.n	8004a06 <osThreadNew+0xca>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	2b5b      	cmp	r3, #91	@ 0x5b
 80049ee:	d90a      	bls.n	8004a06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d006      	beq.n	8004a06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <osThreadNew+0xca>
        mem = 1;
 8004a00:	2301      	movs	r3, #1
 8004a02:	623b      	str	r3, [r7, #32]
 8004a04:	e010      	b.n	8004a28 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <osThreadNew+0xec>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <osThreadNew+0xec>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <osThreadNew+0xec>
          mem = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	e001      	b.n	8004a28 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d110      	bne.n	8004a50 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a36:	9202      	str	r2, [sp, #8]
 8004a38:	9301      	str	r3, [sp, #4]
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f001 fa87 	bl	8005f58 <xTaskCreateStatic>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	e013      	b.n	8004a78 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d110      	bne.n	8004a78 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	f107 0310 	add.w	r3, r7, #16
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f001 fadb 	bl	8006024 <xTaskCreate>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d001      	beq.n	8004a78 <osThreadNew+0x13c>
          hTask = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a78:	693b      	ldr	r3, [r7, #16]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3730      	adds	r7, #48	@ 0x30
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20000824 	.word	0x20000824

08004a88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a90:	f3ef 8305 	mrs	r3, IPSR
 8004a94:	613b      	str	r3, [r7, #16]
  return(result);
 8004a96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10f      	bne.n	8004abc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004aa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <osDelay+0x3c>
 8004ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae0 <osDelay+0x58>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d103      	bne.n	8004ac4 <osDelay+0x3c>
    stat = osErrorISR;
 8004abc:	f06f 0305 	mvn.w	r3, #5
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e007      	b.n	8004ad4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f001 fbf0 	bl	80062b4 <vTaskDelay>
    }
  }

  return (stat);
 8004ad4:	697b      	ldr	r3, [r7, #20]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000824 	.word	0x20000824

08004ae4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	@ 0x30
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af4:	f3ef 8305 	mrs	r3, IPSR
 8004af8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004afa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f040 8086 	bne.w	8004c0e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b02:	f3ef 8310 	mrs	r3, PRIMASK
 8004b06:	617b      	str	r3, [r7, #20]
  return(result);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d105      	bne.n	8004b1a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b12:	613b      	str	r3, [r7, #16]
  return(result);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <osSemaphoreNew+0x3e>
 8004b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c18 <osSemaphoreNew+0x134>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d075      	beq.n	8004c0e <osSemaphoreNew+0x12a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d072      	beq.n	8004c0e <osSemaphoreNew+0x12a>
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d86e      	bhi.n	8004c0e <osSemaphoreNew+0x12a>
    mem = -1;
 8004b30:	f04f 33ff 	mov.w	r3, #4294967295
 8004b34:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d015      	beq.n	8004b68 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d006      	beq.n	8004b52 <osSemaphoreNew+0x6e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b4a:	d902      	bls.n	8004b52 <osSemaphoreNew+0x6e>
        mem = 1;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	e00c      	b.n	8004b6c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d108      	bne.n	8004b6c <osSemaphoreNew+0x88>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <osSemaphoreNew+0x88>
          mem = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	e001      	b.n	8004b6c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d04c      	beq.n	8004c0e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d128      	bne.n	8004bcc <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d10a      	bne.n	8004b96 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2203      	movs	r2, #3
 8004b86:	9200      	str	r2, [sp, #0]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f000 fa31 	bl	8004ff4 <xQueueGenericCreateStatic>
 8004b92:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b94:	e005      	b.n	8004ba2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004b96:	2203      	movs	r2, #3
 8004b98:	2100      	movs	r1, #0
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	f000 fab1 	bl	8005102 <xQueueGenericCreate>
 8004ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d022      	beq.n	8004bee <osSemaphoreNew+0x10a>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01f      	beq.n	8004bee <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bb6:	f000 fb81 	bl	80052bc <xQueueGenericSend>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d016      	beq.n	8004bee <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8004bc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bc2:	f000 fff3 	bl	8005bac <vQueueDelete>
            hSemaphore = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bca:	e010      	b.n	8004bee <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d108      	bne.n	8004be4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 faf7 	bl	80051ce <xQueueCreateCountingSemaphoreStatic>
 8004be0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004be2:	e004      	b.n	8004bee <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fb2e 	bl	8005248 <xQueueCreateCountingSemaphore>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00c      	beq.n	8004c0e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <osSemaphoreNew+0x11e>
          name = attr->name;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	e001      	b.n	8004c06 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004c06:	69f9      	ldr	r1, [r7, #28]
 8004c08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c0a:	f001 f91d 	bl	8005e48 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3728      	adds	r7, #40	@ 0x28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	20000824 	.word	0x20000824

08004c1c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b088      	sub	sp, #32
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004c34:	f06f 0303 	mvn.w	r3, #3
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e04b      	b.n	8004cd4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c3c:	f3ef 8305 	mrs	r3, IPSR
 8004c40:	617b      	str	r3, [r7, #20]
  return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10f      	bne.n	8004c68 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c48:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c54:	f3ef 8311 	mrs	r3, BASEPRI
 8004c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d026      	beq.n	8004cae <osSemaphoreAcquire+0x92>
 8004c60:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce0 <osSemaphoreAcquire+0xc4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d122      	bne.n	8004cae <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004c6e:	f06f 0303 	mvn.w	r3, #3
 8004c72:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004c74:	e02d      	b.n	8004cd2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004c7a:	f107 0308 	add.w	r3, r7, #8
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2100      	movs	r1, #0
 8004c82:	69b8      	ldr	r0, [r7, #24]
 8004c84:	f000 fec8 	bl	8005a18 <xQueueReceiveFromISR>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d003      	beq.n	8004c96 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004c8e:	f06f 0302 	mvn.w	r3, #2
 8004c92:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004c94:	e01d      	b.n	8004cd2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01a      	beq.n	8004cd2 <osSemaphoreAcquire+0xb6>
 8004c9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ce4 <osSemaphoreAcquire+0xc8>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004cac:	e011      	b.n	8004cd2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004cae:	6839      	ldr	r1, [r7, #0]
 8004cb0:	69b8      	ldr	r0, [r7, #24]
 8004cb2:	f000 fd99 	bl	80057e8 <xQueueSemaphoreTake>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d00b      	beq.n	8004cd4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004cc2:	f06f 0301 	mvn.w	r3, #1
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e004      	b.n	8004cd4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004cca:	f06f 0302 	mvn.w	r3, #2
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e000      	b.n	8004cd4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004cd2:	bf00      	nop
      }
    }
  }

  return (stat);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3720      	adds	r7, #32
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000824 	.word	0x20000824
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <osSemaphoreGetCount>:
  }

  return (stat);
}

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	61bb      	str	r3, [r7, #24]
  uint32_t count;

  if (hSemaphore == NULL) {
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d102      	bne.n	8004d00 <osSemaphoreGetCount+0x18>
    count = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e01e      	b.n	8004d3e <osSemaphoreGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d00:	f3ef 8305 	mrs	r3, IPSR
 8004d04:	617b      	str	r3, [r7, #20]
  return(result);
 8004d06:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10f      	bne.n	8004d2c <osSemaphoreGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d10:	613b      	str	r3, [r7, #16]
  return(result);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <osSemaphoreGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d18:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <osSemaphoreGetCount+0x4e>
 8004d24:	4b08      	ldr	r3, [pc, #32]	@ (8004d48 <osSemaphoreGetCount+0x60>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d104      	bne.n	8004d36 <osSemaphoreGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8004d2c:	69b8      	ldr	r0, [r7, #24]
 8004d2e:	f000 ff1c 	bl	8005b6a <uxQueueMessagesWaitingFromISR>
 8004d32:	61f8      	str	r0, [r7, #28]
 8004d34:	e003      	b.n	8004d3e <osSemaphoreGetCount+0x56>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8004d36:	69b8      	ldr	r0, [r7, #24]
 8004d38:	f000 fef6 	bl	8005b28 <uxQueueMessagesWaiting>
 8004d3c:	61f8      	str	r0, [r7, #28]
  }

  return (count);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000824 	.word	0x20000824

08004d4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a07      	ldr	r2, [pc, #28]	@ (8004d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a06      	ldr	r2, [pc, #24]	@ (8004d7c <vApplicationGetIdleTaskMemory+0x30>)
 8004d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2280      	movs	r2, #128	@ 0x80
 8004d68:	601a      	str	r2, [r3, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000828 	.word	0x20000828
 8004d7c:	20000884 	.word	0x20000884

08004d80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a07      	ldr	r2, [pc, #28]	@ (8004dac <vApplicationGetTimerTaskMemory+0x2c>)
 8004d90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4a06      	ldr	r2, [pc, #24]	@ (8004db0 <vApplicationGetTimerTaskMemory+0x30>)
 8004d96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000a84 	.word	0x20000a84
 8004db0:	20000ae0 	.word	0x20000ae0

08004db4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f103 0208 	add.w	r2, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f103 0208 	add.w	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f103 0208 	add.w	r2, r3, #8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d103      	bne.n	8004e76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e00c      	b.n	8004e90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e002      	b.n	8004e84 <vListInsert+0x2e>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d2f6      	bcs.n	8004e7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	601a      	str	r2, [r3, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6892      	ldr	r2, [r2, #8]
 8004ede:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6852      	ldr	r2, [r2, #4]
 8004ee8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d103      	bne.n	8004efc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10d      	bne.n	8004f4c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	b672      	cpsid	i
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	b662      	cpsie	i
 8004f44:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f46:	bf00      	nop
 8004f48:	bf00      	nop
 8004f4a:	e7fd      	b.n	8004f48 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004f4c:	f002 fcae 	bl	80078ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	441a      	add	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	68f9      	ldr	r1, [r7, #12]
 8004f80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	441a      	add	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	22ff      	movs	r2, #255	@ 0xff
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	22ff      	movs	r2, #255	@ 0xff
 8004f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d114      	bne.n	8004fcc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01a      	beq.n	8004fe0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3310      	adds	r3, #16
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f001 fc54 	bl	800685c <xTaskRemoveFromEventList>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d012      	beq.n	8004fe0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <xQueueGenericReset+0xd4>)
 8004fbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	e009      	b.n	8004fe0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3310      	adds	r3, #16
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff feef 	bl	8004db4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3324      	adds	r3, #36	@ 0x24
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff feea 	bl	8004db4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fe0:	f002 fc9a 	bl	8007918 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fe4:	2301      	movs	r3, #1
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08e      	sub	sp, #56	@ 0x38
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
 8005000:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10d      	bne.n	8005024 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10d      	bne.n	8005046 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	b672      	cpsid	i
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	b662      	cpsie	i
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	e7fd      	b.n	8005042 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <xQueueGenericCreateStatic+0x5e>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <xQueueGenericCreateStatic+0x62>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <xQueueGenericCreateStatic+0x64>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10d      	bne.n	8005078 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005060:	b672      	cpsid	i
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	b662      	cpsie	i
 8005070:	623b      	str	r3, [r7, #32]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <xQueueGenericCreateStatic+0x90>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <xQueueGenericCreateStatic+0x94>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <xQueueGenericCreateStatic+0x96>
 8005088:	2300      	movs	r3, #0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10d      	bne.n	80050aa <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	b672      	cpsid	i
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	b662      	cpsie	i
 80050a2:	61fb      	str	r3, [r7, #28]
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop
 80050a8:	e7fd      	b.n	80050a6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050aa:	2350      	movs	r3, #80	@ 0x50
 80050ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b50      	cmp	r3, #80	@ 0x50
 80050b2:	d00d      	beq.n	80050d0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	b672      	cpsid	i
 80050ba:	f383 8811 	msr	BASEPRI, r3
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	b662      	cpsie	i
 80050c8:	61bb      	str	r3, [r7, #24]
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80050d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00d      	beq.n	80050f8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f848 	bl	8005188 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3730      	adds	r7, #48	@ 0x30
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005102:	b580      	push	{r7, lr}
 8005104:	b08a      	sub	sp, #40	@ 0x28
 8005106:	af02      	add	r7, sp, #8
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	4613      	mov	r3, r2
 800510e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10d      	bne.n	8005132 <xQueueGenericCreate+0x30>
	__asm volatile
 8005116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511a:	b672      	cpsid	i
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	b662      	cpsie	i
 800512a:	613b      	str	r3, [r7, #16]
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	e7fd      	b.n	800512e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d102      	bne.n	800513e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005138:	2300      	movs	r3, #0
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e004      	b.n	8005148 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	fb02 f303 	mul.w	r3, r2, r3
 8005146:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3350      	adds	r3, #80	@ 0x50
 800514c:	4618      	mov	r0, r3
 800514e:	f002 fcdb 	bl	8007b08 <pvPortMalloc>
 8005152:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d011      	beq.n	800517e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	3350      	adds	r3, #80	@ 0x50
 8005162:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800516c:	79fa      	ldrb	r2, [r7, #7]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	4613      	mov	r3, r2
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f805 	bl	8005188 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800517e:	69bb      	ldr	r3, [r7, #24]
	}
 8005180:	4618      	mov	r0, r3
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d103      	bne.n	80051a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e002      	b.n	80051aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051b6:	2101      	movs	r1, #1
 80051b8:	69b8      	ldr	r0, [r7, #24]
 80051ba:	f7ff feaf 	bl	8004f1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b08a      	sub	sp, #40	@ 0x28
 80051d2:	af02      	add	r7, sp, #8
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	b672      	cpsid	i
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	b662      	cpsie	i
 80051f4:	61bb      	str	r3, [r7, #24]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	429a      	cmp	r2, r3
 8005202:	d90d      	bls.n	8005220 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005208:	b672      	cpsid	i
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	b662      	cpsie	i
 8005218:	617b      	str	r3, [r7, #20]
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005220:	2302      	movs	r3, #2
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	2100      	movs	r1, #0
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f7ff fee2 	bl	8004ff4 <xQueueGenericCreateStatic>
 8005230:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800523e:	69fb      	ldr	r3, [r7, #28]
	}
 8005240:	4618      	mov	r0, r3
 8005242:	3720      	adds	r7, #32
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10d      	bne.n	8005274 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	b672      	cpsid	i
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	b662      	cpsie	i
 800526c:	613b      	str	r3, [r7, #16]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d90d      	bls.n	8005298 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	b672      	cpsid	i
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	b662      	cpsie	i
 8005290:	60fb      	str	r3, [r7, #12]
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005298:	2202      	movs	r2, #2
 800529a:	2100      	movs	r1, #0
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ff30 	bl	8005102 <xQueueGenericCreate>
 80052a2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80052b0:	697b      	ldr	r3, [r7, #20]
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08e      	sub	sp, #56	@ 0x38
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052ca:	2300      	movs	r3, #0
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10d      	bne.n	80052f4 <xQueueGenericSend+0x38>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	b672      	cpsid	i
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	b662      	cpsie	i
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	e7fd      	b.n	80052f0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <xQueueGenericSend+0x46>
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <xQueueGenericSend+0x4a>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <xQueueGenericSend+0x4c>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10d      	bne.n	8005328 <xQueueGenericSend+0x6c>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005310:	b672      	cpsid	i
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	b662      	cpsie	i
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005322:	bf00      	nop
 8005324:	bf00      	nop
 8005326:	e7fd      	b.n	8005324 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d103      	bne.n	8005336 <xQueueGenericSend+0x7a>
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <xQueueGenericSend+0x7e>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <xQueueGenericSend+0x80>
 800533a:	2300      	movs	r3, #0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10d      	bne.n	800535c <xQueueGenericSend+0xa0>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	b672      	cpsid	i
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	b662      	cpsie	i
 8005354:	623b      	str	r3, [r7, #32]
}
 8005356:	bf00      	nop
 8005358:	bf00      	nop
 800535a:	e7fd      	b.n	8005358 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800535c:	f001 fc46 	bl	8006bec <xTaskGetSchedulerState>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <xQueueGenericSend+0xb0>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <xQueueGenericSend+0xb4>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <xQueueGenericSend+0xb6>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10d      	bne.n	8005392 <xQueueGenericSend+0xd6>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	b672      	cpsid	i
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	b662      	cpsie	i
 800538a:	61fb      	str	r3, [r7, #28]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005392:	f002 fa8b 	bl	80078ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800539a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <xQueueGenericSend+0xec>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d129      	bne.n	80053fc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	68b9      	ldr	r1, [r7, #8]
 80053ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053ae:	f000 fc3b 	bl	8005c28 <prvCopyDataToQueue>
 80053b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d010      	beq.n	80053de <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053be:	3324      	adds	r3, #36	@ 0x24
 80053c0:	4618      	mov	r0, r3
 80053c2:	f001 fa4b 	bl	800685c <xTaskRemoveFromEventList>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d013      	beq.n	80053f4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053cc:	4b3f      	ldr	r3, [pc, #252]	@ (80054cc <xQueueGenericSend+0x210>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	e00a      	b.n	80053f4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053e4:	4b39      	ldr	r3, [pc, #228]	@ (80054cc <xQueueGenericSend+0x210>)
 80053e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053f4:	f002 fa90 	bl	8007918 <vPortExitCritical>
				return pdPASS;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e063      	b.n	80054c4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005402:	f002 fa89 	bl	8007918 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005406:	2300      	movs	r3, #0
 8005408:	e05c      	b.n	80054c4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800540a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fa87 	bl	8006928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800541a:	2301      	movs	r3, #1
 800541c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800541e:	f002 fa7b 	bl	8007918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005422:	f000 ffeb 	bl	80063fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005426:	f002 fa41 	bl	80078ac <vPortEnterCritical>
 800542a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005430:	b25b      	sxtb	r3, r3
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d103      	bne.n	8005440 <xQueueGenericSend+0x184>
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005446:	b25b      	sxtb	r3, r3
 8005448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544c:	d103      	bne.n	8005456 <xQueueGenericSend+0x19a>
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005456:	f002 fa5f 	bl	8007918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800545a:	1d3a      	adds	r2, r7, #4
 800545c:	f107 0314 	add.w	r3, r7, #20
 8005460:	4611      	mov	r1, r2
 8005462:	4618      	mov	r0, r3
 8005464:	f001 fa76 	bl	8006954 <xTaskCheckForTimeOut>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d124      	bne.n	80054b8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800546e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005470:	f000 fcd2 	bl	8005e18 <prvIsQueueFull>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d018      	beq.n	80054ac <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	3310      	adds	r3, #16
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4611      	mov	r1, r2
 8005482:	4618      	mov	r0, r3
 8005484:	f001 f994 	bl	80067b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005488:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800548a:	f000 fc5d 	bl	8005d48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800548e:	f000 ffc3 	bl	8006418 <xTaskResumeAll>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	f47f af7c 	bne.w	8005392 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800549a:	4b0c      	ldr	r3, [pc, #48]	@ (80054cc <xQueueGenericSend+0x210>)
 800549c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	e772      	b.n	8005392 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054ae:	f000 fc4b 	bl	8005d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054b2:	f000 ffb1 	bl	8006418 <xTaskResumeAll>
 80054b6:	e76c      	b.n	8005392 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054ba:	f000 fc45 	bl	8005d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054be:	f000 ffab 	bl	8006418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3738      	adds	r7, #56	@ 0x38
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b08e      	sub	sp, #56	@ 0x38
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
 80054dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ec:	b672      	cpsid	i
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	b662      	cpsie	i
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <xQueueGenericSendFromISR+0x42>
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <xQueueGenericSendFromISR+0x46>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueGenericSendFromISR+0x48>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10d      	bne.n	8005538 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	b672      	cpsid	i
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	b662      	cpsie	i
 8005530:	623b      	str	r3, [r7, #32]
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d103      	bne.n	8005546 <xQueueGenericSendFromISR+0x76>
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <xQueueGenericSendFromISR+0x7a>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <xQueueGenericSendFromISR+0x7c>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10d      	bne.n	800556c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	b672      	cpsid	i
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	b662      	cpsie	i
 8005564:	61fb      	str	r3, [r7, #28]
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800556c:	f002 fa86 	bl	8007a7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005570:	f3ef 8211 	mrs	r2, BASEPRI
 8005574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005578:	b672      	cpsid	i
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	b662      	cpsie	i
 8005588:	61ba      	str	r2, [r7, #24]
 800558a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800558c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800558e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <xQueueGenericSendFromISR+0xd2>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d12c      	bne.n	80055fc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055b2:	f000 fb39 	bl	8005c28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055b6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d112      	bne.n	80055e6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d016      	beq.n	80055f6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	3324      	adds	r3, #36	@ 0x24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f945 	bl	800685c <xTaskRemoveFromEventList>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e007      	b.n	80055f6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055ea:	3301      	adds	r3, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	b25a      	sxtb	r2, r3
 80055f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80055f6:	2301      	movs	r3, #1
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80055fa:	e001      	b.n	8005600 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800560a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800560c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800560e:	4618      	mov	r0, r3
 8005610:	3738      	adds	r7, #56	@ 0x38
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08c      	sub	sp, #48	@ 0x30
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005624:	2300      	movs	r3, #0
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10d      	bne.n	800564e <xQueueReceive+0x36>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	b672      	cpsid	i
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	b662      	cpsie	i
 8005646:	623b      	str	r3, [r7, #32]
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	e7fd      	b.n	800564a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <xQueueReceive+0x44>
 8005654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <xQueueReceive+0x48>
 800565c:	2301      	movs	r3, #1
 800565e:	e000      	b.n	8005662 <xQueueReceive+0x4a>
 8005660:	2300      	movs	r3, #0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <xQueueReceive+0x6a>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566a:	b672      	cpsid	i
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	b662      	cpsie	i
 800567a:	61fb      	str	r3, [r7, #28]
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	e7fd      	b.n	800567e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005682:	f001 fab3 	bl	8006bec <xTaskGetSchedulerState>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <xQueueReceive+0x7a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <xQueueReceive+0x7e>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <xQueueReceive+0x80>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10d      	bne.n	80056b8 <xQueueReceive+0xa0>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	b672      	cpsid	i
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	b662      	cpsie	i
 80056b0:	61bb      	str	r3, [r7, #24]
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056b8:	f002 f8f8 	bl	80078ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d01f      	beq.n	8005708 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056cc:	f000 fb16 	bl	8005cfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	1e5a      	subs	r2, r3, #1
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00f      	beq.n	8005700 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	3310      	adds	r3, #16
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f8b9 	bl	800685c <xTaskRemoveFromEventList>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056f0:	4b3c      	ldr	r3, [pc, #240]	@ (80057e4 <xQueueReceive+0x1cc>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005700:	f002 f90a 	bl	8007918 <vPortExitCritical>
				return pdPASS;
 8005704:	2301      	movs	r3, #1
 8005706:	e069      	b.n	80057dc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800570e:	f002 f903 	bl	8007918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005712:	2300      	movs	r3, #0
 8005714:	e062      	b.n	80057dc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005718:	2b00      	cmp	r3, #0
 800571a:	d106      	bne.n	800572a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800571c:	f107 0310 	add.w	r3, r7, #16
 8005720:	4618      	mov	r0, r3
 8005722:	f001 f901 	bl	8006928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800572a:	f002 f8f5 	bl	8007918 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800572e:	f000 fe65 	bl	80063fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005732:	f002 f8bb 	bl	80078ac <vPortEnterCritical>
 8005736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800573c:	b25b      	sxtb	r3, r3
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d103      	bne.n	800574c <xQueueReceive+0x134>
 8005744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005752:	b25b      	sxtb	r3, r3
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d103      	bne.n	8005762 <xQueueReceive+0x14a>
 800575a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005762:	f002 f8d9 	bl	8007918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005766:	1d3a      	adds	r2, r7, #4
 8005768:	f107 0310 	add.w	r3, r7, #16
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f8f0 	bl	8006954 <xTaskCheckForTimeOut>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d123      	bne.n	80057c2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800577a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800577c:	f000 fb36 	bl	8005dec <prvIsQueueEmpty>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d017      	beq.n	80057b6 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005788:	3324      	adds	r3, #36	@ 0x24
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	4611      	mov	r1, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f001 f80e 	bl	80067b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005794:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005796:	f000 fad7 	bl	8005d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800579a:	f000 fe3d 	bl	8006418 <xTaskResumeAll>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d189      	bne.n	80056b8 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80057a4:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <xQueueReceive+0x1cc>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	e780      	b.n	80056b8 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057b8:	f000 fac6 	bl	8005d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057bc:	f000 fe2c 	bl	8006418 <xTaskResumeAll>
 80057c0:	e77a      	b.n	80056b8 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057c4:	f000 fac0 	bl	8005d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057c8:	f000 fe26 	bl	8006418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057ce:	f000 fb0d 	bl	8005dec <prvIsQueueEmpty>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f43f af6f 	beq.w	80056b8 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3730      	adds	r7, #48	@ 0x30
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08e      	sub	sp, #56	@ 0x38
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10d      	bne.n	8005820 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005808:	b672      	cpsid	i
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	b662      	cpsie	i
 8005818:	623b      	str	r3, [r7, #32]
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	e7fd      	b.n	800581c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00d      	beq.n	8005844 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	b672      	cpsid	i
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	b662      	cpsie	i
 800583c:	61fb      	str	r3, [r7, #28]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005844:	f001 f9d2 	bl	8006bec <xTaskGetSchedulerState>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <xQueueSemaphoreTake+0x6c>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <xQueueSemaphoreTake+0x70>
 8005854:	2301      	movs	r3, #1
 8005856:	e000      	b.n	800585a <xQueueSemaphoreTake+0x72>
 8005858:	2300      	movs	r3, #0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10d      	bne.n	800587a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	b672      	cpsid	i
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	b662      	cpsie	i
 8005872:	61bb      	str	r3, [r7, #24]
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800587a:	f002 f817 	bl	80078ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800587e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	2b00      	cmp	r3, #0
 8005888:	d024      	beq.n	80058d4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	1e5a      	subs	r2, r3, #1
 800588e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005890:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800589a:	f001 fb29 	bl	8006ef0 <pvTaskIncrementMutexHeldCount>
 800589e:	4602      	mov	r2, r0
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00f      	beq.n	80058cc <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ae:	3310      	adds	r3, #16
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 ffd3 	bl	800685c <xTaskRemoveFromEventList>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d007      	beq.n	80058cc <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058bc:	4b55      	ldr	r3, [pc, #340]	@ (8005a14 <xQueueSemaphoreTake+0x22c>)
 80058be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058cc:	f002 f824 	bl	8007918 <vPortExitCritical>
				return pdPASS;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e09a      	b.n	8005a0a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d114      	bne.n	8005904 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00d      	beq.n	80058fc <xQueueSemaphoreTake+0x114>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e4:	b672      	cpsid	i
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	b662      	cpsie	i
 80058f4:	617b      	str	r3, [r7, #20]
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058fc:	f002 f80c 	bl	8007918 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005900:	2300      	movs	r3, #0
 8005902:	e082      	b.n	8005a0a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800590a:	f107 030c 	add.w	r3, r7, #12
 800590e:	4618      	mov	r0, r3
 8005910:	f001 f80a 	bl	8006928 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005918:	f001 fffe 	bl	8007918 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800591c:	f000 fd6e 	bl	80063fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005920:	f001 ffc4 	bl	80078ac <vPortEnterCritical>
 8005924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005926:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800592a:	b25b      	sxtb	r3, r3
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d103      	bne.n	800593a <xQueueSemaphoreTake+0x152>
 8005932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800593a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005940:	b25b      	sxtb	r3, r3
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d103      	bne.n	8005950 <xQueueSemaphoreTake+0x168>
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005950:	f001 ffe2 	bl	8007918 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005954:	463a      	mov	r2, r7
 8005956:	f107 030c 	add.w	r3, r7, #12
 800595a:	4611      	mov	r1, r2
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fff9 	bl	8006954 <xTaskCheckForTimeOut>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d132      	bne.n	80059ce <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005968:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800596a:	f000 fa3f 	bl	8005dec <prvIsQueueEmpty>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d026      	beq.n	80059c2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800597c:	f001 ff96 	bl	80078ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4618      	mov	r0, r3
 8005986:	f001 f94f 	bl	8006c28 <xTaskPriorityInherit>
 800598a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800598c:	f001 ffc4 	bl	8007918 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005992:	3324      	adds	r3, #36	@ 0x24
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	4611      	mov	r1, r2
 8005998:	4618      	mov	r0, r3
 800599a:	f000 ff09 	bl	80067b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800599e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059a0:	f000 f9d2 	bl	8005d48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059a4:	f000 fd38 	bl	8006418 <xTaskResumeAll>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f47f af65 	bne.w	800587a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80059b0:	4b18      	ldr	r3, [pc, #96]	@ (8005a14 <xQueueSemaphoreTake+0x22c>)
 80059b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	e75b      	b.n	800587a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80059c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059c4:	f000 f9c0 	bl	8005d48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059c8:	f000 fd26 	bl	8006418 <xTaskResumeAll>
 80059cc:	e755      	b.n	800587a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80059ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059d0:	f000 f9ba 	bl	8005d48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059d4:	f000 fd20 	bl	8006418 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059da:	f000 fa07 	bl	8005dec <prvIsQueueEmpty>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f43f af4a 	beq.w	800587a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00d      	beq.n	8005a08 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80059ec:	f001 ff5e 	bl	80078ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059f2:	f000 f901 	bl	8005bf8 <prvGetDisinheritPriorityAfterTimeout>
 80059f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f001 f9ee 	bl	8006de0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a04:	f001 ff88 	bl	8007918 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3738      	adds	r7, #56	@ 0x38
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	e000ed04 	.word	0xe000ed04

08005a18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08e      	sub	sp, #56	@ 0x38
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10d      	bne.n	8005a4a <xQueueReceiveFromISR+0x32>
	__asm volatile
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	b672      	cpsid	i
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	b662      	cpsie	i
 8005a42:	623b      	str	r3, [r7, #32]
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	e7fd      	b.n	8005a46 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <xQueueReceiveFromISR+0x40>
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <xQueueReceiveFromISR+0x44>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <xQueueReceiveFromISR+0x46>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10d      	bne.n	8005a7e <xQueueReceiveFromISR+0x66>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	b672      	cpsid	i
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	b662      	cpsie	i
 8005a76:	61fb      	str	r3, [r7, #28]
}
 8005a78:	bf00      	nop
 8005a7a:	bf00      	nop
 8005a7c:	e7fd      	b.n	8005a7a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a7e:	f001 fffd 	bl	8007a7c <vPortValidateInterruptPriority>
	__asm volatile
 8005a82:	f3ef 8211 	mrs	r2, BASEPRI
 8005a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8a:	b672      	cpsid	i
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	b662      	cpsie	i
 8005a9a:	61ba      	str	r2, [r7, #24]
 8005a9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02f      	beq.n	8005b0e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005abc:	f000 f91e 	bl	8005cfc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac2:	1e5a      	subs	r2, r3, #1
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d112      	bne.n	8005af8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005adc:	3310      	adds	r3, #16
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 febc 	bl	800685c <xTaskRemoveFromEventList>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00e      	beq.n	8005b08 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e007      	b.n	8005b08 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005afc:	3301      	adds	r3, #1
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	b25a      	sxtb	r2, r3
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b0c:	e001      	b.n	8005b12 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f383 8811 	msr	BASEPRI, r3
}
 8005b1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3738      	adds	r7, #56	@ 0x38
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3a:	b672      	cpsid	i
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	b662      	cpsie	i
 8005b4a:	60bb      	str	r3, [r7, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	e7fd      	b.n	8005b4e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8005b52:	f001 feab 	bl	80078ac <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005b5c:	f001 fedc 	bl	8007918 <vPortExitCritical>

	return uxReturn;
 8005b60:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b087      	sub	sp, #28
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10d      	bne.n	8005b98 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	b672      	cpsid	i
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	b662      	cpsie	i
 8005b90:	60fb      	str	r3, [r7, #12]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005b9e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10d      	bne.n	8005bda <vQueueDelete+0x2e>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	b672      	cpsid	i
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	b662      	cpsie	i
 8005bd2:	60bb      	str	r3, [r7, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	e7fd      	b.n	8005bd6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f95e 	bl	8005e9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d102      	bne.n	8005bf0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f002 f85a 	bl	8007ca4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d006      	beq.n	8005c16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e001      	b.n	8005c1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
	}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d14d      	bne.n	8005cea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f001 f850 	bl	8006cf8 <xTaskPriorityDisinherit>
 8005c58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	609a      	str	r2, [r3, #8]
 8005c60:	e043      	b.n	8005cea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d119      	bne.n	8005c9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6858      	ldr	r0, [r3, #4]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c70:	461a      	mov	r2, r3
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	f002 f95e 	bl	8007f34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	441a      	add	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d32b      	bcc.n	8005cea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	e026      	b.n	8005cea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68d8      	ldr	r0, [r3, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	f002 f944 	bl	8007f34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb4:	425b      	negs	r3, r3
 8005cb6:	441a      	add	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d207      	bcs.n	8005cd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	425b      	negs	r3, r3
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d105      	bne.n	8005cea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005cf2:	697b      	ldr	r3, [r7, #20]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d018      	beq.n	8005d40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	441a      	add	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d303      	bcc.n	8005d30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68d9      	ldr	r1, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6838      	ldr	r0, [r7, #0]
 8005d3c:	f002 f8fa 	bl	8007f34 <memcpy>
	}
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d50:	f001 fdac 	bl	80078ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d5c:	e011      	b.n	8005d82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d012      	beq.n	8005d8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3324      	adds	r3, #36	@ 0x24
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fd76 	bl	800685c <xTaskRemoveFromEventList>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d76:	f000 fe55 	bl	8006a24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	dce9      	bgt.n	8005d5e <prvUnlockQueue+0x16>
 8005d8a:	e000      	b.n	8005d8e <prvUnlockQueue+0x46>
					break;
 8005d8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	22ff      	movs	r2, #255	@ 0xff
 8005d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d96:	f001 fdbf 	bl	8007918 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d9a:	f001 fd87 	bl	80078ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005da4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005da6:	e011      	b.n	8005dcc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d012      	beq.n	8005dd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3310      	adds	r3, #16
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fd51 	bl	800685c <xTaskRemoveFromEventList>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dc0:	f000 fe30 	bl	8006a24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	dce9      	bgt.n	8005da8 <prvUnlockQueue+0x60>
 8005dd4:	e000      	b.n	8005dd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005dd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	22ff      	movs	r2, #255	@ 0xff
 8005ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005de0:	f001 fd9a 	bl	8007918 <vPortExitCritical>
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005df4:	f001 fd5a 	bl	80078ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e00:	2301      	movs	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	e001      	b.n	8005e0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e0a:	f001 fd85 	bl	8007918 <vPortExitCritical>

	return xReturn;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e20:	f001 fd44 	bl	80078ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d102      	bne.n	8005e36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e001      	b.n	8005e3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e3a:	f001 fd6d 	bl	8007918 <vPortExitCritical>

	return xReturn;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	e014      	b.n	8005e82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e58:	4a0f      	ldr	r2, [pc, #60]	@ (8005e98 <vQueueAddToRegistry+0x50>)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e64:	490c      	ldr	r1, [pc, #48]	@ (8005e98 <vQueueAddToRegistry+0x50>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e98 <vQueueAddToRegistry+0x50>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e7a:	e006      	b.n	8005e8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b07      	cmp	r3, #7
 8005e86:	d9e7      	bls.n	8005e58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	20000ee0 	.word	0x20000ee0

08005e9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e016      	b.n	8005ed8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005eaa:	4a10      	ldr	r2, [pc, #64]	@ (8005eec <vQueueUnregisterQueue+0x50>)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d10b      	bne.n	8005ed2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005eba:	4a0c      	ldr	r2, [pc, #48]	@ (8005eec <vQueueUnregisterQueue+0x50>)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ec4:	4a09      	ldr	r2, [pc, #36]	@ (8005eec <vQueueUnregisterQueue+0x50>)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	4413      	add	r3, r2
 8005ecc:	2200      	movs	r2, #0
 8005ece:	605a      	str	r2, [r3, #4]
				break;
 8005ed0:	e006      	b.n	8005ee0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b07      	cmp	r3, #7
 8005edc:	d9e5      	bls.n	8005eaa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	20000ee0 	.word	0x20000ee0

08005ef0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f00:	f001 fcd4 	bl	80078ac <vPortEnterCritical>
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f0a:	b25b      	sxtb	r3, r3
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f10:	d103      	bne.n	8005f1a <vQueueWaitForMessageRestricted+0x2a>
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f20:	b25b      	sxtb	r3, r3
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d103      	bne.n	8005f30 <vQueueWaitForMessageRestricted+0x40>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f30:	f001 fcf2 	bl	8007918 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	3324      	adds	r3, #36	@ 0x24
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fc5b 	bl	8006800 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f7ff fefc 	bl	8005d48 <prvUnlockQueue>
	}
 8005f50:	bf00      	nop
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08e      	sub	sp, #56	@ 0x38
 8005f5c:	af04      	add	r7, sp, #16
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10d      	bne.n	8005f88 <xTaskCreateStatic+0x30>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f70:	b672      	cpsid	i
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	b662      	cpsie	i
 8005f80:	623b      	str	r3, [r7, #32]
}
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <xTaskCreateStatic+0x52>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f92:	b672      	cpsid	i
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	b662      	cpsie	i
 8005fa2:	61fb      	str	r3, [r7, #28]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005faa:	235c      	movs	r3, #92	@ 0x5c
 8005fac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005fb2:	d00d      	beq.n	8005fd0 <xTaskCreateStatic+0x78>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb8:	b672      	cpsid	i
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	b662      	cpsie	i
 8005fc8:	61bb      	str	r3, [r7, #24]
}
 8005fca:	bf00      	nop
 8005fcc:	bf00      	nop
 8005fce:	e7fd      	b.n	8005fcc <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005fd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d01e      	beq.n	8006016 <xTaskCreateStatic+0xbe>
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01b      	beq.n	8006016 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005fe6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	9303      	str	r3, [sp, #12]
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	9302      	str	r3, [sp, #8]
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f850 	bl	80060ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800600e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006010:	f000 f8e0 	bl	80061d4 <prvAddNewTaskToReadyList>
 8006014:	e001      	b.n	800601a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800601a:	697b      	ldr	r3, [r7, #20]
	}
 800601c:	4618      	mov	r0, r3
 800601e:	3728      	adds	r7, #40	@ 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	@ 0x30
 8006028:	af04      	add	r7, sp, #16
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4618      	mov	r0, r3
 800603a:	f001 fd65 	bl	8007b08 <pvPortMalloc>
 800603e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00e      	beq.n	8006064 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006046:	205c      	movs	r0, #92	@ 0x5c
 8006048:	f001 fd5e 	bl	8007b08 <pvPortMalloc>
 800604c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	631a      	str	r2, [r3, #48]	@ 0x30
 800605a:	e005      	b.n	8006068 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800605c:	6978      	ldr	r0, [r7, #20]
 800605e:	f001 fe21 	bl	8007ca4 <vPortFree>
 8006062:	e001      	b.n	8006068 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d017      	beq.n	800609e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	2300      	movs	r3, #0
 800607a:	9303      	str	r3, [sp, #12]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	9302      	str	r3, [sp, #8]
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68b9      	ldr	r1, [r7, #8]
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f000 f80e 	bl	80060ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006092:	69f8      	ldr	r0, [r7, #28]
 8006094:	f000 f89e 	bl	80061d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006098:	2301      	movs	r3, #1
 800609a:	61bb      	str	r3, [r7, #24]
 800609c:	e002      	b.n	80060a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800609e:	f04f 33ff 	mov.w	r3, #4294967295
 80060a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060a4:	69bb      	ldr	r3, [r7, #24]
	}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b088      	sub	sp, #32
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	461a      	mov	r2, r3
 80060c6:	21a5      	movs	r1, #165	@ 0xa5
 80060c8:	f001 ff08 	bl	8007edc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80060d6:	440b      	add	r3, r1
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f023 0307 	bic.w	r3, r3, #7
 80060e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <prvInitialiseNewTask+0x5e>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	b672      	cpsid	i
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	b662      	cpsie	i
 8006104:	617b      	str	r3, [r7, #20]
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01f      	beq.n	8006152 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	e012      	b.n	800613e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	7819      	ldrb	r1, [r3, #0]
 8006120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	3334      	adds	r3, #52	@ 0x34
 8006128:	460a      	mov	r2, r1
 800612a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	4413      	add	r3, r2
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d006      	beq.n	8006146 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	3301      	adds	r3, #1
 800613c:	61fb      	str	r3, [r7, #28]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	2b0f      	cmp	r3, #15
 8006142:	d9e9      	bls.n	8006118 <prvInitialiseNewTask+0x6a>
 8006144:	e000      	b.n	8006148 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006146:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006150:	e003      	b.n	800615a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	2b37      	cmp	r3, #55	@ 0x37
 800615e:	d901      	bls.n	8006164 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006160:	2337      	movs	r3, #55	@ 0x37
 8006162:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006168:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800616a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800616e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006172:	2200      	movs	r2, #0
 8006174:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	3304      	adds	r3, #4
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fe3a 	bl	8004df4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	3318      	adds	r3, #24
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fe35 	bl	8004df4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800618e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006192:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800619e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	2200      	movs	r2, #0
 80061a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	69b8      	ldr	r0, [r7, #24]
 80061b4:	f001 fa6c 	bl	8007690 <pxPortInitialiseStack>
 80061b8:	4602      	mov	r2, r0
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80061be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ca:	bf00      	nop
 80061cc:	3720      	adds	r7, #32
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80061dc:	f001 fb66 	bl	80078ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80061e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <prvAddNewTaskToReadyList+0xc4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3301      	adds	r3, #1
 80061e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006298 <prvAddNewTaskToReadyList+0xc4>)
 80061e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80061ea:	4b2c      	ldr	r3, [pc, #176]	@ (800629c <prvAddNewTaskToReadyList+0xc8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d109      	bne.n	8006206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061f2:	4a2a      	ldr	r2, [pc, #168]	@ (800629c <prvAddNewTaskToReadyList+0xc8>)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061f8:	4b27      	ldr	r3, [pc, #156]	@ (8006298 <prvAddNewTaskToReadyList+0xc4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d110      	bne.n	8006222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006200:	f000 fc34 	bl	8006a6c <prvInitialiseTaskLists>
 8006204:	e00d      	b.n	8006222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006206:	4b26      	ldr	r3, [pc, #152]	@ (80062a0 <prvAddNewTaskToReadyList+0xcc>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800620e:	4b23      	ldr	r3, [pc, #140]	@ (800629c <prvAddNewTaskToReadyList+0xc8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006218:	429a      	cmp	r2, r3
 800621a:	d802      	bhi.n	8006222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800621c:	4a1f      	ldr	r2, [pc, #124]	@ (800629c <prvAddNewTaskToReadyList+0xc8>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006222:	4b20      	ldr	r3, [pc, #128]	@ (80062a4 <prvAddNewTaskToReadyList+0xd0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3301      	adds	r3, #1
 8006228:	4a1e      	ldr	r2, [pc, #120]	@ (80062a4 <prvAddNewTaskToReadyList+0xd0>)
 800622a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800622c:	4b1d      	ldr	r3, [pc, #116]	@ (80062a4 <prvAddNewTaskToReadyList+0xd0>)
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <prvAddNewTaskToReadyList+0xd4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d903      	bls.n	8006248 <prvAddNewTaskToReadyList+0x74>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a18      	ldr	r2, [pc, #96]	@ (80062a8 <prvAddNewTaskToReadyList+0xd4>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4a15      	ldr	r2, [pc, #84]	@ (80062ac <prvAddNewTaskToReadyList+0xd8>)
 8006256:	441a      	add	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f7fe fdd5 	bl	8004e0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006264:	f001 fb58 	bl	8007918 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006268:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <prvAddNewTaskToReadyList+0xcc>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00e      	beq.n	800628e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006270:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <prvAddNewTaskToReadyList+0xc8>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	429a      	cmp	r2, r3
 800627c:	d207      	bcs.n	800628e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800627e:	4b0c      	ldr	r3, [pc, #48]	@ (80062b0 <prvAddNewTaskToReadyList+0xdc>)
 8006280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	200013f4 	.word	0x200013f4
 800629c:	20000f20 	.word	0x20000f20
 80062a0:	20001400 	.word	0x20001400
 80062a4:	20001410 	.word	0x20001410
 80062a8:	200013fc 	.word	0x200013fc
 80062ac:	20000f24 	.word	0x20000f24
 80062b0:	e000ed04 	.word	0xe000ed04

080062b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01a      	beq.n	80062fc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80062c6:	4b15      	ldr	r3, [pc, #84]	@ (800631c <vTaskDelay+0x68>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00d      	beq.n	80062ea <vTaskDelay+0x36>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	b672      	cpsid	i
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	b662      	cpsie	i
 80062e2:	60bb      	str	r3, [r7, #8]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80062ea:	f000 f887 	bl	80063fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80062ee:	2100      	movs	r1, #0
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fe11 	bl	8006f18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062f6:	f000 f88f 	bl	8006418 <xTaskResumeAll>
 80062fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006302:	4b07      	ldr	r3, [pc, #28]	@ (8006320 <vTaskDelay+0x6c>)
 8006304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	2000141c 	.word	0x2000141c
 8006320:	e000ed04 	.word	0xe000ed04

08006324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	@ 0x28
 8006328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800632e:	2300      	movs	r3, #0
 8006330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006332:	463a      	mov	r2, r7
 8006334:	1d39      	adds	r1, r7, #4
 8006336:	f107 0308 	add.w	r3, r7, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe fd06 	bl	8004d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	9202      	str	r2, [sp, #8]
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	2300      	movs	r3, #0
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	2300      	movs	r3, #0
 8006350:	460a      	mov	r2, r1
 8006352:	4924      	ldr	r1, [pc, #144]	@ (80063e4 <vTaskStartScheduler+0xc0>)
 8006354:	4824      	ldr	r0, [pc, #144]	@ (80063e8 <vTaskStartScheduler+0xc4>)
 8006356:	f7ff fdff 	bl	8005f58 <xTaskCreateStatic>
 800635a:	4603      	mov	r3, r0
 800635c:	4a23      	ldr	r2, [pc, #140]	@ (80063ec <vTaskStartScheduler+0xc8>)
 800635e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006360:	4b22      	ldr	r3, [pc, #136]	@ (80063ec <vTaskStartScheduler+0xc8>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d002      	beq.n	800636e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006368:	2301      	movs	r3, #1
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e001      	b.n	8006372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d102      	bne.n	800637e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006378:	f000 fe22 	bl	8006fc0 <xTimerCreateTimerTask>
 800637c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d118      	bne.n	80063b6 <vTaskStartScheduler+0x92>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	b672      	cpsid	i
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	b662      	cpsie	i
 8006398:	613b      	str	r3, [r7, #16]
}
 800639a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800639c:	4b14      	ldr	r3, [pc, #80]	@ (80063f0 <vTaskStartScheduler+0xcc>)
 800639e:	f04f 32ff 	mov.w	r2, #4294967295
 80063a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063a4:	4b13      	ldr	r3, [pc, #76]	@ (80063f4 <vTaskStartScheduler+0xd0>)
 80063a6:	2201      	movs	r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <vTaskStartScheduler+0xd4>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80063b0:	f001 f9fe 	bl	80077b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80063b4:	e011      	b.n	80063da <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063bc:	d10d      	bne.n	80063da <vTaskStartScheduler+0xb6>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	b672      	cpsid	i
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	b662      	cpsie	i
 80063d2:	60fb      	str	r3, [r7, #12]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <vTaskStartScheduler+0xb2>
}
 80063da:	bf00      	nop
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	08007fd0 	.word	0x08007fd0
 80063e8:	08006a3d 	.word	0x08006a3d
 80063ec:	20001418 	.word	0x20001418
 80063f0:	20001414 	.word	0x20001414
 80063f4:	20001400 	.word	0x20001400
 80063f8:	200013f8 	.word	0x200013f8

080063fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006400:	4b04      	ldr	r3, [pc, #16]	@ (8006414 <vTaskSuspendAll+0x18>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	4a03      	ldr	r2, [pc, #12]	@ (8006414 <vTaskSuspendAll+0x18>)
 8006408:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800640a:	bf00      	nop
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	2000141c 	.word	0x2000141c

08006418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006426:	4b43      	ldr	r3, [pc, #268]	@ (8006534 <xTaskResumeAll+0x11c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <xTaskResumeAll+0x32>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	b672      	cpsid	i
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	b662      	cpsie	i
 8006442:	603b      	str	r3, [r7, #0]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800644a:	f001 fa2f 	bl	80078ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800644e:	4b39      	ldr	r3, [pc, #228]	@ (8006534 <xTaskResumeAll+0x11c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3b01      	subs	r3, #1
 8006454:	4a37      	ldr	r2, [pc, #220]	@ (8006534 <xTaskResumeAll+0x11c>)
 8006456:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006458:	4b36      	ldr	r3, [pc, #216]	@ (8006534 <xTaskResumeAll+0x11c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d162      	bne.n	8006526 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006460:	4b35      	ldr	r3, [pc, #212]	@ (8006538 <xTaskResumeAll+0x120>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d05e      	beq.n	8006526 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006468:	e02f      	b.n	80064ca <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646a:	4b34      	ldr	r3, [pc, #208]	@ (800653c <xTaskResumeAll+0x124>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3318      	adds	r3, #24
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe fd26 	bl	8004ec8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3304      	adds	r3, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fd21 	bl	8004ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648a:	4b2d      	ldr	r3, [pc, #180]	@ (8006540 <xTaskResumeAll+0x128>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	429a      	cmp	r2, r3
 8006490:	d903      	bls.n	800649a <xTaskResumeAll+0x82>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	4a2a      	ldr	r2, [pc, #168]	@ (8006540 <xTaskResumeAll+0x128>)
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4a27      	ldr	r2, [pc, #156]	@ (8006544 <xTaskResumeAll+0x12c>)
 80064a8:	441a      	add	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4619      	mov	r1, r3
 80064b0:	4610      	mov	r0, r2
 80064b2:	f7fe fcac 	bl	8004e0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ba:	4b23      	ldr	r3, [pc, #140]	@ (8006548 <xTaskResumeAll+0x130>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80064c4:	4b21      	ldr	r3, [pc, #132]	@ (800654c <xTaskResumeAll+0x134>)
 80064c6:	2201      	movs	r2, #1
 80064c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ca:	4b1c      	ldr	r3, [pc, #112]	@ (800653c <xTaskResumeAll+0x124>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1cb      	bne.n	800646a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80064d8:	f000 fb68 	bl	8006bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80064dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006550 <xTaskResumeAll+0x138>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d010      	beq.n	800650a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80064e8:	f000 f846 	bl	8006578 <xTaskIncrementTick>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80064f2:	4b16      	ldr	r3, [pc, #88]	@ (800654c <xTaskResumeAll+0x134>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f1      	bne.n	80064e8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006504:	4b12      	ldr	r3, [pc, #72]	@ (8006550 <xTaskResumeAll+0x138>)
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800650a:	4b10      	ldr	r3, [pc, #64]	@ (800654c <xTaskResumeAll+0x134>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d009      	beq.n	8006526 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006512:	2301      	movs	r3, #1
 8006514:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006516:	4b0f      	ldr	r3, [pc, #60]	@ (8006554 <xTaskResumeAll+0x13c>)
 8006518:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800651c:	601a      	str	r2, [r3, #0]
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006526:	f001 f9f7 	bl	8007918 <vPortExitCritical>

	return xAlreadyYielded;
 800652a:	68bb      	ldr	r3, [r7, #8]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	2000141c 	.word	0x2000141c
 8006538:	200013f4 	.word	0x200013f4
 800653c:	200013b4 	.word	0x200013b4
 8006540:	200013fc 	.word	0x200013fc
 8006544:	20000f24 	.word	0x20000f24
 8006548:	20000f20 	.word	0x20000f20
 800654c:	20001408 	.word	0x20001408
 8006550:	20001404 	.word	0x20001404
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800655e:	4b05      	ldr	r3, [pc, #20]	@ (8006574 <xTaskGetTickCount+0x1c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006564:	687b      	ldr	r3, [r7, #4]
}
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	200013f8 	.word	0x200013f8

08006578 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006582:	4b50      	ldr	r3, [pc, #320]	@ (80066c4 <xTaskIncrementTick+0x14c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f040 808c 	bne.w	80066a4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800658c:	4b4e      	ldr	r3, [pc, #312]	@ (80066c8 <xTaskIncrementTick+0x150>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006594:	4a4c      	ldr	r2, [pc, #304]	@ (80066c8 <xTaskIncrementTick+0x150>)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d123      	bne.n	80065e8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80065a0:	4b4a      	ldr	r3, [pc, #296]	@ (80066cc <xTaskIncrementTick+0x154>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00d      	beq.n	80065c6 <xTaskIncrementTick+0x4e>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ae:	b672      	cpsid	i
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	b662      	cpsie	i
 80065be:	603b      	str	r3, [r7, #0]
}
 80065c0:	bf00      	nop
 80065c2:	bf00      	nop
 80065c4:	e7fd      	b.n	80065c2 <xTaskIncrementTick+0x4a>
 80065c6:	4b41      	ldr	r3, [pc, #260]	@ (80066cc <xTaskIncrementTick+0x154>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]
 80065cc:	4b40      	ldr	r3, [pc, #256]	@ (80066d0 <xTaskIncrementTick+0x158>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a3e      	ldr	r2, [pc, #248]	@ (80066cc <xTaskIncrementTick+0x154>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	4a3e      	ldr	r2, [pc, #248]	@ (80066d0 <xTaskIncrementTick+0x158>)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	4b3e      	ldr	r3, [pc, #248]	@ (80066d4 <xTaskIncrementTick+0x15c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3301      	adds	r3, #1
 80065e0:	4a3c      	ldr	r2, [pc, #240]	@ (80066d4 <xTaskIncrementTick+0x15c>)
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	f000 fae2 	bl	8006bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80065e8:	4b3b      	ldr	r3, [pc, #236]	@ (80066d8 <xTaskIncrementTick+0x160>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d349      	bcc.n	8006686 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065f2:	4b36      	ldr	r3, [pc, #216]	@ (80066cc <xTaskIncrementTick+0x154>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065fc:	4b36      	ldr	r3, [pc, #216]	@ (80066d8 <xTaskIncrementTick+0x160>)
 80065fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006602:	601a      	str	r2, [r3, #0]
					break;
 8006604:	e03f      	b.n	8006686 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006606:	4b31      	ldr	r3, [pc, #196]	@ (80066cc <xTaskIncrementTick+0x154>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d203      	bcs.n	8006626 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800661e:	4a2e      	ldr	r2, [pc, #184]	@ (80066d8 <xTaskIncrementTick+0x160>)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006624:	e02f      	b.n	8006686 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3304      	adds	r3, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe fc4c 	bl	8004ec8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	3318      	adds	r3, #24
 800663c:	4618      	mov	r0, r3
 800663e:	f7fe fc43 	bl	8004ec8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006646:	4b25      	ldr	r3, [pc, #148]	@ (80066dc <xTaskIncrementTick+0x164>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d903      	bls.n	8006656 <xTaskIncrementTick+0xde>
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006652:	4a22      	ldr	r2, [pc, #136]	@ (80066dc <xTaskIncrementTick+0x164>)
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4a1f      	ldr	r2, [pc, #124]	@ (80066e0 <xTaskIncrementTick+0x168>)
 8006664:	441a      	add	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f7fe fbce 	bl	8004e0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006676:	4b1b      	ldr	r3, [pc, #108]	@ (80066e4 <xTaskIncrementTick+0x16c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	429a      	cmp	r2, r3
 800667e:	d3b8      	bcc.n	80065f2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006680:	2301      	movs	r3, #1
 8006682:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006684:	e7b5      	b.n	80065f2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006686:	4b17      	ldr	r3, [pc, #92]	@ (80066e4 <xTaskIncrementTick+0x16c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668c:	4914      	ldr	r1, [pc, #80]	@ (80066e0 <xTaskIncrementTick+0x168>)
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d907      	bls.n	80066ae <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800669e:	2301      	movs	r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e004      	b.n	80066ae <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80066a4:	4b10      	ldr	r3, [pc, #64]	@ (80066e8 <xTaskIncrementTick+0x170>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	4a0f      	ldr	r2, [pc, #60]	@ (80066e8 <xTaskIncrementTick+0x170>)
 80066ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80066ae:	4b0f      	ldr	r3, [pc, #60]	@ (80066ec <xTaskIncrementTick+0x174>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80066b6:	2301      	movs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80066ba:	697b      	ldr	r3, [r7, #20]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	2000141c 	.word	0x2000141c
 80066c8:	200013f8 	.word	0x200013f8
 80066cc:	200013ac 	.word	0x200013ac
 80066d0:	200013b0 	.word	0x200013b0
 80066d4:	2000140c 	.word	0x2000140c
 80066d8:	20001414 	.word	0x20001414
 80066dc:	200013fc 	.word	0x200013fc
 80066e0:	20000f24 	.word	0x20000f24
 80066e4:	20000f20 	.word	0x20000f20
 80066e8:	20001404 	.word	0x20001404
 80066ec:	20001408 	.word	0x20001408

080066f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066f6:	4b29      	ldr	r3, [pc, #164]	@ (800679c <vTaskSwitchContext+0xac>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066fe:	4b28      	ldr	r3, [pc, #160]	@ (80067a0 <vTaskSwitchContext+0xb0>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006704:	e044      	b.n	8006790 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006706:	4b26      	ldr	r3, [pc, #152]	@ (80067a0 <vTaskSwitchContext+0xb0>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800670c:	4b25      	ldr	r3, [pc, #148]	@ (80067a4 <vTaskSwitchContext+0xb4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e013      	b.n	800673c <vTaskSwitchContext+0x4c>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10d      	bne.n	8006736 <vTaskSwitchContext+0x46>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	b672      	cpsid	i
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	b662      	cpsie	i
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <vTaskSwitchContext+0x42>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3b01      	subs	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	491a      	ldr	r1, [pc, #104]	@ (80067a8 <vTaskSwitchContext+0xb8>)
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0e1      	beq.n	8006714 <vTaskSwitchContext+0x24>
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4a13      	ldr	r2, [pc, #76]	@ (80067a8 <vTaskSwitchContext+0xb8>)
 800675c:	4413      	add	r3, r2
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	605a      	str	r2, [r3, #4]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	3308      	adds	r3, #8
 8006772:	429a      	cmp	r2, r3
 8006774:	d104      	bne.n	8006780 <vTaskSwitchContext+0x90>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	605a      	str	r2, [r3, #4]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	4a09      	ldr	r2, [pc, #36]	@ (80067ac <vTaskSwitchContext+0xbc>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	4a06      	ldr	r2, [pc, #24]	@ (80067a4 <vTaskSwitchContext+0xb4>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6013      	str	r3, [r2, #0]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	2000141c 	.word	0x2000141c
 80067a0:	20001408 	.word	0x20001408
 80067a4:	200013fc 	.word	0x200013fc
 80067a8:	20000f24 	.word	0x20000f24
 80067ac:	20000f20 	.word	0x20000f20

080067b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10d      	bne.n	80067dc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c4:	b672      	cpsid	i
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	b662      	cpsie	i
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067dc:	4b07      	ldr	r3, [pc, #28]	@ (80067fc <vTaskPlaceOnEventList+0x4c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3318      	adds	r3, #24
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7fe fb36 	bl	8004e56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067ea:	2101      	movs	r1, #1
 80067ec:	6838      	ldr	r0, [r7, #0]
 80067ee:	f000 fb93 	bl	8006f18 <prvAddCurrentTaskToDelayedList>
}
 80067f2:	bf00      	nop
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000f20 	.word	0x20000f20

08006800 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10d      	bne.n	800682e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006816:	b672      	cpsid	i
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	b662      	cpsie	i
 8006826:	617b      	str	r3, [r7, #20]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800682e:	4b0a      	ldr	r3, [pc, #40]	@ (8006858 <vTaskPlaceOnEventListRestricted+0x58>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3318      	adds	r3, #24
 8006834:	4619      	mov	r1, r3
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7fe fae9 	bl	8004e0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d002      	beq.n	8006848 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006842:	f04f 33ff 	mov.w	r3, #4294967295
 8006846:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	68b8      	ldr	r0, [r7, #8]
 800684c:	f000 fb64 	bl	8006f18 <prvAddCurrentTaskToDelayedList>
	}
 8006850:	bf00      	nop
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	20000f20 	.word	0x20000f20

0800685c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10d      	bne.n	800688e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	b672      	cpsid	i
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	b662      	cpsie	i
 8006886:	60fb      	str	r3, [r7, #12]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3318      	adds	r3, #24
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe fb18 	bl	8004ec8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006898:	4b1d      	ldr	r3, [pc, #116]	@ (8006910 <xTaskRemoveFromEventList+0xb4>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d11d      	bne.n	80068dc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fe fb0f 	bl	8004ec8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ae:	4b19      	ldr	r3, [pc, #100]	@ (8006914 <xTaskRemoveFromEventList+0xb8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d903      	bls.n	80068be <xTaskRemoveFromEventList+0x62>
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	4a16      	ldr	r2, [pc, #88]	@ (8006914 <xTaskRemoveFromEventList+0xb8>)
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4a13      	ldr	r2, [pc, #76]	@ (8006918 <xTaskRemoveFromEventList+0xbc>)
 80068cc:	441a      	add	r2, r3
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fe fa9a 	bl	8004e0e <vListInsertEnd>
 80068da:	e005      	b.n	80068e8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	3318      	adds	r3, #24
 80068e0:	4619      	mov	r1, r3
 80068e2:	480e      	ldr	r0, [pc, #56]	@ (800691c <xTaskRemoveFromEventList+0xc0>)
 80068e4:	f7fe fa93 	bl	8004e0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006920 <xTaskRemoveFromEventList+0xc4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d905      	bls.n	8006902 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80068f6:	2301      	movs	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80068fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006924 <xTaskRemoveFromEventList+0xc8>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e001      	b.n	8006906 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006906:	697b      	ldr	r3, [r7, #20]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	2000141c 	.word	0x2000141c
 8006914:	200013fc 	.word	0x200013fc
 8006918:	20000f24 	.word	0x20000f24
 800691c:	200013b4 	.word	0x200013b4
 8006920:	20000f20 	.word	0x20000f20
 8006924:	20001408 	.word	0x20001408

08006928 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006930:	4b06      	ldr	r3, [pc, #24]	@ (800694c <vTaskInternalSetTimeOutState+0x24>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006938:	4b05      	ldr	r3, [pc, #20]	@ (8006950 <vTaskInternalSetTimeOutState+0x28>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	605a      	str	r2, [r3, #4]
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	2000140c 	.word	0x2000140c
 8006950:	200013f8 	.word	0x200013f8

08006954 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10d      	bne.n	8006980 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006968:	b672      	cpsid	i
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	b662      	cpsie	i
 8006978:	613b      	str	r3, [r7, #16]
}
 800697a:	bf00      	nop
 800697c:	bf00      	nop
 800697e:	e7fd      	b.n	800697c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10d      	bne.n	80069a2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	b672      	cpsid	i
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	b662      	cpsie	i
 800699a:	60fb      	str	r3, [r7, #12]
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	e7fd      	b.n	800699e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80069a2:	f000 ff83 	bl	80078ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80069a6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a1c <xTaskCheckForTimeOut+0xc8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069be:	d102      	bne.n	80069c6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80069c0:	2300      	movs	r3, #0
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	e023      	b.n	8006a0e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b15      	ldr	r3, [pc, #84]	@ (8006a20 <xTaskCheckForTimeOut+0xcc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d007      	beq.n	80069e2 <xTaskCheckForTimeOut+0x8e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d302      	bcc.n	80069e2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80069dc:	2301      	movs	r3, #1
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	e015      	b.n	8006a0e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d20b      	bcs.n	8006a04 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	1ad2      	subs	r2, r2, r3
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff ff95 	bl	8006928 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	e004      	b.n	8006a0e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a0e:	f000 ff83 	bl	8007918 <vPortExitCritical>

	return xReturn;
 8006a12:	69fb      	ldr	r3, [r7, #28]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200013f8 	.word	0x200013f8
 8006a20:	2000140c 	.word	0x2000140c

08006a24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006a28:	4b03      	ldr	r3, [pc, #12]	@ (8006a38 <vTaskMissedYield+0x14>)
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]
}
 8006a2e:	bf00      	nop
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	20001408 	.word	0x20001408

08006a3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006a44:	f000 f852 	bl	8006aec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a48:	4b06      	ldr	r3, [pc, #24]	@ (8006a64 <prvIdleTask+0x28>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d9f9      	bls.n	8006a44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006a50:	4b05      	ldr	r3, [pc, #20]	@ (8006a68 <prvIdleTask+0x2c>)
 8006a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006a60:	e7f0      	b.n	8006a44 <prvIdleTask+0x8>
 8006a62:	bf00      	nop
 8006a64:	20000f24 	.word	0x20000f24
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a72:	2300      	movs	r3, #0
 8006a74:	607b      	str	r3, [r7, #4]
 8006a76:	e00c      	b.n	8006a92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4a12      	ldr	r2, [pc, #72]	@ (8006acc <prvInitialiseTaskLists+0x60>)
 8006a84:	4413      	add	r3, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe f994 	bl	8004db4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b37      	cmp	r3, #55	@ 0x37
 8006a96:	d9ef      	bls.n	8006a78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a98:	480d      	ldr	r0, [pc, #52]	@ (8006ad0 <prvInitialiseTaskLists+0x64>)
 8006a9a:	f7fe f98b 	bl	8004db4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a9e:	480d      	ldr	r0, [pc, #52]	@ (8006ad4 <prvInitialiseTaskLists+0x68>)
 8006aa0:	f7fe f988 	bl	8004db4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006aa4:	480c      	ldr	r0, [pc, #48]	@ (8006ad8 <prvInitialiseTaskLists+0x6c>)
 8006aa6:	f7fe f985 	bl	8004db4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006aaa:	480c      	ldr	r0, [pc, #48]	@ (8006adc <prvInitialiseTaskLists+0x70>)
 8006aac:	f7fe f982 	bl	8004db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ab0:	480b      	ldr	r0, [pc, #44]	@ (8006ae0 <prvInitialiseTaskLists+0x74>)
 8006ab2:	f7fe f97f 	bl	8004db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae4 <prvInitialiseTaskLists+0x78>)
 8006ab8:	4a05      	ldr	r2, [pc, #20]	@ (8006ad0 <prvInitialiseTaskLists+0x64>)
 8006aba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <prvInitialiseTaskLists+0x7c>)
 8006abe:	4a05      	ldr	r2, [pc, #20]	@ (8006ad4 <prvInitialiseTaskLists+0x68>)
 8006ac0:	601a      	str	r2, [r3, #0]
}
 8006ac2:	bf00      	nop
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	20000f24 	.word	0x20000f24
 8006ad0:	20001384 	.word	0x20001384
 8006ad4:	20001398 	.word	0x20001398
 8006ad8:	200013b4 	.word	0x200013b4
 8006adc:	200013c8 	.word	0x200013c8
 8006ae0:	200013e0 	.word	0x200013e0
 8006ae4:	200013ac 	.word	0x200013ac
 8006ae8:	200013b0 	.word	0x200013b0

08006aec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006af2:	e019      	b.n	8006b28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006af4:	f000 feda 	bl	80078ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006af8:	4b10      	ldr	r3, [pc, #64]	@ (8006b3c <prvCheckTasksWaitingTermination+0x50>)
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7fe f9df 	bl	8004ec8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <prvCheckTasksWaitingTermination+0x54>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4a0b      	ldr	r2, [pc, #44]	@ (8006b40 <prvCheckTasksWaitingTermination+0x54>)
 8006b12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006b14:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <prvCheckTasksWaitingTermination+0x58>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b44 <prvCheckTasksWaitingTermination+0x58>)
 8006b1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006b1e:	f000 fefb 	bl	8007918 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f810 	bl	8006b48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b28:	4b06      	ldr	r3, [pc, #24]	@ (8006b44 <prvCheckTasksWaitingTermination+0x58>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e1      	bne.n	8006af4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200013c8 	.word	0x200013c8
 8006b40:	200013f4 	.word	0x200013f4
 8006b44:	200013dc 	.word	0x200013dc

08006b48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d108      	bne.n	8006b6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 f8a0 	bl	8007ca4 <vPortFree>
				vPortFree( pxTCB );
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 f89d 	bl	8007ca4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b6a:	e01b      	b.n	8006ba4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d103      	bne.n	8006b7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 f894 	bl	8007ca4 <vPortFree>
	}
 8006b7c:	e012      	b.n	8006ba4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d00d      	beq.n	8006ba4 <prvDeleteTCB+0x5c>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8c:	b672      	cpsid	i
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	b662      	cpsie	i
 8006b9c:	60fb      	str	r3, [r7, #12]
}
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	e7fd      	b.n	8006ba0 <prvDeleteTCB+0x58>
	}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8006be4 <prvResetNextTaskUnblockTime+0x38>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8006be8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006bc4:	e008      	b.n	8006bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc6:	4b07      	ldr	r3, [pc, #28]	@ (8006be4 <prvResetNextTaskUnblockTime+0x38>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4a04      	ldr	r2, [pc, #16]	@ (8006be8 <prvResetNextTaskUnblockTime+0x3c>)
 8006bd6:	6013      	str	r3, [r2, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	200013ac 	.word	0x200013ac
 8006be8:	20001414 	.word	0x20001414

08006bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c20 <xTaskGetSchedulerState+0x34>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d102      	bne.n	8006c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	607b      	str	r3, [r7, #4]
 8006bfe:	e008      	b.n	8006c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c00:	4b08      	ldr	r3, [pc, #32]	@ (8006c24 <xTaskGetSchedulerState+0x38>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d102      	bne.n	8006c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	607b      	str	r3, [r7, #4]
 8006c0c:	e001      	b.n	8006c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006c12:	687b      	ldr	r3, [r7, #4]
	}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	20001400 	.word	0x20001400
 8006c24:	2000141c 	.word	0x2000141c

08006c28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d051      	beq.n	8006ce2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c42:	4b2a      	ldr	r3, [pc, #168]	@ (8006cec <xTaskPriorityInherit+0xc4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d241      	bcs.n	8006cd0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	db06      	blt.n	8006c62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c54:	4b25      	ldr	r3, [pc, #148]	@ (8006cec <xTaskPriorityInherit+0xc4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6959      	ldr	r1, [r3, #20]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf0 <xTaskPriorityInherit+0xc8>)
 8006c74:	4413      	add	r3, r2
 8006c76:	4299      	cmp	r1, r3
 8006c78:	d122      	bne.n	8006cc0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe f922 	bl	8004ec8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c84:	4b19      	ldr	r3, [pc, #100]	@ (8006cec <xTaskPriorityInherit+0xc4>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c92:	4b18      	ldr	r3, [pc, #96]	@ (8006cf4 <xTaskPriorityInherit+0xcc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d903      	bls.n	8006ca2 <xTaskPriorityInherit+0x7a>
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9e:	4a15      	ldr	r2, [pc, #84]	@ (8006cf4 <xTaskPriorityInherit+0xcc>)
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4a10      	ldr	r2, [pc, #64]	@ (8006cf0 <xTaskPriorityInherit+0xc8>)
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f7fe f8a8 	bl	8004e0e <vListInsertEnd>
 8006cbe:	e004      	b.n	8006cca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <xTaskPriorityInherit+0xc4>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e008      	b.n	8006ce2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006cd4:	4b05      	ldr	r3, [pc, #20]	@ (8006cec <xTaskPriorityInherit+0xc4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d201      	bcs.n	8006ce2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
	}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000f20 	.word	0x20000f20
 8006cf0:	20000f24 	.word	0x20000f24
 8006cf4:	200013fc 	.word	0x200013fc

08006cf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d05c      	beq.n	8006dc8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006d0e:	4b31      	ldr	r3, [pc, #196]	@ (8006dd4 <xTaskPriorityDisinherit+0xdc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d00d      	beq.n	8006d34 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1c:	b672      	cpsid	i
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	b662      	cpsie	i
 8006d2c:	60fb      	str	r3, [r7, #12]
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10d      	bne.n	8006d58 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d40:	b672      	cpsid	i
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	b662      	cpsie	i
 8006d50:	60bb      	str	r3, [r7, #8]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5c:	1e5a      	subs	r2, r3, #1
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d02c      	beq.n	8006dc8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d128      	bne.n	8006dc8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe f8a4 	bl	8004ec8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d98:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <xTaskPriorityDisinherit+0xe0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d903      	bls.n	8006da8 <xTaskPriorityDisinherit+0xb0>
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	4a0c      	ldr	r2, [pc, #48]	@ (8006dd8 <xTaskPriorityDisinherit+0xe0>)
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4a09      	ldr	r2, [pc, #36]	@ (8006ddc <xTaskPriorityDisinherit+0xe4>)
 8006db6:	441a      	add	r2, r3
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f7fe f825 	bl	8004e0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dc8:	697b      	ldr	r3, [r7, #20]
	}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000f20 	.word	0x20000f20
 8006dd8:	200013fc 	.word	0x200013fc
 8006ddc:	20000f24 	.word	0x20000f24

08006de0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006dee:	2301      	movs	r3, #1
 8006df0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d070      	beq.n	8006eda <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10d      	bne.n	8006e1c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e04:	b672      	cpsid	i
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	b662      	cpsie	i
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	bf00      	nop
 8006e1a:	e7fd      	b.n	8006e18 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d902      	bls.n	8006e2c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	e002      	b.n	8006e32 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e30:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d04e      	beq.n	8006eda <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d149      	bne.n	8006eda <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006e46:	4b27      	ldr	r3, [pc, #156]	@ (8006ee4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d10d      	bne.n	8006e6c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e54:	b672      	cpsid	i
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	b662      	cpsie	i
 8006e64:	60bb      	str	r3, [r7, #8]
}
 8006e66:	bf00      	nop
 8006e68:	bf00      	nop
 8006e6a:	e7fd      	b.n	8006e68 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	db04      	blt.n	8006e8a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	6959      	ldr	r1, [r3, #20]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4a13      	ldr	r2, [pc, #76]	@ (8006ee8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006e9a:	4413      	add	r3, r2
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	d11c      	bne.n	8006eda <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	3304      	adds	r3, #4
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fe f80f 	bl	8004ec8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eae:	4b0f      	ldr	r3, [pc, #60]	@ (8006eec <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d903      	bls.n	8006ebe <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eba:	4a0c      	ldr	r2, [pc, #48]	@ (8006eec <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4a07      	ldr	r2, [pc, #28]	@ (8006ee8 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006ecc:	441a      	add	r2, r3
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	f7fd ff9a 	bl	8004e0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eda:	bf00      	nop
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000f20 	.word	0x20000f20
 8006ee8:	20000f24 	.word	0x20000f24
 8006eec:	200013fc 	.word	0x200013fc

08006ef0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006ef4:	4b07      	ldr	r3, [pc, #28]	@ (8006f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006efc:	4b05      	ldr	r3, [pc, #20]	@ (8006f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006f02:	3201      	adds	r2, #1
 8006f04:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006f06:	4b03      	ldr	r3, [pc, #12]	@ (8006f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8006f08:	681b      	ldr	r3, [r3, #0]
	}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	20000f20 	.word	0x20000f20

08006f18 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f22:	4b21      	ldr	r3, [pc, #132]	@ (8006fa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f28:	4b20      	ldr	r3, [pc, #128]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fd ffca 	bl	8004ec8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d10a      	bne.n	8006f52 <prvAddCurrentTaskToDelayedList+0x3a>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f42:	4b1a      	ldr	r3, [pc, #104]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4819      	ldr	r0, [pc, #100]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006f4c:	f7fd ff5f 	bl	8004e0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f50:	e026      	b.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f5a:	4b14      	ldr	r3, [pc, #80]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d209      	bcs.n	8006f7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f6a:	4b12      	ldr	r3, [pc, #72]	@ (8006fb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4610      	mov	r0, r2
 8006f78:	f7fd ff6d 	bl	8004e56 <vListInsert>
}
 8006f7c:	e010      	b.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <prvAddCurrentTaskToDelayedList+0x94>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3304      	adds	r3, #4
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	f7fd ff63 	bl	8004e56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f90:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d202      	bcs.n	8006fa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f9a:	4a08      	ldr	r2, [pc, #32]	@ (8006fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6013      	str	r3, [r2, #0]
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	200013f8 	.word	0x200013f8
 8006fac:	20000f20 	.word	0x20000f20
 8006fb0:	200013e0 	.word	0x200013e0
 8006fb4:	200013b0 	.word	0x200013b0
 8006fb8:	200013ac 	.word	0x200013ac
 8006fbc:	20001414 	.word	0x20001414

08006fc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	@ 0x28
 8006fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006fca:	f000 fb21 	bl	8007610 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006fce:	4b1e      	ldr	r3, [pc, #120]	@ (8007048 <xTimerCreateTimerTask+0x88>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d021      	beq.n	800701a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006fde:	1d3a      	adds	r2, r7, #4
 8006fe0:	f107 0108 	add.w	r1, r7, #8
 8006fe4:	f107 030c 	add.w	r3, r7, #12
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fd fec9 	bl	8004d80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	9202      	str	r2, [sp, #8]
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	460a      	mov	r2, r1
 8007000:	4912      	ldr	r1, [pc, #72]	@ (800704c <xTimerCreateTimerTask+0x8c>)
 8007002:	4813      	ldr	r0, [pc, #76]	@ (8007050 <xTimerCreateTimerTask+0x90>)
 8007004:	f7fe ffa8 	bl	8005f58 <xTaskCreateStatic>
 8007008:	4603      	mov	r3, r0
 800700a:	4a12      	ldr	r2, [pc, #72]	@ (8007054 <xTimerCreateTimerTask+0x94>)
 800700c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800700e:	4b11      	ldr	r3, [pc, #68]	@ (8007054 <xTimerCreateTimerTask+0x94>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007016:	2301      	movs	r3, #1
 8007018:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007024:	b672      	cpsid	i
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	b662      	cpsie	i
 8007034:	613b      	str	r3, [r7, #16]
}
 8007036:	bf00      	nop
 8007038:	bf00      	nop
 800703a:	e7fd      	b.n	8007038 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800703c:	697b      	ldr	r3, [r7, #20]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20001450 	.word	0x20001450
 800704c:	08007fd8 	.word	0x08007fd8
 8007050:	08007199 	.word	0x08007199
 8007054:	20001454 	.word	0x20001454

08007058 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	@ 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007066:	2300      	movs	r3, #0
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10d      	bne.n	800708c <xTimerGenericCommand+0x34>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	b672      	cpsid	i
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	b662      	cpsie	i
 8007084:	623b      	str	r3, [r7, #32]
}
 8007086:	bf00      	nop
 8007088:	bf00      	nop
 800708a:	e7fd      	b.n	8007088 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800708c:	4b19      	ldr	r3, [pc, #100]	@ (80070f4 <xTimerGenericCommand+0x9c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02a      	beq.n	80070ea <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	dc18      	bgt.n	80070d8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070a6:	f7ff fda1 	bl	8006bec <xTaskGetSchedulerState>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d109      	bne.n	80070c4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070b0:	4b10      	ldr	r3, [pc, #64]	@ (80070f4 <xTimerGenericCommand+0x9c>)
 80070b2:	6818      	ldr	r0, [r3, #0]
 80070b4:	f107 0110 	add.w	r1, r7, #16
 80070b8:	2300      	movs	r3, #0
 80070ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070bc:	f7fe f8fe 	bl	80052bc <xQueueGenericSend>
 80070c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80070c2:	e012      	b.n	80070ea <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070c4:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <xTimerGenericCommand+0x9c>)
 80070c6:	6818      	ldr	r0, [r3, #0]
 80070c8:	f107 0110 	add.w	r1, r7, #16
 80070cc:	2300      	movs	r3, #0
 80070ce:	2200      	movs	r2, #0
 80070d0:	f7fe f8f4 	bl	80052bc <xQueueGenericSend>
 80070d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80070d6:	e008      	b.n	80070ea <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070d8:	4b06      	ldr	r3, [pc, #24]	@ (80070f4 <xTimerGenericCommand+0x9c>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	f107 0110 	add.w	r1, r7, #16
 80070e0:	2300      	movs	r3, #0
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	f7fe f9f4 	bl	80054d0 <xQueueGenericSendFromISR>
 80070e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3728      	adds	r7, #40	@ 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20001450 	.word	0x20001450

080070f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007102:	4b24      	ldr	r3, [pc, #144]	@ (8007194 <prvProcessExpiredTimer+0x9c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	3304      	adds	r3, #4
 8007110:	4618      	mov	r0, r3
 8007112:	f7fd fed9 	bl	8004ec8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	d025      	beq.n	8007170 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	18d1      	adds	r1, r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	6978      	ldr	r0, [r7, #20]
 8007132:	f000 f8d7 	bl	80072e4 <prvInsertTimerInActiveList>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d022      	beq.n	8007182 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800713c:	2300      	movs	r3, #0
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	2300      	movs	r3, #0
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	2100      	movs	r1, #0
 8007146:	6978      	ldr	r0, [r7, #20]
 8007148:	f7ff ff86 	bl	8007058 <xTimerGenericCommand>
 800714c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d116      	bne.n	8007182 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007158:	b672      	cpsid	i
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	b662      	cpsie	i
 8007168:	60fb      	str	r3, [r7, #12]
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	e7fd      	b.n	800716c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	b2da      	uxtb	r2, r3
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	6978      	ldr	r0, [r7, #20]
 8007188:	4798      	blx	r3
}
 800718a:	bf00      	nop
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20001448 	.word	0x20001448

08007198 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071a0:	f107 0308 	add.w	r3, r7, #8
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 f859 	bl	800725c <prvGetNextExpireTime>
 80071aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4619      	mov	r1, r3
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f805 	bl	80071c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071b6:	f000 f8d7 	bl	8007368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071ba:	bf00      	nop
 80071bc:	e7f0      	b.n	80071a0 <prvTimerTask+0x8>
	...

080071c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071ca:	f7ff f917 	bl	80063fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071ce:	f107 0308 	add.w	r3, r7, #8
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f866 	bl	80072a4 <prvSampleTimeNow>
 80071d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d130      	bne.n	8007242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10a      	bne.n	80071fc <prvProcessTimerOrBlockTask+0x3c>
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d806      	bhi.n	80071fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80071ee:	f7ff f913 	bl	8006418 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff ff7f 	bl	80070f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80071fa:	e024      	b.n	8007246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007202:	4b13      	ldr	r3, [pc, #76]	@ (8007250 <prvProcessTimerOrBlockTask+0x90>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <prvProcessTimerOrBlockTask+0x50>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <prvProcessTimerOrBlockTask+0x52>
 8007210:	2300      	movs	r3, #0
 8007212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007214:	4b0f      	ldr	r3, [pc, #60]	@ (8007254 <prvProcessTimerOrBlockTask+0x94>)
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	4619      	mov	r1, r3
 8007222:	f7fe fe65 	bl	8005ef0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007226:	f7ff f8f7 	bl	8006418 <xTaskResumeAll>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007230:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <prvProcessTimerOrBlockTask+0x98>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
}
 8007240:	e001      	b.n	8007246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007242:	f7ff f8e9 	bl	8006418 <xTaskResumeAll>
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	2000144c 	.word	0x2000144c
 8007254:	20001450 	.word	0x20001450
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007264:	4b0e      	ldr	r3, [pc, #56]	@ (80072a0 <prvGetNextExpireTime+0x44>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <prvGetNextExpireTime+0x16>
 800726e:	2201      	movs	r2, #1
 8007270:	e000      	b.n	8007274 <prvGetNextExpireTime+0x18>
 8007272:	2200      	movs	r2, #0
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007280:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <prvGetNextExpireTime+0x44>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e001      	b.n	8007290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20001448 	.word	0x20001448

080072a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072ac:	f7ff f954 	bl	8006558 <xTaskGetTickCount>
 80072b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072b2:	4b0b      	ldr	r3, [pc, #44]	@ (80072e0 <prvSampleTimeNow+0x3c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d205      	bcs.n	80072c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072bc:	f000 f940 	bl	8007540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e002      	b.n	80072ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072ce:	4a04      	ldr	r2, [pc, #16]	@ (80072e0 <prvSampleTimeNow+0x3c>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072d4:	68fb      	ldr	r3, [r7, #12]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20001458 	.word	0x20001458

080072e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d812      	bhi.n	8007330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	429a      	cmp	r2, r3
 8007316:	d302      	bcc.n	800731e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e01b      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800731e:	4b10      	ldr	r3, [pc, #64]	@ (8007360 <prvInsertTimerInActiveList+0x7c>)
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3304      	adds	r3, #4
 8007326:	4619      	mov	r1, r3
 8007328:	4610      	mov	r0, r2
 800732a:	f7fd fd94 	bl	8004e56 <vListInsert>
 800732e:	e012      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d206      	bcs.n	8007346 <prvInsertTimerInActiveList+0x62>
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	429a      	cmp	r2, r3
 800733e:	d302      	bcc.n	8007346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007340:	2301      	movs	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e007      	b.n	8007356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007346:	4b07      	ldr	r3, [pc, #28]	@ (8007364 <prvInsertTimerInActiveList+0x80>)
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fd fd80 	bl	8004e56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007356:	697b      	ldr	r3, [r7, #20]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	2000144c 	.word	0x2000144c
 8007364:	20001448 	.word	0x20001448

08007368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	@ 0x38
 800736c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800736e:	e0d4      	b.n	800751a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	da1b      	bge.n	80073ae <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	3304      	adds	r3, #4
 800737a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10d      	bne.n	800739e <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007386:	b672      	cpsid	i
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	b662      	cpsie	i
 8007396:	61fb      	str	r3, [r7, #28]
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	e7fd      	b.n	800739a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a4:	6850      	ldr	r0, [r2, #4]
 80073a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a8:	6892      	ldr	r2, [r2, #8]
 80073aa:	4611      	mov	r1, r2
 80073ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f2c0 80b2 	blt.w	800751a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d004      	beq.n	80073cc <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c4:	3304      	adds	r3, #4
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fd fd7e 	bl	8004ec8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073cc:	463b      	mov	r3, r7
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff ff68 	bl	80072a4 <prvSampleTimeNow>
 80073d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b09      	cmp	r3, #9
 80073da:	f200 809b 	bhi.w	8007514 <prvProcessReceivedCommands+0x1ac>
 80073de:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <prvProcessReceivedCommands+0x7c>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	0800740d 	.word	0x0800740d
 80073ec:	0800740d 	.word	0x0800740d
 80073f0:	08007487 	.word	0x08007487
 80073f4:	0800749b 	.word	0x0800749b
 80073f8:	080074eb 	.word	0x080074eb
 80073fc:	0800740d 	.word	0x0800740d
 8007400:	0800740d 	.word	0x0800740d
 8007404:	08007487 	.word	0x08007487
 8007408:	0800749b 	.word	0x0800749b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800740c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	b2da      	uxtb	r2, r3
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	18d1      	adds	r1, r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800742a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800742c:	f7ff ff5a 	bl	80072e4 <prvInsertTimerInActiveList>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d070      	beq.n	8007518 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800743c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d065      	beq.n	8007518 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	441a      	add	r2, r3
 8007454:	2300      	movs	r3, #0
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	2300      	movs	r3, #0
 800745a:	2100      	movs	r1, #0
 800745c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800745e:	f7ff fdfb 	bl	8007058 <xTimerGenericCommand>
 8007462:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d156      	bne.n	8007518 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	b672      	cpsid	i
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	f3bf 8f4f 	dsb	sy
 800747c:	b662      	cpsie	i
 800747e:	61bb      	str	r3, [r7, #24]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800748c:	f023 0301 	bic.w	r3, r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007498:	e03f      	b.n	800751a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800749a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10d      	bne.n	80074d6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074be:	b672      	cpsid	i
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	b662      	cpsie	i
 80074ce:	617b      	str	r3, [r7, #20]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	18d1      	adds	r1, r2, r3
 80074de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074e4:	f7ff fefe 	bl	80072e4 <prvInsertTimerInActiveList>
					break;
 80074e8:	e017      	b.n	800751a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d103      	bne.n	8007500 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80074f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074fa:	f000 fbd3 	bl	8007ca4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074fe:	e00c      	b.n	800751a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007512:	e002      	b.n	800751a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <prvProcessReceivedCommands+0x1b2>
					break;
 8007518:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800751a:	4b08      	ldr	r3, [pc, #32]	@ (800753c <prvProcessReceivedCommands+0x1d4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1d39      	adds	r1, r7, #4
 8007520:	2200      	movs	r2, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe f878 	bl	8005618 <xQueueReceive>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	f47f af20 	bne.w	8007370 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	3730      	adds	r7, #48	@ 0x30
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20001450 	.word	0x20001450

08007540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007546:	e04b      	b.n	80075e0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007548:	4b2f      	ldr	r3, [pc, #188]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007552:	4b2d      	ldr	r3, [pc, #180]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fd fcb1 	bl	8004ec8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d031      	beq.n	80075e0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d90e      	bls.n	80075ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800759a:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f7fd fc56 	bl	8004e56 <vListInsert>
 80075aa:	e019      	b.n	80075e0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	2100      	movs	r1, #0
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fd4e 	bl	8007058 <xTimerGenericCommand>
 80075bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10d      	bne.n	80075e0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	b672      	cpsid	i
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	b662      	cpsie	i
 80075d8:	603b      	str	r3, [r7, #0]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075e0:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1ae      	bne.n	8007548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075ea:	4b07      	ldr	r3, [pc, #28]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075f0:	4b06      	ldr	r3, [pc, #24]	@ (800760c <prvSwitchTimerLists+0xcc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a04      	ldr	r2, [pc, #16]	@ (8007608 <prvSwitchTimerLists+0xc8>)
 80075f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075f8:	4a04      	ldr	r2, [pc, #16]	@ (800760c <prvSwitchTimerLists+0xcc>)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	6013      	str	r3, [r2, #0]
}
 80075fe:	bf00      	nop
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20001448 	.word	0x20001448
 800760c:	2000144c 	.word	0x2000144c

08007610 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007616:	f000 f949 	bl	80078ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800761a:	4b15      	ldr	r3, [pc, #84]	@ (8007670 <prvCheckForValidListAndQueue+0x60>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d120      	bne.n	8007664 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007622:	4814      	ldr	r0, [pc, #80]	@ (8007674 <prvCheckForValidListAndQueue+0x64>)
 8007624:	f7fd fbc6 	bl	8004db4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007628:	4813      	ldr	r0, [pc, #76]	@ (8007678 <prvCheckForValidListAndQueue+0x68>)
 800762a:	f7fd fbc3 	bl	8004db4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800762e:	4b13      	ldr	r3, [pc, #76]	@ (800767c <prvCheckForValidListAndQueue+0x6c>)
 8007630:	4a10      	ldr	r2, [pc, #64]	@ (8007674 <prvCheckForValidListAndQueue+0x64>)
 8007632:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007634:	4b12      	ldr	r3, [pc, #72]	@ (8007680 <prvCheckForValidListAndQueue+0x70>)
 8007636:	4a10      	ldr	r2, [pc, #64]	@ (8007678 <prvCheckForValidListAndQueue+0x68>)
 8007638:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800763a:	2300      	movs	r3, #0
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	4b11      	ldr	r3, [pc, #68]	@ (8007684 <prvCheckForValidListAndQueue+0x74>)
 8007640:	4a11      	ldr	r2, [pc, #68]	@ (8007688 <prvCheckForValidListAndQueue+0x78>)
 8007642:	2110      	movs	r1, #16
 8007644:	200a      	movs	r0, #10
 8007646:	f7fd fcd5 	bl	8004ff4 <xQueueGenericCreateStatic>
 800764a:	4603      	mov	r3, r0
 800764c:	4a08      	ldr	r2, [pc, #32]	@ (8007670 <prvCheckForValidListAndQueue+0x60>)
 800764e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007650:	4b07      	ldr	r3, [pc, #28]	@ (8007670 <prvCheckForValidListAndQueue+0x60>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007658:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <prvCheckForValidListAndQueue+0x60>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	490b      	ldr	r1, [pc, #44]	@ (800768c <prvCheckForValidListAndQueue+0x7c>)
 800765e:	4618      	mov	r0, r3
 8007660:	f7fe fbf2 	bl	8005e48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007664:	f000 f958 	bl	8007918 <vPortExitCritical>
}
 8007668:	bf00      	nop
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20001450 	.word	0x20001450
 8007674:	20001420 	.word	0x20001420
 8007678:	20001434 	.word	0x20001434
 800767c:	20001448 	.word	0x20001448
 8007680:	2000144c 	.word	0x2000144c
 8007684:	200014fc 	.word	0x200014fc
 8007688:	2000145c 	.word	0x2000145c
 800768c:	08007fe0 	.word	0x08007fe0

08007690 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3b04      	subs	r3, #4
 80076a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3b04      	subs	r3, #4
 80076ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f023 0201 	bic.w	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3b04      	subs	r3, #4
 80076be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076c0:	4a0c      	ldr	r2, [pc, #48]	@ (80076f4 <pxPortInitialiseStack+0x64>)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3b14      	subs	r3, #20
 80076ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b04      	subs	r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f06f 0202 	mvn.w	r2, #2
 80076de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3b20      	subs	r3, #32
 80076e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80076e6:	68fb      	ldr	r3, [r7, #12]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	080076f9 	.word	0x080076f9

080076f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007702:	4b15      	ldr	r3, [pc, #84]	@ (8007758 <prvTaskExitError+0x60>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d00d      	beq.n	8007728 <prvTaskExitError+0x30>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	b672      	cpsid	i
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	b662      	cpsie	i
 8007720:	60fb      	str	r3, [r7, #12]
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <prvTaskExitError+0x2c>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	b672      	cpsid	i
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	b662      	cpsie	i
 800773c:	60bb      	str	r3, [r7, #8]
}
 800773e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007740:	bf00      	nop
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0fc      	beq.n	8007742 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	2000000c 	.word	0x2000000c
 800775c:	00000000 	.word	0x00000000

08007760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007760:	4b07      	ldr	r3, [pc, #28]	@ (8007780 <pxCurrentTCBConst2>)
 8007762:	6819      	ldr	r1, [r3, #0]
 8007764:	6808      	ldr	r0, [r1, #0]
 8007766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776a:	f380 8809 	msr	PSP, r0
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f04f 0000 	mov.w	r0, #0
 8007776:	f380 8811 	msr	BASEPRI, r0
 800777a:	4770      	bx	lr
 800777c:	f3af 8000 	nop.w

08007780 <pxCurrentTCBConst2>:
 8007780:	20000f20 	.word	0x20000f20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop

08007788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007788:	4808      	ldr	r0, [pc, #32]	@ (80077ac <prvPortStartFirstTask+0x24>)
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	6800      	ldr	r0, [r0, #0]
 800778e:	f380 8808 	msr	MSP, r0
 8007792:	f04f 0000 	mov.w	r0, #0
 8007796:	f380 8814 	msr	CONTROL, r0
 800779a:	b662      	cpsie	i
 800779c:	b661      	cpsie	f
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	df00      	svc	0
 80077a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077aa:	bf00      	nop
 80077ac:	e000ed08 	.word	0xe000ed08

080077b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80077b6:	4b37      	ldr	r3, [pc, #220]	@ (8007894 <xPortStartScheduler+0xe4>)
 80077b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	22ff      	movs	r2, #255	@ 0xff
 80077c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	4b2f      	ldr	r3, [pc, #188]	@ (8007898 <xPortStartScheduler+0xe8>)
 80077dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077de:	4b2f      	ldr	r3, [pc, #188]	@ (800789c <xPortStartScheduler+0xec>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077e4:	e009      	b.n	80077fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80077e6:	4b2d      	ldr	r3, [pc, #180]	@ (800789c <xPortStartScheduler+0xec>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	4a2b      	ldr	r2, [pc, #172]	@ (800789c <xPortStartScheduler+0xec>)
 80077ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007802:	2b80      	cmp	r3, #128	@ 0x80
 8007804:	d0ef      	beq.n	80077e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007806:	4b25      	ldr	r3, [pc, #148]	@ (800789c <xPortStartScheduler+0xec>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f1c3 0307 	rsb	r3, r3, #7
 800780e:	2b04      	cmp	r3, #4
 8007810:	d00d      	beq.n	800782e <xPortStartScheduler+0x7e>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	b672      	cpsid	i
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	b662      	cpsie	i
 8007826:	60bb      	str	r3, [r7, #8]
}
 8007828:	bf00      	nop
 800782a:	bf00      	nop
 800782c:	e7fd      	b.n	800782a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800782e:	4b1b      	ldr	r3, [pc, #108]	@ (800789c <xPortStartScheduler+0xec>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	021b      	lsls	r3, r3, #8
 8007834:	4a19      	ldr	r2, [pc, #100]	@ (800789c <xPortStartScheduler+0xec>)
 8007836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007838:	4b18      	ldr	r3, [pc, #96]	@ (800789c <xPortStartScheduler+0xec>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007840:	4a16      	ldr	r2, [pc, #88]	@ (800789c <xPortStartScheduler+0xec>)
 8007842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800784c:	4b14      	ldr	r3, [pc, #80]	@ (80078a0 <xPortStartScheduler+0xf0>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a13      	ldr	r2, [pc, #76]	@ (80078a0 <xPortStartScheduler+0xf0>)
 8007852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007858:	4b11      	ldr	r3, [pc, #68]	@ (80078a0 <xPortStartScheduler+0xf0>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a10      	ldr	r2, [pc, #64]	@ (80078a0 <xPortStartScheduler+0xf0>)
 800785e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007864:	f000 f8dc 	bl	8007a20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007868:	4b0e      	ldr	r3, [pc, #56]	@ (80078a4 <xPortStartScheduler+0xf4>)
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800786e:	f000 f8fb 	bl	8007a68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007872:	4b0d      	ldr	r3, [pc, #52]	@ (80078a8 <xPortStartScheduler+0xf8>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a0c      	ldr	r2, [pc, #48]	@ (80078a8 <xPortStartScheduler+0xf8>)
 8007878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800787c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800787e:	f7ff ff83 	bl	8007788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007882:	f7fe ff35 	bl	80066f0 <vTaskSwitchContext>
	prvTaskExitError();
 8007886:	f7ff ff37 	bl	80076f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	e000e400 	.word	0xe000e400
 8007898:	2000154c 	.word	0x2000154c
 800789c:	20001550 	.word	0x20001550
 80078a0:	e000ed20 	.word	0xe000ed20
 80078a4:	2000000c 	.word	0x2000000c
 80078a8:	e000ef34 	.word	0xe000ef34

080078ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	b672      	cpsid	i
 80078b8:	f383 8811 	msr	BASEPRI, r3
 80078bc:	f3bf 8f6f 	isb	sy
 80078c0:	f3bf 8f4f 	dsb	sy
 80078c4:	b662      	cpsie	i
 80078c6:	607b      	str	r3, [r7, #4]
}
 80078c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ca:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <vPortEnterCritical+0x64>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3301      	adds	r3, #1
 80078d0:	4a0f      	ldr	r2, [pc, #60]	@ (8007910 <vPortEnterCritical+0x64>)
 80078d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007910 <vPortEnterCritical+0x64>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d112      	bne.n	8007902 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <vPortEnterCritical+0x68>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00d      	beq.n	8007902 <vPortEnterCritical+0x56>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	b672      	cpsid	i
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	b662      	cpsie	i
 80078fa:	603b      	str	r3, [r7, #0]
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <vPortEnterCritical+0x52>
	}
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	2000000c 	.word	0x2000000c
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800791e:	4b13      	ldr	r3, [pc, #76]	@ (800796c <vPortExitCritical+0x54>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10d      	bne.n	8007942 <vPortExitCritical+0x2a>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	b672      	cpsid	i
 800792c:	f383 8811 	msr	BASEPRI, r3
 8007930:	f3bf 8f6f 	isb	sy
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	b662      	cpsie	i
 800793a:	607b      	str	r3, [r7, #4]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007942:	4b0a      	ldr	r3, [pc, #40]	@ (800796c <vPortExitCritical+0x54>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3b01      	subs	r3, #1
 8007948:	4a08      	ldr	r2, [pc, #32]	@ (800796c <vPortExitCritical+0x54>)
 800794a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800794c:	4b07      	ldr	r3, [pc, #28]	@ (800796c <vPortExitCritical+0x54>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <vPortExitCritical+0x48>
 8007954:	2300      	movs	r3, #0
 8007956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f383 8811 	msr	BASEPRI, r3
}
 800795e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	2000000c 	.word	0x2000000c

08007970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007970:	f3ef 8009 	mrs	r0, PSP
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	4b15      	ldr	r3, [pc, #84]	@ (80079d0 <pxCurrentTCBConst>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	f01e 0f10 	tst.w	lr, #16
 8007980:	bf08      	it	eq
 8007982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798a:	6010      	str	r0, [r2, #0]
 800798c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007994:	b672      	cpsid	i
 8007996:	f380 8811 	msr	BASEPRI, r0
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	b662      	cpsie	i
 80079a4:	f7fe fea4 	bl	80066f0 <vTaskSwitchContext>
 80079a8:	f04f 0000 	mov.w	r0, #0
 80079ac:	f380 8811 	msr	BASEPRI, r0
 80079b0:	bc09      	pop	{r0, r3}
 80079b2:	6819      	ldr	r1, [r3, #0]
 80079b4:	6808      	ldr	r0, [r1, #0]
 80079b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ba:	f01e 0f10 	tst.w	lr, #16
 80079be:	bf08      	it	eq
 80079c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079c4:	f380 8809 	msr	PSP, r0
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop

080079d0 <pxCurrentTCBConst>:
 80079d0:	20000f20 	.word	0x20000f20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop

080079d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	b672      	cpsid	i
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	b662      	cpsie	i
 80079f2:	607b      	str	r3, [r7, #4]
}
 80079f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079f6:	f7fe fdbf 	bl	8006578 <xTaskIncrementTick>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a00:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <SysTick_Handler+0x44>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	2300      	movs	r3, #0
 8007a0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	f383 8811 	msr	BASEPRI, r3
}
 8007a12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a24:	4b0b      	ldr	r3, [pc, #44]	@ (8007a54 <vPortSetupTimerInterrupt+0x34>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a58 <vPortSetupTimerInterrupt+0x38>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a30:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <vPortSetupTimerInterrupt+0x3c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a0a      	ldr	r2, [pc, #40]	@ (8007a60 <vPortSetupTimerInterrupt+0x40>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	099b      	lsrs	r3, r3, #6
 8007a3c:	4a09      	ldr	r2, [pc, #36]	@ (8007a64 <vPortSetupTimerInterrupt+0x44>)
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a42:	4b04      	ldr	r3, [pc, #16]	@ (8007a54 <vPortSetupTimerInterrupt+0x34>)
 8007a44:	2207      	movs	r2, #7
 8007a46:	601a      	str	r2, [r3, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	e000e010 	.word	0xe000e010
 8007a58:	e000e018 	.word	0xe000e018
 8007a5c:	20000000 	.word	0x20000000
 8007a60:	10624dd3 	.word	0x10624dd3
 8007a64:	e000e014 	.word	0xe000e014

08007a68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a78 <vPortEnableVFP+0x10>
 8007a6c:	6801      	ldr	r1, [r0, #0]
 8007a6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a72:	6001      	str	r1, [r0, #0]
 8007a74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a76:	bf00      	nop
 8007a78:	e000ed88 	.word	0xe000ed88

08007a7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a82:	f3ef 8305 	mrs	r3, IPSR
 8007a86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2b0f      	cmp	r3, #15
 8007a8c:	d917      	bls.n	8007abe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007af8 <vPortValidateInterruptPriority+0x7c>)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a98:	4b18      	ldr	r3, [pc, #96]	@ (8007afc <vPortValidateInterruptPriority+0x80>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	7afa      	ldrb	r2, [r7, #11]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d20d      	bcs.n	8007abe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	b672      	cpsid	i
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	b662      	cpsie	i
 8007ab6:	607b      	str	r3, [r7, #4]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007abe:	4b10      	ldr	r3, [pc, #64]	@ (8007b00 <vPortValidateInterruptPriority+0x84>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b04 <vPortValidateInterruptPriority+0x88>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d90d      	bls.n	8007aea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	b672      	cpsid	i
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	b662      	cpsie	i
 8007ae2:	603b      	str	r3, [r7, #0]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <vPortValidateInterruptPriority+0x6a>
	}
 8007aea:	bf00      	nop
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	e000e3f0 	.word	0xe000e3f0
 8007afc:	2000154c 	.word	0x2000154c
 8007b00:	e000ed0c 	.word	0xe000ed0c
 8007b04:	20001550 	.word	0x20001550

08007b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	@ 0x28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b14:	f7fe fc72 	bl	80063fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b18:	4b5d      	ldr	r3, [pc, #372]	@ (8007c90 <pvPortMalloc+0x188>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b20:	f000 f920 	bl	8007d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b24:	4b5b      	ldr	r3, [pc, #364]	@ (8007c94 <pvPortMalloc+0x18c>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f040 8094 	bne.w	8007c5a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d020      	beq.n	8007b7a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007b38:	2208      	movs	r2, #8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d017      	beq.n	8007b7a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f023 0307 	bic.w	r3, r3, #7
 8007b50:	3308      	adds	r3, #8
 8007b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00d      	beq.n	8007b7a <pvPortMalloc+0x72>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	b672      	cpsid	i
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	b662      	cpsie	i
 8007b72:	617b      	str	r3, [r7, #20]
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	e7fd      	b.n	8007b76 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d06c      	beq.n	8007c5a <pvPortMalloc+0x152>
 8007b80:	4b45      	ldr	r3, [pc, #276]	@ (8007c98 <pvPortMalloc+0x190>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d867      	bhi.n	8007c5a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b8a:	4b44      	ldr	r3, [pc, #272]	@ (8007c9c <pvPortMalloc+0x194>)
 8007b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b8e:	4b43      	ldr	r3, [pc, #268]	@ (8007c9c <pvPortMalloc+0x194>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b94:	e004      	b.n	8007ba0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d903      	bls.n	8007bb2 <pvPortMalloc+0xaa>
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f1      	bne.n	8007b96 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007bb2:	4b37      	ldr	r3, [pc, #220]	@ (8007c90 <pvPortMalloc+0x188>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d04e      	beq.n	8007c5a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	4413      	add	r3, r2
 8007bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	1ad2      	subs	r2, r2, r3
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d922      	bls.n	8007c24 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4413      	add	r3, r2
 8007be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00d      	beq.n	8007c0c <pvPortMalloc+0x104>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf4:	b672      	cpsid	i
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	b662      	cpsie	i
 8007c04:	613b      	str	r3, [r7, #16]
}
 8007c06:	bf00      	nop
 8007c08:	bf00      	nop
 8007c0a:	e7fd      	b.n	8007c08 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c1e:	69b8      	ldr	r0, [r7, #24]
 8007c20:	f000 f902 	bl	8007e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c24:	4b1c      	ldr	r3, [pc, #112]	@ (8007c98 <pvPortMalloc+0x190>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007c98 <pvPortMalloc+0x190>)
 8007c30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c32:	4b19      	ldr	r3, [pc, #100]	@ (8007c98 <pvPortMalloc+0x190>)
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca0 <pvPortMalloc+0x198>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d203      	bcs.n	8007c46 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c3e:	4b16      	ldr	r3, [pc, #88]	@ (8007c98 <pvPortMalloc+0x190>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a17      	ldr	r2, [pc, #92]	@ (8007ca0 <pvPortMalloc+0x198>)
 8007c44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	4b12      	ldr	r3, [pc, #72]	@ (8007c94 <pvPortMalloc+0x18c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c5a:	f7fe fbdd 	bl	8006418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <pvPortMalloc+0x17c>
	__asm volatile
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	b672      	cpsid	i
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	b662      	cpsie	i
 8007c7c:	60fb      	str	r3, [r7, #12]
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	e7fd      	b.n	8007c80 <pvPortMalloc+0x178>
	return pvReturn;
 8007c84:	69fb      	ldr	r3, [r7, #28]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3728      	adds	r7, #40	@ 0x28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	2000515c 	.word	0x2000515c
 8007c94:	20005168 	.word	0x20005168
 8007c98:	20005160 	.word	0x20005160
 8007c9c:	20005154 	.word	0x20005154
 8007ca0:	20005164 	.word	0x20005164

08007ca4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d04e      	beq.n	8007d54 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	425b      	negs	r3, r3
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	4b24      	ldr	r3, [pc, #144]	@ (8007d5c <vPortFree+0xb8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10d      	bne.n	8007cee <vPortFree+0x4a>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd6:	b672      	cpsid	i
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	b662      	cpsie	i
 8007ce6:	60fb      	str	r3, [r7, #12]
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	e7fd      	b.n	8007cea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00d      	beq.n	8007d12 <vPortFree+0x6e>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	b672      	cpsid	i
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	b662      	cpsie	i
 8007d0a:	60bb      	str	r3, [r7, #8]
}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	e7fd      	b.n	8007d0e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4b11      	ldr	r3, [pc, #68]	@ (8007d5c <vPortFree+0xb8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d019      	beq.n	8007d54 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d115      	bne.n	8007d54 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d5c <vPortFree+0xb8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	43db      	mvns	r3, r3
 8007d32:	401a      	ands	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d38:	f7fe fb60 	bl	80063fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	4b07      	ldr	r3, [pc, #28]	@ (8007d60 <vPortFree+0xbc>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4413      	add	r3, r2
 8007d46:	4a06      	ldr	r2, [pc, #24]	@ (8007d60 <vPortFree+0xbc>)
 8007d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d4a:	6938      	ldr	r0, [r7, #16]
 8007d4c:	f000 f86c 	bl	8007e28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d50:	f7fe fb62 	bl	8006418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d54:	bf00      	nop
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20005168 	.word	0x20005168
 8007d60:	20005160 	.word	0x20005160

08007d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d6a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d70:	4b27      	ldr	r3, [pc, #156]	@ (8007e10 <prvHeapInit+0xac>)
 8007d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00c      	beq.n	8007d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3307      	adds	r3, #7
 8007d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0307 	bic.w	r3, r3, #7
 8007d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	4a1f      	ldr	r2, [pc, #124]	@ (8007e10 <prvHeapInit+0xac>)
 8007d94:	4413      	add	r3, r2
 8007d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8007e14 <prvHeapInit+0xb0>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007da2:	4b1c      	ldr	r3, [pc, #112]	@ (8007e14 <prvHeapInit+0xb0>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	4413      	add	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007db0:	2208      	movs	r2, #8
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0307 	bic.w	r3, r3, #7
 8007dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4a15      	ldr	r2, [pc, #84]	@ (8007e18 <prvHeapInit+0xb4>)
 8007dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dc6:	4b14      	ldr	r3, [pc, #80]	@ (8007e18 <prvHeapInit+0xb4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007dce:	4b12      	ldr	r3, [pc, #72]	@ (8007e18 <prvHeapInit+0xb4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	1ad2      	subs	r2, r2, r3
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007de4:	4b0c      	ldr	r3, [pc, #48]	@ (8007e18 <prvHeapInit+0xb4>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4a0a      	ldr	r2, [pc, #40]	@ (8007e1c <prvHeapInit+0xb8>)
 8007df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	4a09      	ldr	r2, [pc, #36]	@ (8007e20 <prvHeapInit+0xbc>)
 8007dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007dfc:	4b09      	ldr	r3, [pc, #36]	@ (8007e24 <prvHeapInit+0xc0>)
 8007dfe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e02:	601a      	str	r2, [r3, #0]
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	20001554 	.word	0x20001554
 8007e14:	20005154 	.word	0x20005154
 8007e18:	2000515c 	.word	0x2000515c
 8007e1c:	20005164 	.word	0x20005164
 8007e20:	20005160 	.word	0x20005160
 8007e24:	20005168 	.word	0x20005168

08007e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e30:	4b28      	ldr	r3, [pc, #160]	@ (8007ed4 <prvInsertBlockIntoFreeList+0xac>)
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e002      	b.n	8007e3c <prvInsertBlockIntoFreeList+0x14>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d8f7      	bhi.n	8007e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	4413      	add	r3, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d108      	bne.n	8007e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	441a      	add	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d118      	bne.n	8007eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	4b15      	ldr	r3, [pc, #84]	@ (8007ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d00d      	beq.n	8007ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685a      	ldr	r2, [r3, #4]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	441a      	add	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e008      	b.n	8007eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	601a      	str	r2, [r3, #0]
 8007eae:	e003      	b.n	8007eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d002      	beq.n	8007ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20005154 	.word	0x20005154
 8007ed8:	2000515c 	.word	0x2000515c

08007edc <memset>:
 8007edc:	4402      	add	r2, r0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d100      	bne.n	8007ee6 <memset+0xa>
 8007ee4:	4770      	bx	lr
 8007ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8007eea:	e7f9      	b.n	8007ee0 <memset+0x4>

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4d0d      	ldr	r5, [pc, #52]	@ (8007f24 <__libc_init_array+0x38>)
 8007ef0:	4c0d      	ldr	r4, [pc, #52]	@ (8007f28 <__libc_init_array+0x3c>)
 8007ef2:	1b64      	subs	r4, r4, r5
 8007ef4:	10a4      	asrs	r4, r4, #2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	42a6      	cmp	r6, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	4d0b      	ldr	r5, [pc, #44]	@ (8007f2c <__libc_init_array+0x40>)
 8007efe:	4c0c      	ldr	r4, [pc, #48]	@ (8007f30 <__libc_init_array+0x44>)
 8007f00:	f000 f826 	bl	8007f50 <_init>
 8007f04:	1b64      	subs	r4, r4, r5
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	2600      	movs	r6, #0
 8007f0a:	42a6      	cmp	r6, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f14:	4798      	blx	r3
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1e:	4798      	blx	r3
 8007f20:	3601      	adds	r6, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	08008084 	.word	0x08008084
 8007f28:	08008084 	.word	0x08008084
 8007f2c:	08008084 	.word	0x08008084
 8007f30:	08008088 	.word	0x08008088

08007f34 <memcpy>:
 8007f34:	440a      	add	r2, r1
 8007f36:	4291      	cmp	r1, r2
 8007f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f3c:	d100      	bne.n	8007f40 <memcpy+0xc>
 8007f3e:	4770      	bx	lr
 8007f40:	b510      	push	{r4, lr}
 8007f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f4a:	4291      	cmp	r1, r2
 8007f4c:	d1f9      	bne.n	8007f42 <memcpy+0xe>
 8007f4e:	bd10      	pop	{r4, pc}

08007f50 <_init>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr

08007f5c <_fini>:
 8007f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5e:	bf00      	nop
 8007f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f62:	bc08      	pop	{r3}
 8007f64:	469e      	mov	lr, r3
 8007f66:	4770      	bx	lr
