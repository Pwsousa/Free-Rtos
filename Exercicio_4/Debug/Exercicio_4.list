
Exercicio_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b08  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd8  08007dd8  00009150  2**0
                  CONTENTS
  4 .ARM          00000008  08007dd8  08007dd8  00008dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007de0  08007de0  00009150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00008de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007de4  08007de4  00008de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007de8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08007df8  00009010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08007e98  000090b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005018  20000150  08007f38  00009150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005168  08007f38  00009168  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00009150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020d04  00000000  00000000  0000917e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040de  00000000  00000000  00029e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a28  00000000  00000000  0002df60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001465  00000000  00000000  0002f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004683  00000000  00000000  00030ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ee77  00000000  00000000  00035470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d66d  00000000  00000000  000542e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00161954  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f98  00000000  00000000  00161998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000067  00000000  00000000  00168930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08007cf0 	.word	0x08007cf0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08007cf0 	.word	0x08007cf0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b96a 	b.w	800053c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	460c      	mov	r4, r1
 8000288:	2b00      	cmp	r3, #0
 800028a:	d14e      	bne.n	800032a <__udivmoddi4+0xaa>
 800028c:	4694      	mov	ip, r2
 800028e:	458c      	cmp	ip, r1
 8000290:	4686      	mov	lr, r0
 8000292:	fab2 f282 	clz	r2, r2
 8000296:	d962      	bls.n	800035e <__udivmoddi4+0xde>
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0320 	rsb	r3, r2, #32
 800029e:	4091      	lsls	r1, r2
 80002a0:	fa20 f303 	lsr.w	r3, r0, r3
 80002a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a8:	4319      	orrs	r1, r3
 80002aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f f68c 	uxth.w	r6, ip
 80002b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	fb07 1114 	mls	r1, r7, r4, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb04 f106 	mul.w	r1, r4, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002d6:	f080 8112 	bcs.w	80004fe <__udivmoddi4+0x27e>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 810f 	bls.w	80004fe <__udivmoddi4+0x27e>
 80002e0:	3c02      	subs	r4, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ee:	fb07 1110 	mls	r1, r7, r0, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb00 f606 	mul.w	r6, r0, r6
 80002fa:	429e      	cmp	r6, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x94>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f100 31ff 	add.w	r1, r0, #4294967295
 8000306:	f080 80fc 	bcs.w	8000502 <__udivmoddi4+0x282>
 800030a:	429e      	cmp	r6, r3
 800030c:	f240 80f9 	bls.w	8000502 <__udivmoddi4+0x282>
 8000310:	4463      	add	r3, ip
 8000312:	3802      	subs	r0, #2
 8000314:	1b9b      	subs	r3, r3, r6
 8000316:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800031a:	2100      	movs	r1, #0
 800031c:	b11d      	cbz	r5, 8000326 <__udivmoddi4+0xa6>
 800031e:	40d3      	lsrs	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	e9c5 3200 	strd	r3, r2, [r5]
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d905      	bls.n	800033a <__udivmoddi4+0xba>
 800032e:	b10d      	cbz	r5, 8000334 <__udivmoddi4+0xb4>
 8000330:	e9c5 0100 	strd	r0, r1, [r5]
 8000334:	2100      	movs	r1, #0
 8000336:	4608      	mov	r0, r1
 8000338:	e7f5      	b.n	8000326 <__udivmoddi4+0xa6>
 800033a:	fab3 f183 	clz	r1, r3
 800033e:	2900      	cmp	r1, #0
 8000340:	d146      	bne.n	80003d0 <__udivmoddi4+0x150>
 8000342:	42a3      	cmp	r3, r4
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xcc>
 8000346:	4290      	cmp	r0, r2
 8000348:	f0c0 80f0 	bcc.w	800052c <__udivmoddi4+0x2ac>
 800034c:	1a86      	subs	r6, r0, r2
 800034e:	eb64 0303 	sbc.w	r3, r4, r3
 8000352:	2001      	movs	r0, #1
 8000354:	2d00      	cmp	r5, #0
 8000356:	d0e6      	beq.n	8000326 <__udivmoddi4+0xa6>
 8000358:	e9c5 6300 	strd	r6, r3, [r5]
 800035c:	e7e3      	b.n	8000326 <__udivmoddi4+0xa6>
 800035e:	2a00      	cmp	r2, #0
 8000360:	f040 8090 	bne.w	8000484 <__udivmoddi4+0x204>
 8000364:	eba1 040c 	sub.w	r4, r1, ip
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	fa1f f78c 	uxth.w	r7, ip
 8000370:	2101      	movs	r1, #1
 8000372:	fbb4 f6f8 	udiv	r6, r4, r8
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb08 4416 	mls	r4, r8, r6, r4
 800037e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000382:	fb07 f006 	mul.w	r0, r7, r6
 8000386:	4298      	cmp	r0, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x11c>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x11a>
 8000394:	4298      	cmp	r0, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 800039a:	4626      	mov	r6, r4
 800039c:	1a1c      	subs	r4, r3, r0
 800039e:	fa1f f38e 	uxth.w	r3, lr
 80003a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a6:	fb08 4410 	mls	r4, r8, r0, r4
 80003aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ae:	fb00 f707 	mul.w	r7, r0, r7
 80003b2:	429f      	cmp	r7, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x148>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x146>
 80003c0:	429f      	cmp	r7, r3
 80003c2:	f200 80b0 	bhi.w	8000526 <__udivmoddi4+0x2a6>
 80003c6:	4620      	mov	r0, r4
 80003c8:	1bdb      	subs	r3, r3, r7
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	e7a5      	b.n	800031c <__udivmoddi4+0x9c>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 f706 	lsr.w	r7, r2, r6
 80003da:	431f      	orrs	r7, r3
 80003dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e0:	fa04 f301 	lsl.w	r3, r4, r1
 80003e4:	ea43 030c 	orr.w	r3, r3, ip
 80003e8:	40f4      	lsrs	r4, r6
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f4:	fbb4 fef0 	udiv	lr, r4, r0
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000400:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000404:	fb0e f90c 	mul.w	r9, lr, ip
 8000408:	45a1      	cmp	r9, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90a      	bls.n	8000426 <__udivmoddi4+0x1a6>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000416:	f080 8084 	bcs.w	8000522 <__udivmoddi4+0x2a2>
 800041a:	45a1      	cmp	r9, r4
 800041c:	f240 8081 	bls.w	8000522 <__udivmoddi4+0x2a2>
 8000420:	f1ae 0e02 	sub.w	lr, lr, #2
 8000424:	443c      	add	r4, r7
 8000426:	eba4 0409 	sub.w	r4, r4, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000432:	fb00 4413 	mls	r4, r0, r3, r4
 8000436:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	45a4      	cmp	ip, r4
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1d2>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 30ff 	add.w	r0, r3, #4294967295
 8000448:	d267      	bcs.n	800051a <__udivmoddi4+0x29a>
 800044a:	45a4      	cmp	ip, r4
 800044c:	d965      	bls.n	800051a <__udivmoddi4+0x29a>
 800044e:	3b02      	subs	r3, #2
 8000450:	443c      	add	r4, r7
 8000452:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000456:	fba0 9302 	umull	r9, r3, r0, r2
 800045a:	eba4 040c 	sub.w	r4, r4, ip
 800045e:	429c      	cmp	r4, r3
 8000460:	46ce      	mov	lr, r9
 8000462:	469c      	mov	ip, r3
 8000464:	d351      	bcc.n	800050a <__udivmoddi4+0x28a>
 8000466:	d04e      	beq.n	8000506 <__udivmoddi4+0x286>
 8000468:	b155      	cbz	r5, 8000480 <__udivmoddi4+0x200>
 800046a:	ebb8 030e 	subs.w	r3, r8, lr
 800046e:	eb64 040c 	sbc.w	r4, r4, ip
 8000472:	fa04 f606 	lsl.w	r6, r4, r6
 8000476:	40cb      	lsrs	r3, r1
 8000478:	431e      	orrs	r6, r3
 800047a:	40cc      	lsrs	r4, r1
 800047c:	e9c5 6400 	strd	r6, r4, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	e750      	b.n	8000326 <__udivmoddi4+0xa6>
 8000484:	f1c2 0320 	rsb	r3, r2, #32
 8000488:	fa20 f103 	lsr.w	r1, r0, r3
 800048c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000490:	fa24 f303 	lsr.w	r3, r4, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	430c      	orrs	r4, r1
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa00 fe02 	lsl.w	lr, r0, r2
 80004a0:	fa1f f78c 	uxth.w	r7, ip
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b2:	fb00 f107 	mul.w	r1, r0, r7
 80004b6:	4299      	cmp	r1, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x24c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f100 36ff 	add.w	r6, r0, #4294967295
 80004c2:	d22c      	bcs.n	800051e <__udivmoddi4+0x29e>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d92a      	bls.n	800051e <__udivmoddi4+0x29e>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d4:	fb08 3311 	mls	r3, r8, r1, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb01 f307 	mul.w	r3, r1, r7
 80004e0:	42a3      	cmp	r3, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x276>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ec:	d213      	bcs.n	8000516 <__udivmoddi4+0x296>
 80004ee:	42a3      	cmp	r3, r4
 80004f0:	d911      	bls.n	8000516 <__udivmoddi4+0x296>
 80004f2:	3902      	subs	r1, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	1ae4      	subs	r4, r4, r3
 80004f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004fc:	e739      	b.n	8000372 <__udivmoddi4+0xf2>
 80004fe:	4604      	mov	r4, r0
 8000500:	e6f0      	b.n	80002e4 <__udivmoddi4+0x64>
 8000502:	4608      	mov	r0, r1
 8000504:	e706      	b.n	8000314 <__udivmoddi4+0x94>
 8000506:	45c8      	cmp	r8, r9
 8000508:	d2ae      	bcs.n	8000468 <__udivmoddi4+0x1e8>
 800050a:	ebb9 0e02 	subs.w	lr, r9, r2
 800050e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000512:	3801      	subs	r0, #1
 8000514:	e7a8      	b.n	8000468 <__udivmoddi4+0x1e8>
 8000516:	4631      	mov	r1, r6
 8000518:	e7ed      	b.n	80004f6 <__udivmoddi4+0x276>
 800051a:	4603      	mov	r3, r0
 800051c:	e799      	b.n	8000452 <__udivmoddi4+0x1d2>
 800051e:	4630      	mov	r0, r6
 8000520:	e7d4      	b.n	80004cc <__udivmoddi4+0x24c>
 8000522:	46d6      	mov	lr, sl
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1a6>
 8000526:	4463      	add	r3, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74d      	b.n	80003c8 <__udivmoddi4+0x148>
 800052c:	4606      	mov	r6, r0
 800052e:	4623      	mov	r3, r4
 8000530:	4608      	mov	r0, r1
 8000532:	e70f      	b.n	8000354 <__udivmoddi4+0xd4>
 8000534:	3e02      	subs	r6, #2
 8000536:	4463      	add	r3, ip
 8000538:	e730      	b.n	800039c <__udivmoddi4+0x11c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fcdf 	bl	8000f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f834 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f950 	bl	80007f0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000550:	f000 f8a2 	bl	8000698 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f8ee 	bl	8000734 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000558:	f000 f91c 	bl	8000794 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f004 f906 	bl	800476c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <main+0x54>)
 8000562:	f004 fa41 	bl	80049e8 <osMutexNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <main+0x58>)
 800056a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(Task_01, NULL, &Task01_attributes);
 800056c:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <main+0x5c>)
 800056e:	2100      	movs	r1, #0
 8000570:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <main+0x60>)
 8000572:	f004 f965 	bl	8004840 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0a      	ldr	r2, [pc, #40]	@ (80005a4 <main+0x64>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(Task_02, NULL, &Task02_attributes);
 800057c:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <main+0x68>)
 800057e:	2100      	movs	r1, #0
 8000580:	480a      	ldr	r0, [pc, #40]	@ (80005ac <main+0x6c>)
 8000582:	f004 f95d 	bl	8004840 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a09      	ldr	r2, [pc, #36]	@ (80005b0 <main+0x70>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f004 f922 	bl	80047d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <main+0x50>
 8000594:	08007db0 	.word	0x08007db0
 8000598:	200007c4 	.word	0x200007c4
 800059c:	08007d68 	.word	0x08007d68
 80005a0:	08000935 	.word	0x08000935
 80005a4:	200007bc 	.word	0x200007bc
 80005a8:	08007d8c 	.word	0x08007d8c
 80005ac:	0800097d 	.word	0x0800097d
 80005b0:	200007c0 	.word	0x200007c0

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	@ 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2234      	movs	r2, #52	@ 0x34
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f007 fb5a 	bl	8007c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f001 fc16 	bl	8001e08 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000690 <SystemClock_Config+0xdc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000690 <SystemClock_Config+0xdc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e8:	4b29      	ldr	r3, [pc, #164]	@ (8000690 <SystemClock_Config+0xdc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f4:	4b27      	ldr	r3, [pc, #156]	@ (8000694 <SystemClock_Config+0xe0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005fc:	4a25      	ldr	r2, [pc, #148]	@ (8000694 <SystemClock_Config+0xe0>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <SystemClock_Config+0xe0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000614:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000622:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000628:	2360      	movs	r3, #96	@ 0x60
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000630:	2304      	movs	r3, #4
 8000632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fc43 	bl	8001ec8 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000648:	f000 f9cc 	bl	80009e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800064c:	f001 fbec 	bl	8001e28 <HAL_PWREx_EnableOverDrive>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000656:	f000 f9c5 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2103      	movs	r1, #3
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fed4 	bl	8002424 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000682:	f000 f9af 	bl	80009e4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	@ 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <MX_ETH_Init+0x84>)
 800069e:	4a20      	ldr	r2, [pc, #128]	@ (8000720 <MX_ETH_Init+0x88>)
 80006a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006a2:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <MX_ETH_Init+0x8c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <MX_ETH_Init+0x8c>)
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <MX_ETH_Init+0x8c>)
 80006b0:	22e1      	movs	r2, #225	@ 0xe1
 80006b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <MX_ETH_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_ETH_Init+0x8c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006c0:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_ETH_Init+0x8c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006c6:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_ETH_Init+0x84>)
 80006c8:	4a16      	ldr	r2, [pc, #88]	@ (8000724 <MX_ETH_Init+0x8c>)
 80006ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006cc:	4b13      	ldr	r3, [pc, #76]	@ (800071c <MX_ETH_Init+0x84>)
 80006ce:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_ETH_Init+0x84>)
 80006d6:	4a14      	ldr	r2, [pc, #80]	@ (8000728 <MX_ETH_Init+0x90>)
 80006d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_ETH_Init+0x84>)
 80006dc:	4a13      	ldr	r2, [pc, #76]	@ (800072c <MX_ETH_Init+0x94>)
 80006de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_ETH_Init+0x84>)
 80006e2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006e8:	480c      	ldr	r0, [pc, #48]	@ (800071c <MX_ETH_Init+0x84>)
 80006ea:	f000 fd3f 	bl	800116c <HAL_ETH_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f976 	bl	80009e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006f8:	2238      	movs	r2, #56	@ 0x38
 80006fa:	2100      	movs	r1, #0
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <MX_ETH_Init+0x98>)
 80006fe:	f007 fabd 	bl	8007c7c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <MX_ETH_Init+0x98>)
 8000704:	2221      	movs	r2, #33	@ 0x21
 8000706:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_ETH_Init+0x98>)
 800070a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800070e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000710:	4b07      	ldr	r3, [pc, #28]	@ (8000730 <MX_ETH_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200001a4 	.word	0x200001a4
 8000720:	40028000 	.word	0x40028000
 8000724:	200007c8 	.word	0x200007c8
 8000728:	200000b0 	.word	0x200000b0
 800072c:	20000010 	.word	0x20000010
 8000730:	2000016c 	.word	0x2000016c

08000734 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_USART3_UART_Init+0x58>)
 800073a:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <MX_USART3_UART_Init+0x5c>)
 800073c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_USART3_UART_Init+0x58>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_USART3_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_USART3_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_USART3_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_USART3_UART_Init+0x58>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_USART3_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_USART3_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_USART3_UART_Init+0x58>)
 8000778:	f002 ffa2 	bl	80036c0 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 f92f 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000254 	.word	0x20000254
 8000790:	40004800 	.word	0x40004800

08000794 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800079e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2206      	movs	r2, #6
 80007a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	2202      	movs	r2, #2
 80007b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	f001 f9db 	bl	8001b92 <HAL_PCD_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 f8ff 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200002dc 	.word	0x200002dc

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b47      	ldr	r3, [pc, #284]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a46      	ldr	r2, [pc, #280]	@ (8000924 <MX_GPIO_Init+0x134>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b44      	ldr	r3, [pc, #272]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b41      	ldr	r3, [pc, #260]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a40      	ldr	r2, [pc, #256]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b3e      	ldr	r3, [pc, #248]	@ (8000924 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b3b      	ldr	r3, [pc, #236]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a3a      	ldr	r2, [pc, #232]	@ (8000924 <MX_GPIO_Init+0x134>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b38      	ldr	r3, [pc, #224]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b35      	ldr	r3, [pc, #212]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a34      	ldr	r2, [pc, #208]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b32      	ldr	r3, [pc, #200]	@ (8000924 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	4b2f      	ldr	r3, [pc, #188]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a2e      	ldr	r2, [pc, #184]	@ (8000924 <MX_GPIO_Init+0x134>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a28      	ldr	r2, [pc, #160]	@ (8000924 <MX_GPIO_Init+0x134>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_GPIO_Init+0x134>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f244 0181 	movw	r1, #16513	@ 0x4081
 800089c:	4822      	ldr	r0, [pc, #136]	@ (8000928 <MX_GPIO_Init+0x138>)
 800089e:	f001 f95f 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	@ 0x40
 80008a6:	4821      	ldr	r0, [pc, #132]	@ (800092c <MX_GPIO_Init+0x13c>)
 80008a8:	f001 f95a 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	481b      	ldr	r0, [pc, #108]	@ (8000930 <MX_GPIO_Init+0x140>)
 80008c4:	f000 ffa0 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_GPIO_Init+0x138>)
 80008e2:	f000 ff91 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e6:	2340      	movs	r3, #64	@ 0x40
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	480b      	ldr	r0, [pc, #44]	@ (800092c <MX_GPIO_Init+0x13c>)
 80008fe:	f000 ff83 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000902:	2380      	movs	r3, #128	@ 0x80
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_GPIO_Init+0x13c>)
 8000916:	f000 ff77 	bl	8001808 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091a:	bf00      	nop
 800091c:	3730      	adds	r7, #48	@ 0x30
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400
 800092c:	40021800 	.word	0x40021800
 8000930:	40020800 	.word	0x40020800

08000934 <Task_01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_01 */
void Task_01(void *argument)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  char *str1 = "Task 01 -> Entrando \n";
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <Task_01+0x3c>)
 800093e:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str1, strlen(str1),100);
 8000940:	68f8      	ldr	r0, [r7, #12]
 8000942:	f7ff fc7d 	bl	8000240 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	b29a      	uxth	r2, r3
 800094a:	2364      	movs	r3, #100	@ 0x64
 800094c:	68f9      	ldr	r1, [r7, #12]
 800094e:	4809      	ldr	r0, [pc, #36]	@ (8000974 <Task_01+0x40>)
 8000950:	f002 ff04 	bl	800375c <HAL_UART_Transmit>
	  osDelay(1000);
 8000954:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000958:	f004 f818 	bl	800498c <osDelay>

	  osMutexAcquire(Mutex01Handle, osWaitForever);
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <Task_01+0x44>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	4618      	mov	r0, r3
 8000966:	f004 f8d9 	bl	8004b1c <osMutexAcquire>
  {
 800096a:	bf00      	nop
 800096c:	e7e6      	b.n	800093c <Task_01+0x8>
 800096e:	bf00      	nop
 8000970:	08007d20 	.word	0x08007d20
 8000974:	20000254 	.word	0x20000254
 8000978:	200007c4 	.word	0x200007c4

0800097c <Task_02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_02 */
void Task_02(void *argument)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_02 */
  /* Infinite loop */
  for(;;)
  {
	  char *str2 = "Task 02 -> Entrando \n";
 8000984:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <Task_02+0x38>)
 8000986:	60fb      	str	r3, [r7, #12]
	  HAL_UART_Transmit(&huart3, (uint8_t *)str2, strlen(str2),100);
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fc59 	bl	8000240 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	2364      	movs	r3, #100	@ 0x64
 8000994:	68f9      	ldr	r1, [r7, #12]
 8000996:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <Task_02+0x3c>)
 8000998:	f002 fee0 	bl	800375c <HAL_UART_Transmit>
	  osDelay(1000);
 800099c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a0:	f003 fff4 	bl	800498c <osDelay>

	  osMutexRelease(Mutex01Handle);
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <Task_02+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 f915 	bl	8004bd8 <osMutexRelease>
  {
 80009ae:	bf00      	nop
 80009b0:	e7e8      	b.n	8000984 <Task_02+0x8>
 80009b2:	bf00      	nop
 80009b4:	08007d38 	.word	0x08007d38
 80009b8:	20000254 	.word	0x20000254
 80009bc:	200007c4 	.word	0x200007c4

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 faa5 	bl	8000f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40010000 	.word	0x40010000

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b11      	ldr	r3, [pc, #68]	@ (8000a3c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a10      	ldr	r2, [pc, #64]	@ (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a02:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	210f      	movs	r1, #15
 8000a2a:	f06f 0001 	mvn.w	r0, #1
 8000a2e:	f000 fb73 	bl	8001118 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08e      	sub	sp, #56	@ 0x38
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8000b98 <HAL_ETH_MspInit+0x158>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	f040 8096 	bne.w	8000b90 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a64:	4b4d      	ldr	r3, [pc, #308]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a68:	4a4c      	ldr	r2, [pc, #304]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a70:	4b4a      	ldr	r3, [pc, #296]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a78:	623b      	str	r3, [r7, #32]
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	4b47      	ldr	r3, [pc, #284]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	4a46      	ldr	r2, [pc, #280]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000a82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a88:	4b44      	ldr	r3, [pc, #272]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	4b41      	ldr	r3, [pc, #260]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	4a40      	ldr	r2, [pc, #256]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000a9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000aa8:	61bb      	str	r3, [r7, #24]
 8000aaa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aac:	4b3b      	ldr	r3, [pc, #236]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab0:	4a3a      	ldr	r2, [pc, #232]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab8:	4b38      	ldr	r3, [pc, #224]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	4a34      	ldr	r2, [pc, #208]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad0:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aec:	f003 0302 	and.w	r3, r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000af4:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	4a28      	ldr	r2, [pc, #160]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b00:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b0c:	2332      	movs	r3, #50	@ 0x32
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	481e      	ldr	r0, [pc, #120]	@ (8000ba0 <HAL_ETH_MspInit+0x160>)
 8000b28:	f000 fe6e 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b2c:	2386      	movs	r3, #134	@ 0x86
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b44:	4619      	mov	r1, r3
 8000b46:	4817      	ldr	r0, [pc, #92]	@ (8000ba4 <HAL_ETH_MspInit+0x164>)
 8000b48:	f000 fe5e 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5e:	230b      	movs	r3, #11
 8000b60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b66:	4619      	mov	r1, r3
 8000b68:	480f      	ldr	r0, [pc, #60]	@ (8000ba8 <HAL_ETH_MspInit+0x168>)
 8000b6a:	f000 fe4d 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b6e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b80:	230b      	movs	r3, #11
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4808      	ldr	r0, [pc, #32]	@ (8000bac <HAL_ETH_MspInit+0x16c>)
 8000b8c:	f000 fe3c 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000b90:	bf00      	nop
 8000b92:	3738      	adds	r7, #56	@ 0x38
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40028000 	.word	0x40028000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40021800 	.word	0x40021800

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0ae      	sub	sp, #184	@ 0xb8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2290      	movs	r2, #144	@ 0x90
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 f853 	bl	8007c7c <memset>
  if(huart->Instance==USART3)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a22      	ldr	r2, [pc, #136]	@ (8000c64 <HAL_UART_MspInit+0xb4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d13c      	bne.n	8000c5a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000be0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f001 fe70 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bfa:	f7ff fef3 	bl	80009e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a13      	ldr	r2, [pc, #76]	@ (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <HAL_UART_MspInit+0xb8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <HAL_UART_MspInit+0xbc>)
 8000c56:	f000 fdd7 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c5a:	bf00      	nop
 8000c5c:	37b8      	adds	r7, #184	@ 0xb8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004800 	.word	0x40004800
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020c00 	.word	0x40020c00

08000c70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0ae      	sub	sp, #184	@ 0xb8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2290      	movs	r2, #144	@ 0x90
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f006 fff3 	bl	8007c7c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c9e:	d159      	bne.n	8000d54 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ca0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ca4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fe0f 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000cbc:	f7ff fe92 	bl	80009e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc4:	4a25      	ldr	r2, [pc, #148]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ccc:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cd8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4818      	ldr	r0, [pc, #96]	@ (8000d60 <HAL_PCD_MspInit+0xf0>)
 8000d00:	f000 fd82 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <HAL_PCD_MspInit+0xf0>)
 8000d20:	f000 fd72 	bl	8001808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d28:	4a0c      	ldr	r2, [pc, #48]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d2e:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d30:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d40:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d46:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d48:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <HAL_PCD_MspInit+0xec>)
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000d54:	bf00      	nop
 8000d56:	37b8      	adds	r7, #184	@ 0xb8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	@ 0x30
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d74:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <HAL_InitTick+0xcc>)
 8000d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d78:	4a2d      	ldr	r2, [pc, #180]	@ (8000e30 <HAL_InitTick+0xcc>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d80:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <HAL_InitTick+0xcc>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d8c:	f107 020c 	add.w	r2, r7, #12
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fd6a 	bl	8002870 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d9c:	f001 fd54 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8000da0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da4:	4a23      	ldr	r2, [pc, #140]	@ (8000e34 <HAL_InitTick+0xd0>)
 8000da6:	fba2 2303 	umull	r2, r3, r2, r3
 8000daa:	0c9b      	lsrs	r3, r3, #18
 8000dac:	3b01      	subs	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000db0:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <HAL_InitTick+0xd4>)
 8000db2:	4a22      	ldr	r2, [pc, #136]	@ (8000e3c <HAL_InitTick+0xd8>)
 8000db4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000db6:	4b20      	ldr	r3, [pc, #128]	@ (8000e38 <HAL_InitTick+0xd4>)
 8000db8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dbc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000e38 <HAL_InitTick+0xd4>)
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <HAL_InitTick+0xd4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	@ (8000e38 <HAL_InitTick+0xd4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <HAL_InitTick+0xd4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000dd6:	4818      	ldr	r0, [pc, #96]	@ (8000e38 <HAL_InitTick+0xd4>)
 8000dd8:	f002 f9a4 	bl	8003124 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000de2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d11b      	bne.n	8000e22 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000dea:	4813      	ldr	r0, [pc, #76]	@ (8000e38 <HAL_InitTick+0xd4>)
 8000dec:	f002 f9fc 	bl	80031e8 <HAL_TIM_Base_Start_IT>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d111      	bne.n	8000e22 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dfe:	2019      	movs	r0, #25
 8000e00:	f000 f9a6 	bl	8001150 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b0f      	cmp	r3, #15
 8000e08:	d808      	bhi.n	8000e1c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	2019      	movs	r0, #25
 8000e10:	f000 f982 	bl	8001118 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e14:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_InitTick+0xdc>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e002      	b.n	8000e22 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3730      	adds	r7, #48	@ 0x30
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	200007d0 	.word	0x200007d0
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	20000004 	.word	0x20000004

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <NMI_Handler+0x4>

08000e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e80:	4802      	ldr	r0, [pc, #8]	@ (8000e8c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e82:	f002 fa29 	bl	80032d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200007d0 	.word	0x200007d0

08000e90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb8:	f7ff ffea 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8000f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ee2:	f006 fed3 	bl	8007c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee6:	f7ff fb2b 	bl	8000540 <main>
  bx  lr    
 8000eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eec:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ef8:	08007de8 	.word	0x08007de8
  ldr r2, =_sbss
 8000efc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000f00:	20005168 	.word	0x20005168

08000f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f04:	e7fe      	b.n	8000f04 <ADC_IRQHandler>

08000f06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f000 f8f9 	bl	8001102 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f10:	200f      	movs	r0, #15
 8000f12:	f7ff ff27 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f16:	f7ff fd6b 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	2000081c 	.word	0x2000081c

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000081c 	.word	0x2000081c

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fd0:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <__NVIC_SetPriorityGrouping+0x40>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	05fa0000 	.word	0x05fa0000

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	@ (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	@ (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff4c 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112a:	f7ff ff61 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 800112e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f7ff ffb1 	bl	800109c <NVIC_EncodePriority>
 800113a:	4602      	mov	r2, r0
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff80 	bl	8001048 <__NVIC_SetPriority>
}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff54 	bl	800100c <__NVIC_EnableIRQ>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e086      	b.n	800128c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2220      	movs	r2, #32
 800118c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff fc55 	bl	8000a40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b3f      	ldr	r3, [pc, #252]	@ (8001294 <HAL_ETH_Init+0x128>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	4a3e      	ldr	r2, [pc, #248]	@ (8001294 <HAL_ETH_Init+0x128>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001294 <HAL_ETH_Init+0x128>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001298 <HAL_ETH_Init+0x12c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4a39      	ldr	r2, [pc, #228]	@ (8001298 <HAL_ETH_Init+0x12c>)
 80011b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80011b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011ba:	4b37      	ldr	r3, [pc, #220]	@ (8001298 <HAL_ETH_Init+0x12c>)
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	4935      	ldr	r1, [pc, #212]	@ (8001298 <HAL_ETH_Init+0x12c>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011c8:	4b33      	ldr	r3, [pc, #204]	@ (8001298 <HAL_ETH_Init+0x12c>)
 80011ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e4:	f7ff feb0 	bl	8000f48 <HAL_GetTick>
 80011e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011ea:	e011      	b.n	8001210 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011ec:	f7ff feac 	bl	8000f48 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011fa:	d909      	bls.n	8001210 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2204      	movs	r2, #4
 8001200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	22e0      	movs	r2, #224	@ 0xe0
 8001208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e03d      	b.n	800128c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1e4      	bne.n	80011ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f97a 	bl	800151c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fa25 	bl	8001678 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fa7b 	bl	800172a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	461a      	mov	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f9e3 	bl	8001608 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001250:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <HAL_ETH_Init+0x130>)
 8001260:	430b      	orrs	r3, r1
 8001262:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001276:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2210      	movs	r2, #16
 8001286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40013800 	.word	0x40013800
 800129c:	00020060 	.word	0x00020060

080012a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4b53      	ldr	r3, [pc, #332]	@ (8001404 <ETH_SetMACConfig+0x164>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	7b9b      	ldrb	r3, [r3, #14]
 80012be:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	7c12      	ldrb	r2, [r2, #16]
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	d102      	bne.n	80012ce <ETH_SetMACConfig+0x2e>
 80012c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80012cc:	e000      	b.n	80012d0 <ETH_SetMACConfig+0x30>
 80012ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80012d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	7c52      	ldrb	r2, [r2, #17]
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d102      	bne.n	80012e0 <ETH_SetMACConfig+0x40>
 80012da:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012de:	e000      	b.n	80012e2 <ETH_SetMACConfig+0x42>
 80012e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012e2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	7fdb      	ldrb	r3, [r3, #31]
 80012ee:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012f0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	7f92      	ldrb	r2, [r2, #30]
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d102      	bne.n	8001306 <ETH_SetMACConfig+0x66>
 8001300:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001304:	e000      	b.n	8001308 <ETH_SetMACConfig+0x68>
 8001306:	2200      	movs	r2, #0
                        macconf->Speed |
 8001308:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	7f1b      	ldrb	r3, [r3, #28]
 800130e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001310:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001316:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	791b      	ldrb	r3, [r3, #4]
 800131c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800131e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001326:	2a00      	cmp	r2, #0
 8001328:	d102      	bne.n	8001330 <ETH_SetMACConfig+0x90>
 800132a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800132e:	e000      	b.n	8001332 <ETH_SetMACConfig+0x92>
 8001330:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001332:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	7bdb      	ldrb	r3, [r3, #15]
 8001338:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800133a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001340:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001348:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800134a:	4313      	orrs	r3, r2
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff fdfc 	bl	8000f60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001386:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800138e:	2a00      	cmp	r2, #0
 8001390:	d101      	bne.n	8001396 <ETH_SetMACConfig+0xf6>
 8001392:	2280      	movs	r2, #128	@ 0x80
 8001394:	e000      	b.n	8001398 <ETH_SetMACConfig+0xf8>
 8001396:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001398:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800139e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80013a6:	2a01      	cmp	r2, #1
 80013a8:	d101      	bne.n	80013ae <ETH_SetMACConfig+0x10e>
 80013aa:	2208      	movs	r2, #8
 80013ac:	e000      	b.n	80013b0 <ETH_SetMACConfig+0x110>
 80013ae:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013b0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80013b8:	2a01      	cmp	r2, #1
 80013ba:	d101      	bne.n	80013c0 <ETH_SetMACConfig+0x120>
 80013bc:	2204      	movs	r2, #4
 80013be:	e000      	b.n	80013c2 <ETH_SetMACConfig+0x122>
 80013c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80013ca:	2a01      	cmp	r2, #1
 80013cc:	d101      	bne.n	80013d2 <ETH_SetMACConfig+0x132>
 80013ce:	2202      	movs	r2, #2
 80013d0:	e000      	b.n	80013d4 <ETH_SetMACConfig+0x134>
 80013d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d4:	4313      	orrs	r3, r2
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fdb7 	bl	8000f60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	fd20810f 	.word	0xfd20810f

08001408 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4b3d      	ldr	r3, [pc, #244]	@ (8001518 <ETH_SetDMAConfig+0x110>)
 8001422:	4013      	ands	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	7b1b      	ldrb	r3, [r3, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <ETH_SetDMAConfig+0x2c>
 800142e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001432:	e000      	b.n	8001436 <ETH_SetDMAConfig+0x2e>
 8001434:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	7b5b      	ldrb	r3, [r3, #13]
 800143a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800143c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	7f52      	ldrb	r2, [r2, #29]
 8001442:	2a00      	cmp	r2, #0
 8001444:	d102      	bne.n	800144c <ETH_SetDMAConfig+0x44>
 8001446:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800144a:	e000      	b.n	800144e <ETH_SetDMAConfig+0x46>
 800144c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800144e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	7b9b      	ldrb	r3, [r3, #14]
 8001454:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001456:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800145c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	7f1b      	ldrb	r3, [r3, #28]
 8001462:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001464:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	7f9b      	ldrb	r3, [r3, #30]
 800146a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800146c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001472:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800147a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800147c:	4313      	orrs	r3, r2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff fd5e 	bl	8000f60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	791b      	ldrb	r3, [r3, #4]
 80014b6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014bc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014c2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014c8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014d0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80014d2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80014da:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80014e0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ee:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fd2f 	bl	8000f60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	f8de3f23 	.word	0xf8de3f23

0800151c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0a6      	sub	sp, #152	@ 0x98
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001524:	2301      	movs	r3, #1
 8001526:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800152a:	2301      	movs	r3, #1
 800152c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001530:	2300      	movs	r3, #0
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800153a:	2301      	movs	r3, #1
 800153c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001546:	2301      	movs	r3, #1
 8001548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800154c:	2301      	movs	r3, #1
 800154e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800155e:	2300      	movs	r3, #0
 8001560:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001568:	2300      	movs	r3, #0
 800156a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001584:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001588:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800158a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800158e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001596:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800159a:	4619      	mov	r1, r3
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fe7f 	bl	80012a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015a2:	2301      	movs	r3, #1
 80015a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015ce:	2301      	movs	r3, #1
 80015d0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015d6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015dc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff05 	bl	8001408 <ETH_SetDMAConfig>
}
 80015fe:	bf00      	nop
 8001600:	3798      	adds	r7, #152	@ 0x98
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3305      	adds	r3, #5
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	3204      	adds	r2, #4
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	4313      	orrs	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <ETH_MACAddressConfig+0x68>)
 800162a:	4413      	add	r3, r2
 800162c:	461a      	mov	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3303      	adds	r3, #3
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	061a      	lsls	r2, r3, #24
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3302      	adds	r3, #2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	4313      	orrs	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	4313      	orrs	r3, r2
 8001654:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <ETH_MACAddressConfig+0x6c>)
 800165a:	4413      	add	r3, r2
 800165c:	461a      	mov	r2, r3
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40028040 	.word	0x40028040
 8001674:	40028044 	.word	0x40028044

08001678 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e03e      	b.n	8001704 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68d9      	ldr	r1, [r3, #12]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	3206      	adds	r2, #6
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d80c      	bhi.n	80016e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68d9      	ldr	r1, [r3, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	461a      	mov	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	e004      	b.n	80016f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	461a      	mov	r2, r3
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d9bd      	bls.n	8001686 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800171c:	611a      	str	r2, [r3, #16]
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	e048      	b.n	80017ca <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6919      	ldr	r1, [r3, #16]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001774:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	3212      	adds	r2, #18
 8001796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d80c      	bhi.n	80017ba <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6919      	ldr	r1, [r3, #16]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	461a      	mov	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	e004      	b.n	80017c4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	461a      	mov	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d9b3      	bls.n	8001738 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691a      	ldr	r2, [r3, #16]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017fa:	60da      	str	r2, [r3, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800181e:	2300      	movs	r3, #0
 8001820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	e175      	b.n	8001b14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8164 	bne.w	8001b0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b01      	cmp	r3, #1
 8001850:	d005      	beq.n	800185e <HAL_GPIO_Init+0x56>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d130      	bne.n	80018c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	2203      	movs	r2, #3
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 0201 	and.w	r2, r3, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d017      	beq.n	80018fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d123      	bne.n	8001950 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	08da      	lsrs	r2, r3, #3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3208      	adds	r2, #8
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	08da      	lsrs	r2, r3, #3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3208      	adds	r2, #8
 800194a:	69b9      	ldr	r1, [r7, #24]
 800194c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	2203      	movs	r2, #3
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80be 	beq.w	8001b0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	4b66      	ldr	r3, [pc, #408]	@ (8001b2c <HAL_GPIO_Init+0x324>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a65      	ldr	r2, [pc, #404]	@ (8001b2c <HAL_GPIO_Init+0x324>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b63      	ldr	r3, [pc, #396]	@ (8001b2c <HAL_GPIO_Init+0x324>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019aa:	4a61      	ldr	r2, [pc, #388]	@ (8001b30 <HAL_GPIO_Init+0x328>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a58      	ldr	r2, [pc, #352]	@ (8001b34 <HAL_GPIO_Init+0x32c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d037      	beq.n	8001a46 <HAL_GPIO_Init+0x23e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a57      	ldr	r2, [pc, #348]	@ (8001b38 <HAL_GPIO_Init+0x330>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d031      	beq.n	8001a42 <HAL_GPIO_Init+0x23a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a56      	ldr	r2, [pc, #344]	@ (8001b3c <HAL_GPIO_Init+0x334>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d02b      	beq.n	8001a3e <HAL_GPIO_Init+0x236>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a55      	ldr	r2, [pc, #340]	@ (8001b40 <HAL_GPIO_Init+0x338>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d025      	beq.n	8001a3a <HAL_GPIO_Init+0x232>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a54      	ldr	r2, [pc, #336]	@ (8001b44 <HAL_GPIO_Init+0x33c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01f      	beq.n	8001a36 <HAL_GPIO_Init+0x22e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a53      	ldr	r2, [pc, #332]	@ (8001b48 <HAL_GPIO_Init+0x340>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0x22a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a52      	ldr	r2, [pc, #328]	@ (8001b4c <HAL_GPIO_Init+0x344>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <HAL_GPIO_Init+0x226>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a51      	ldr	r2, [pc, #324]	@ (8001b50 <HAL_GPIO_Init+0x348>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00d      	beq.n	8001a2a <HAL_GPIO_Init+0x222>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a50      	ldr	r2, [pc, #320]	@ (8001b54 <HAL_GPIO_Init+0x34c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d007      	beq.n	8001a26 <HAL_GPIO_Init+0x21e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4f      	ldr	r2, [pc, #316]	@ (8001b58 <HAL_GPIO_Init+0x350>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <HAL_GPIO_Init+0x21a>
 8001a1e:	2309      	movs	r3, #9
 8001a20:	e012      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a22:	230a      	movs	r3, #10
 8001a24:	e010      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a26:	2308      	movs	r3, #8
 8001a28:	e00e      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	e00c      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a2e:	2306      	movs	r3, #6
 8001a30:	e00a      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x240>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	@ (8001b30 <HAL_GPIO_Init+0x328>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8a:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a90:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab4:	4a29      	ldr	r2, [pc, #164]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aba:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ade:	4a1f      	ldr	r2, [pc, #124]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b08:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <HAL_GPIO_Init+0x354>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f ae86 	bls.w	8001828 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40021400 	.word	0x40021400
 8001b4c:	40021800 	.word	0x40021800
 8001b50:	40021c00 	.word	0x40021c00
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40022400 	.word	0x40022400
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b7c:	e003      	b.n	8001b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b7e:	887b      	ldrh	r3, [r7, #2]
 8001b80:	041a      	lsls	r2, r3, #16
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af02      	add	r7, sp, #8
 8001b98:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e108      	b.n	8001db6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff f856 	bl	8000c70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bd2:	d102      	bne.n	8001bda <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fb20 	bl	8004224 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7c1a      	ldrb	r2, [r3, #16]
 8001bec:	f88d 2000 	strb.w	r2, [sp]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bf4:	f002 fabc 	bl	8004170 <USB_CoreInit>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0d5      	b.n	8001db6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fb18 	bl	8004246 <USB_SetCurrentMode>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0c6      	b.n	8001db6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e04a      	b.n	8001cc4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3315      	adds	r3, #21
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3314      	adds	r3, #20
 8001c52:	7bfa      	ldrb	r2, [r7, #15]
 8001c54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	b298      	uxth	r0, r3
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	332e      	adds	r3, #46	@ 0x2e
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3318      	adds	r3, #24
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	331c      	adds	r3, #28
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3320      	adds	r3, #32
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3324      	adds	r3, #36	@ 0x24
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d3af      	bcc.n	8001c2e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e044      	b.n	8001d5e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d00:	7bfa      	ldrb	r2, [r7, #15]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d42:	7bfa      	ldrb	r2, [r7, #15]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	791b      	ldrb	r3, [r3, #4]
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3b5      	bcc.n	8001cd4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7c1a      	ldrb	r2, [r3, #16]
 8001d70:	f88d 2000 	strb.w	r2, [sp]
 8001d74:	3304      	adds	r3, #4
 8001d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d78:	f002 fab2 	bl	80042e0 <USB_DevInit>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e013      	b.n	8001db6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7b1b      	ldrb	r3, [r3, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d102      	bne.n	8001daa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f80b 	bl	8001dc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fc6d 	bl	800468e <USB_DevDisconnect>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_PCDEx_ActivateLPM+0x44>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	10000003 	.word	0x10000003

08001e08 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40007000 	.word	0x40007000

08001e28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e32:	4b23      	ldr	r3, [pc, #140]	@ (8001ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a22      	ldr	r2, [pc, #136]	@ (8001ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ec0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e56:	f7ff f877 	bl	8000f48 <HAL_GetTick>
 8001e5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e5c:	e009      	b.n	8001e72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e5e:	f7ff f873 	bl	8000f48 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e6c:	d901      	bls.n	8001e72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e022      	b.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e72:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e7e:	d1ee      	bne.n	8001e5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e80:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8c:	f7ff f85c 	bl	8000f48 <HAL_GetTick>
 8001e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e92:	e009      	b.n	8001ea8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e94:	f7ff f858 	bl	8000f48 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ea2:	d901      	bls.n	8001ea8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e007      	b.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40007000 	.word	0x40007000

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e29b      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8087 	beq.w	8001ffa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eec:	4b96      	ldr	r3, [pc, #600]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d00c      	beq.n	8001f12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef8:	4b93      	ldr	r3, [pc, #588]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d112      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62>
 8001f04:	4b90      	ldr	r3, [pc, #576]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f10:	d10b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f12:	4b8d      	ldr	r3, [pc, #564]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d06c      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x130>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d168      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e275      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x7a>
 8001f34:	4b84      	ldr	r3, [pc, #528]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a83      	ldr	r2, [pc, #524]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e02e      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x9c>
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b7c      	ldr	r3, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7b      	ldr	r2, [pc, #492]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e01d      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0xc0>
 8001f6e:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b73      	ldr	r3, [pc, #460]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a72      	ldr	r2, [pc, #456]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0xd8>
 8001f88:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b6c      	ldr	r3, [pc, #432]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6b      	ldr	r2, [pc, #428]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe ffce 	bl	8000f48 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7fe ffca 	bl	8000f48 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	@ 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e229      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe8>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe ffba 	bl	8000f48 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7fe ffb6 	bl	8000f48 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e215      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	4b57      	ldr	r3, [pc, #348]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x110>
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d069      	beq.n	80020da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002006:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00b      	beq.n	800202a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002012:	4b4d      	ldr	r3, [pc, #308]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b08      	cmp	r3, #8
 800201c:	d11c      	bne.n	8002058 <HAL_RCC_OscConfig+0x190>
 800201e:	4b4a      	ldr	r3, [pc, #296]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d116      	bne.n	8002058 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202a:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d005      	beq.n	8002042 <HAL_RCC_OscConfig+0x17a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e1e9      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	493d      	ldr	r1, [pc, #244]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002056:	e040      	b.n	80020da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d023      	beq.n	80020a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002060:	4b39      	ldr	r3, [pc, #228]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a38      	ldr	r2, [pc, #224]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe ff6c 	bl	8000f48 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002074:	f7fe ff68 	bl	8000f48 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1c7      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002092:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4929      	ldr	r1, [pc, #164]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]
 80020a6:	e018      	b.n	80020da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a8:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a26      	ldr	r2, [pc, #152]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 80020ae:	f023 0301 	bic.w	r3, r3, #1
 80020b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe ff48 	bl	8000f48 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020bc:	f7fe ff44 	bl	8000f48 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1a3      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d038      	beq.n	8002158 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d019      	beq.n	8002122 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b16      	ldr	r3, [pc, #88]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 80020f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020f2:	4a15      	ldr	r2, [pc, #84]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7fe ff25 	bl	8000f48 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002102:	f7fe ff21 	bl	8000f48 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e180      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x23a>
 8002120:	e01a      	b.n	8002158 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002122:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002126:	4a08      	ldr	r2, [pc, #32]	@ (8002148 <HAL_RCC_OscConfig+0x280>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe ff0b 	bl	8000f48 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe ff07 	bl	8000f48 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d903      	bls.n	800214c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e166      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
 8002148:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214c:	4b92      	ldr	r3, [pc, #584]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 800214e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ee      	bne.n	8002136 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a4 	beq.w	80022ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002166:	4b8c      	ldr	r3, [pc, #560]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10d      	bne.n	800218e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b89      	ldr	r3, [pc, #548]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a88      	ldr	r2, [pc, #544]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b86      	ldr	r3, [pc, #536]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218e:	4b83      	ldr	r3, [pc, #524]	@ (800239c <HAL_RCC_OscConfig+0x4d4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d118      	bne.n	80021cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800219a:	4b80      	ldr	r3, [pc, #512]	@ (800239c <HAL_RCC_OscConfig+0x4d4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a7f      	ldr	r2, [pc, #508]	@ (800239c <HAL_RCC_OscConfig+0x4d4>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a6:	f7fe fecf 	bl	8000f48 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ae:	f7fe fecb 	bl	8000f48 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b64      	cmp	r3, #100	@ 0x64
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e12a      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c0:	4b76      	ldr	r3, [pc, #472]	@ (800239c <HAL_RCC_OscConfig+0x4d4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x31a>
 80021d4:	4b70      	ldr	r3, [pc, #448]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021d8:	4a6f      	ldr	r2, [pc, #444]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e0:	e02d      	b.n	800223e <HAL_RCC_OscConfig+0x376>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_RCC_OscConfig+0x33c>
 80021ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ee:	4a6a      	ldr	r2, [pc, #424]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80021f0:	f023 0301 	bic.w	r3, r3, #1
 80021f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f6:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fa:	4a67      	ldr	r2, [pc, #412]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80021fc:	f023 0304 	bic.w	r3, r3, #4
 8002200:	6713      	str	r3, [r2, #112]	@ 0x70
 8002202:	e01c      	b.n	800223e <HAL_RCC_OscConfig+0x376>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d10c      	bne.n	8002226 <HAL_RCC_OscConfig+0x35e>
 800220c:	4b62      	ldr	r3, [pc, #392]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002210:	4a61      	ldr	r2, [pc, #388]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6713      	str	r3, [r2, #112]	@ 0x70
 8002218:	4b5f      	ldr	r3, [pc, #380]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221c:	4a5e      	ldr	r2, [pc, #376]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6713      	str	r3, [r2, #112]	@ 0x70
 8002224:	e00b      	b.n	800223e <HAL_RCC_OscConfig+0x376>
 8002226:	4b5c      	ldr	r3, [pc, #368]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222a:	4a5b      	ldr	r2, [pc, #364]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6713      	str	r3, [r2, #112]	@ 0x70
 8002232:	4b59      	ldr	r3, [pc, #356]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002236:	4a58      	ldr	r2, [pc, #352]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d015      	beq.n	8002272 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7fe fe7f 	bl	8000f48 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe fe7b 	bl	8000f48 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e0d8      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002264:	4b4c      	ldr	r3, [pc, #304]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ee      	beq.n	800224e <HAL_RCC_OscConfig+0x386>
 8002270:	e014      	b.n	800229c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7fe fe69 	bl	8000f48 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe fe65 	bl	8000f48 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e0c2      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002290:	4b41      	ldr	r3, [pc, #260]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ee      	bne.n	800227a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d105      	bne.n	80022ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80ae 	beq.w	8002414 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b8:	4b37      	ldr	r3, [pc, #220]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d06d      	beq.n	80023a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d14b      	bne.n	8002364 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022cc:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a31      	ldr	r2, [pc, #196]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80022d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fe36 	bl	8000f48 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fe32 	bl	8000f48 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e091      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b29      	ldr	r3, [pc, #164]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230c:	019b      	lsls	r3, r3, #6
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	3b01      	subs	r3, #1
 8002318:	041b      	lsls	r3, r3, #16
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002328:	071b      	lsls	r3, r3, #28
 800232a:	491b      	ldr	r1, [pc, #108]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a18      	ldr	r2, [pc, #96]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fe04 	bl	8000f48 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002344:	f7fe fe00 	bl	8000f48 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e05f      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x47c>
 8002362:	e057      	b.n	8002414 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a0b      	ldr	r2, [pc, #44]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 800236a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fdea 	bl	8000f48 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fde6 	bl	8000f48 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e045      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b03      	ldr	r3, [pc, #12]	@ (8002398 <HAL_RCC_OscConfig+0x4d0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x4b0>
 8002396:	e03d      	b.n	8002414 <HAL_RCC_OscConfig+0x54c>
 8002398:	40023800 	.word	0x40023800
 800239c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_RCC_OscConfig+0x558>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d030      	beq.n	8002410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d129      	bne.n	8002410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d122      	bne.n	8002410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d8:	4293      	cmp	r3, r2
 80023da:	d119      	bne.n	8002410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	3b01      	subs	r3, #1
 80023ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d10f      	bne.n	8002410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d107      	bne.n	8002410 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800

08002424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d0      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b6a      	ldr	r3, [pc, #424]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d910      	bls.n	800246c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b67      	ldr	r3, [pc, #412]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 020f 	bic.w	r2, r3, #15
 8002452:	4965      	ldr	r1, [pc, #404]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	4b63      	ldr	r3, [pc, #396]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d001      	beq.n	800246c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0b8      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002484:	4b59      	ldr	r3, [pc, #356]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a58      	ldr	r2, [pc, #352]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800248e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800249c:	4b53      	ldr	r3, [pc, #332]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a52      	ldr	r2, [pc, #328]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a8:	4b50      	ldr	r3, [pc, #320]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	494d      	ldr	r1, [pc, #308]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d040      	beq.n	8002548 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b47      	ldr	r3, [pc, #284]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d115      	bne.n	8002506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e07f      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b41      	ldr	r3, [pc, #260]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e073      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06b      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002506:	4b39      	ldr	r3, [pc, #228]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f023 0203 	bic.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4936      	ldr	r1, [pc, #216]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002518:	f7fe fd16 	bl	8000f48 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7fe fd12 	bl	8000f48 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e053      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	4b2d      	ldr	r3, [pc, #180]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 020c 	and.w	r2, r3, #12
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	429a      	cmp	r2, r3
 8002546:	d1eb      	bne.n	8002520 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002548:	4b27      	ldr	r3, [pc, #156]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d210      	bcs.n	8002578 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b24      	ldr	r3, [pc, #144]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 020f 	bic.w	r2, r3, #15
 800255e:	4922      	ldr	r1, [pc, #136]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e032      	b.n	80025de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002584:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4916      	ldr	r1, [pc, #88]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a2:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	490e      	ldr	r1, [pc, #56]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b6:	f000 f821 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	490a      	ldr	r1, [pc, #40]	@ (80025f0 <HAL_RCC_ClockConfig+0x1cc>)
 80025c8:	5ccb      	ldrb	r3, [r1, r3]
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	4a09      	ldr	r2, [pc, #36]	@ (80025f4 <HAL_RCC_ClockConfig+0x1d0>)
 80025d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_RCC_ClockConfig+0x1d4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fbc4 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023c00 	.word	0x40023c00
 80025ec:	40023800 	.word	0x40023800
 80025f0:	08007dc0 	.word	0x08007dc0
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000004 	.word	0x20000004

080025fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002600:	b094      	sub	sp, #80	@ 0x50
 8002602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	647b      	str	r3, [r7, #68]	@ 0x44
 8002608:	2300      	movs	r3, #0
 800260a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800260c:	2300      	movs	r3, #0
 800260e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002614:	4b79      	ldr	r3, [pc, #484]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d00d      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x40>
 8002620:	2b08      	cmp	r3, #8
 8002622:	f200 80e1 	bhi.w	80027e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x34>
 800262a:	2b04      	cmp	r3, #4
 800262c:	d003      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x3a>
 800262e:	e0db      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b73      	ldr	r3, [pc, #460]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x204>)
 8002632:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002634:	e0db      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002636:	4b73      	ldr	r3, [pc, #460]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x208>)
 8002638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800263a:	e0d8      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800263c:	4b6f      	ldr	r3, [pc, #444]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x200>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002644:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002646:	4b6d      	ldr	r3, [pc, #436]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d063      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002652:	4b6a      	ldr	r3, [pc, #424]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x200>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	099b      	lsrs	r3, r3, #6
 8002658:	2200      	movs	r2, #0
 800265a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800265c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800265e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002664:	633b      	str	r3, [r7, #48]	@ 0x30
 8002666:	2300      	movs	r3, #0
 8002668:	637b      	str	r3, [r7, #52]	@ 0x34
 800266a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800266e:	4622      	mov	r2, r4
 8002670:	462b      	mov	r3, r5
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	0159      	lsls	r1, r3, #5
 800267c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002680:	0150      	lsls	r0, r2, #5
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4621      	mov	r1, r4
 8002688:	1a51      	subs	r1, r2, r1
 800268a:	6139      	str	r1, [r7, #16]
 800268c:	4629      	mov	r1, r5
 800268e:	eb63 0301 	sbc.w	r3, r3, r1
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026a0:	4659      	mov	r1, fp
 80026a2:	018b      	lsls	r3, r1, #6
 80026a4:	4651      	mov	r1, sl
 80026a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026aa:	4651      	mov	r1, sl
 80026ac:	018a      	lsls	r2, r1, #6
 80026ae:	4651      	mov	r1, sl
 80026b0:	ebb2 0801 	subs.w	r8, r2, r1
 80026b4:	4659      	mov	r1, fp
 80026b6:	eb63 0901 	sbc.w	r9, r3, r1
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ce:	4690      	mov	r8, r2
 80026d0:	4699      	mov	r9, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	eb18 0303 	adds.w	r3, r8, r3
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	462b      	mov	r3, r5
 80026dc:	eb49 0303 	adc.w	r3, r9, r3
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ee:	4629      	mov	r1, r5
 80026f0:	024b      	lsls	r3, r1, #9
 80026f2:	4621      	mov	r1, r4
 80026f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f8:	4621      	mov	r1, r4
 80026fa:	024a      	lsls	r2, r1, #9
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002702:	2200      	movs	r2, #0
 8002704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800270c:	f7fd fda0 	bl	8000250 <__aeabi_uldivmod>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4613      	mov	r3, r2
 8002716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002718:	e058      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271a:	4b38      	ldr	r3, [pc, #224]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x200>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	2200      	movs	r2, #0
 8002722:	4618      	mov	r0, r3
 8002724:	4611      	mov	r1, r2
 8002726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800272a:	623b      	str	r3, [r7, #32]
 800272c:	2300      	movs	r3, #0
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002734:	4642      	mov	r2, r8
 8002736:	464b      	mov	r3, r9
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	0159      	lsls	r1, r3, #5
 8002742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002746:	0150      	lsls	r0, r2, #5
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4641      	mov	r1, r8
 800274e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002752:	4649      	mov	r1, r9
 8002754:	eb63 0b01 	sbc.w	fp, r3, r1
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800276c:	ebb2 040a 	subs.w	r4, r2, sl
 8002770:	eb63 050b 	sbc.w	r5, r3, fp
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	00eb      	lsls	r3, r5, #3
 800277e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002782:	00e2      	lsls	r2, r4, #3
 8002784:	4614      	mov	r4, r2
 8002786:	461d      	mov	r5, r3
 8002788:	4643      	mov	r3, r8
 800278a:	18e3      	adds	r3, r4, r3
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	464b      	mov	r3, r9
 8002790:	eb45 0303 	adc.w	r3, r5, r3
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027a2:	4629      	mov	r1, r5
 80027a4:	028b      	lsls	r3, r1, #10
 80027a6:	4621      	mov	r1, r4
 80027a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027ac:	4621      	mov	r1, r4
 80027ae:	028a      	lsls	r2, r1, #10
 80027b0:	4610      	mov	r0, r2
 80027b2:	4619      	mov	r1, r3
 80027b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b6:	2200      	movs	r2, #0
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	61fa      	str	r2, [r7, #28]
 80027bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027c0:	f7fd fd46 	bl	8000250 <__aeabi_uldivmod>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4613      	mov	r3, r2
 80027ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x200>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027e6:	e002      	b.n	80027ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b05      	ldr	r3, [pc, #20]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x204>)
 80027ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3750      	adds	r7, #80	@ 0x50
 80027f4:	46bd      	mov	sp, r7
 80027f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	00f42400 	.word	0x00f42400
 8002804:	007a1200 	.word	0x007a1200

08002808 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800280c:	4b03      	ldr	r3, [pc, #12]	@ (800281c <HAL_RCC_GetHCLKFreq+0x14>)
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000000 	.word	0x20000000

08002820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002824:	f7ff fff0 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b05      	ldr	r3, [pc, #20]	@ (8002840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	0a9b      	lsrs	r3, r3, #10
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4903      	ldr	r1, [pc, #12]	@ (8002844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40023800 	.word	0x40023800
 8002844:	08007dd0 	.word	0x08007dd0

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800284c:	f7ff ffdc 	bl	8002808 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0b5b      	lsrs	r3, r3, #13
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	@ (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	08007dd0 	.word	0x08007dd0

08002870 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	220f      	movs	r2, #15
 800287e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_RCC_GetClockConfig+0x5c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 0203 	and.w	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800288c:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <HAL_RCC_GetClockConfig+0x5c>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_RCC_GetClockConfig+0x5c>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80028a4:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_RCC_GetClockConfig+0x5c>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	08db      	lsrs	r3, r3, #3
 80028aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028b2:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <HAL_RCC_GetClockConfig+0x60>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 020f 	and.w	r2, r3, #15
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	601a      	str	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40023c00 	.word	0x40023c00

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028fc:	4b69      	ldr	r3, [pc, #420]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a68      	ldr	r2, [pc, #416]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002906:	6093      	str	r3, [r2, #8]
 8002908:	4b66      	ldr	r3, [pc, #408]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	4964      	ldr	r1, [pc, #400]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d017      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800292e:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002930:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002934:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	4959      	ldr	r1, [pc, #356]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800294c:	d101      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800295a:	2301      	movs	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d017      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800296a:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800296c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002970:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	494a      	ldr	r1, [pc, #296]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002988:	d101      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 808b 	beq.w	8002ace <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	4a39      	ldr	r2, [pc, #228]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c4:	4b37      	ldr	r3, [pc, #220]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029d0:	4b35      	ldr	r3, [pc, #212]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a34      	ldr	r2, [pc, #208]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe fab4 	bl	8000f48 <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e4:	f7fe fab0 	bl	8000f48 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	@ 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e38f      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029f6:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a02:	4b28      	ldr	r3, [pc, #160]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d035      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d02e      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a20:	4b20      	ldr	r3, [pc, #128]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a34:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a36:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a40:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a42:	4a18      	ldr	r2, [pc, #96]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a48:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d114      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fa78 	bl	8000f48 <HAL_GetTick>
 8002a58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5c:	f7fe fa74 	bl	8000f48 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e351      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0ee      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a8a:	d111      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a98:	4b04      	ldr	r3, [pc, #16]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a9a:	400b      	ands	r3, r1
 8002a9c:	4901      	ldr	r1, [pc, #4]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	608b      	str	r3, [r1, #8]
 8002aa2:	e00b      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40007000 	.word	0x40007000
 8002aac:	0ffffcff 	.word	0x0ffffcff
 8002ab0:	4bac      	ldr	r3, [pc, #688]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4aab      	ldr	r2, [pc, #684]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002aba:	6093      	str	r3, [r2, #8]
 8002abc:	4ba9      	ldr	r3, [pc, #676]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	49a6      	ldr	r1, [pc, #664]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d010      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ada:	4ba2      	ldr	r3, [pc, #648]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ae0:	4aa0      	ldr	r2, [pc, #640]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ae6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aea:	4b9e      	ldr	r3, [pc, #632]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af4:	499b      	ldr	r1, [pc, #620]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b08:	4b96      	ldr	r3, [pc, #600]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b16:	4993      	ldr	r1, [pc, #588]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b2a:	4b8e      	ldr	r3, [pc, #568]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b38:	498a      	ldr	r1, [pc, #552]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4c:	4b85      	ldr	r3, [pc, #532]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b5a:	4982      	ldr	r1, [pc, #520]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b74:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7c:	4979      	ldr	r1, [pc, #484]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b90:	4b74      	ldr	r3, [pc, #464]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b96:	f023 0203 	bic.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	4971      	ldr	r1, [pc, #452]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb8:	f023 020c 	bic.w	r2, r3, #12
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc0:	4968      	ldr	r1, [pc, #416]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bd4:	4b63      	ldr	r3, [pc, #396]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bda:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	4960      	ldr	r1, [pc, #384]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bfc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c04:	4957      	ldr	r1, [pc, #348]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c18:	4b52      	ldr	r3, [pc, #328]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c26:	494f      	ldr	r1, [pc, #316]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c40:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c48:	4946      	ldr	r1, [pc, #280]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c5c:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	493e      	ldr	r1, [pc, #248]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c7e:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c84:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8c:	4935      	ldr	r1, [pc, #212]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ca0:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cae:	492d      	ldr	r1, [pc, #180]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d011      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cc2:	4b28      	ldr	r3, [pc, #160]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cd0:	4924      	ldr	r1, [pc, #144]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d02:	4b18      	ldr	r3, [pc, #96]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d08:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d10:	4914      	ldr	r1, [pc, #80]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d34:	490b      	ldr	r1, [pc, #44]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00f      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d58:	4902      	ldr	r1, [pc, #8]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d60:	e002      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d74:	4b8a      	ldr	r3, [pc, #552]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d84:	4986      	ldr	r1, [pc, #536]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d98:	4b81      	ldr	r3, [pc, #516]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d9e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da8:	497d      	ldr	r1, [pc, #500]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d006      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80d6 	beq.w	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dc4:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a75      	ldr	r2, [pc, #468]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd0:	f7fe f8ba 	bl	8000f48 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dd8:	f7fe f8b6 	bl	8000f48 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	@ 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e195      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dea:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d021      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d11d      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e0a:	4b65      	ldr	r3, [pc, #404]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e10:	0c1b      	lsrs	r3, r3, #16
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e18:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e1e:	0e1b      	lsrs	r3, r3, #24
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	019a      	lsls	r2, r3, #6
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	071b      	lsls	r3, r3, #28
 8002e3e:	4958      	ldr	r1, [pc, #352]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02e      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e70:	d129      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e72:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e78:	0c1b      	lsrs	r3, r3, #16
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e80:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e86:	0f1b      	lsrs	r3, r3, #28
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	071b      	lsls	r3, r3, #28
 8002ea6:	493e      	ldr	r1, [pc, #248]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002eae:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002eb4:	f023 021f 	bic.w	r2, r3, #31
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	4938      	ldr	r1, [pc, #224]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01d      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ed2:	4b33      	ldr	r3, [pc, #204]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed8:	0e1b      	lsrs	r3, r3, #24
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ee6:	0f1b      	lsrs	r3, r3, #28
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	019a      	lsls	r2, r3, #6
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	431a      	orrs	r2, r3
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	071b      	lsls	r3, r3, #28
 8002f06:	4926      	ldr	r1, [pc, #152]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d011      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	019a      	lsls	r2, r3, #6
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	491a      	ldr	r1, [pc, #104]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f3e:	4b18      	ldr	r3, [pc, #96]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4a:	f7fd fffd 	bl	8000f48 <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f52:	f7fd fff9 	bl	8000f48 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b64      	cmp	r3, #100	@ 0x64
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0d8      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f64:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f040 80ce 	bne.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f78:	4b09      	ldr	r3, [pc, #36]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a08      	ldr	r2, [pc, #32]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7fd ffe0 	bl	8000f48 <HAL_GetTick>
 8002f88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f8c:	f7fd ffdc 	bl	8000f48 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d904      	bls.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0bb      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb0:	d0ec      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d02e      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d12a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fda:	4b51      	ldr	r3, [pc, #324]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fee:	0f1b      	lsrs	r3, r3, #28
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	019a      	lsls	r2, r3, #6
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	061b      	lsls	r3, r3, #24
 8003008:	431a      	orrs	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	071b      	lsls	r3, r3, #28
 800300e:	4944      	ldr	r1, [pc, #272]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003016:	4b42      	ldr	r3, [pc, #264]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800301c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003024:	3b01      	subs	r3, #1
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	493d      	ldr	r1, [pc, #244]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d022      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003044:	d11d      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003046:	4b36      	ldr	r3, [pc, #216]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304c:	0e1b      	lsrs	r3, r3, #24
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003054:	4b32      	ldr	r3, [pc, #200]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	0f1b      	lsrs	r3, r3, #28
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	019a      	lsls	r2, r3, #6
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	4929      	ldr	r1, [pc, #164]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d028      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800308e:	4b24      	ldr	r3, [pc, #144]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003094:	0e1b      	lsrs	r3, r3, #24
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800309c:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	019a      	lsls	r2, r3, #6
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	431a      	orrs	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	4917      	ldr	r1, [pc, #92]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	4911      	ldr	r1, [pc, #68]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fd ff2c 	bl	8000f48 <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030f4:	f7fd ff28 	bl	8000f48 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	@ 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e007      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800310e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003112:	d1ef      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e049      	b.n	80031ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f841 	bl	80031d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f000 f9e8 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b083      	sub	sp, #12
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e054      	b.n	80032aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a26      	ldr	r2, [pc, #152]	@ (80032b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322a:	d01d      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a22      	ldr	r2, [pc, #136]	@ (80032bc <HAL_TIM_Base_Start_IT+0xd4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d018      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a21      	ldr	r2, [pc, #132]	@ (80032c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1f      	ldr	r2, [pc, #124]	@ (80032c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1e      	ldr	r2, [pc, #120]	@ (80032c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1c      	ldr	r2, [pc, #112]	@ (80032cc <HAL_TIM_Base_Start_IT+0xe4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_TIM_Base_Start_IT+0x80>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1b      	ldr	r2, [pc, #108]	@ (80032d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d115      	bne.n	8003294 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	4b19      	ldr	r3, [pc, #100]	@ (80032d4 <HAL_TIM_Base_Start_IT+0xec>)
 8003270:	4013      	ands	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b06      	cmp	r3, #6
 8003278:	d015      	beq.n	80032a6 <HAL_TIM_Base_Start_IT+0xbe>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003280:	d011      	beq.n	80032a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003292:	e008      	b.n	80032a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e000      	b.n	80032a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	40000c00 	.word	0x40000c00
 80032c8:	40010400 	.word	0x40010400
 80032cc:	40014000 	.word	0x40014000
 80032d0:	40001800 	.word	0x40001800
 80032d4:	00010007 	.word	0x00010007

080032d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d020      	beq.n	800333c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01b      	beq.n	800333c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0202 	mvn.w	r2, #2
 800330c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8e9 	bl	80034fa <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8db 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f8ec 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d020      	beq.n	8003388 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0204 	mvn.w	r2, #4
 8003358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8c3 	bl	80034fa <HAL_TIM_IC_CaptureCallback>
 8003374:	e005      	b.n	8003382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8b5 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 f8c6 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d020      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0208 	mvn.w	r2, #8
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2204      	movs	r2, #4
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f89d 	bl	80034fa <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f88f 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8a0 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d020      	beq.n	8003420 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01b      	beq.n	8003420 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0210 	mvn.w	r2, #16
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2208      	movs	r2, #8
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f877 	bl	80034fa <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f869 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f87a 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0201 	mvn.w	r2, #1
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fabe 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d104      	bne.n	8003458 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00c      	beq.n	8003472 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800346a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f913 	bl	8003698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800348e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f90b 	bl	80036ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d007      	beq.n	80034ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80034b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f834 	bl	8003522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00c      	beq.n	80034de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d007      	beq.n	80034de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f06f 0220 	mvn.w	r2, #32
 80034d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8d3 	bl	8003684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034de:	bf00      	nop
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a43      	ldr	r2, [pc, #268]	@ (8003658 <TIM_Base_SetConfig+0x120>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d013      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003556:	d00f      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a40      	ldr	r2, [pc, #256]	@ (800365c <TIM_Base_SetConfig+0x124>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00b      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3f      	ldr	r2, [pc, #252]	@ (8003660 <TIM_Base_SetConfig+0x128>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3e      	ldr	r2, [pc, #248]	@ (8003664 <TIM_Base_SetConfig+0x12c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_Base_SetConfig+0x40>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a3d      	ldr	r2, [pc, #244]	@ (8003668 <TIM_Base_SetConfig+0x130>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d108      	bne.n	800358a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a32      	ldr	r2, [pc, #200]	@ (8003658 <TIM_Base_SetConfig+0x120>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d02b      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003598:	d027      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2f      	ldr	r2, [pc, #188]	@ (800365c <TIM_Base_SetConfig+0x124>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d023      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003660 <TIM_Base_SetConfig+0x128>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01f      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003664 <TIM_Base_SetConfig+0x12c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01b      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003668 <TIM_Base_SetConfig+0x130>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d017      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a2b      	ldr	r2, [pc, #172]	@ (800366c <TIM_Base_SetConfig+0x134>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003670 <TIM_Base_SetConfig+0x138>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00f      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a29      	ldr	r2, [pc, #164]	@ (8003674 <TIM_Base_SetConfig+0x13c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00b      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <TIM_Base_SetConfig+0x140>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a27      	ldr	r2, [pc, #156]	@ (800367c <TIM_Base_SetConfig+0x144>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d003      	beq.n	80035ea <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a26      	ldr	r2, [pc, #152]	@ (8003680 <TIM_Base_SetConfig+0x148>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d108      	bne.n	80035fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a0e      	ldr	r2, [pc, #56]	@ (8003658 <TIM_Base_SetConfig+0x120>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d003      	beq.n	800362a <TIM_Base_SetConfig+0xf2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a10      	ldr	r2, [pc, #64]	@ (8003668 <TIM_Base_SetConfig+0x130>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d103      	bne.n	8003632 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f043 0204 	orr.w	r2, r3, #4
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800
 8003664:	40000c00 	.word	0x40000c00
 8003668:	40010400 	.word	0x40010400
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800
 8003678:	40001800 	.word	0x40001800
 800367c:	40001c00 	.word	0x40001c00
 8003680:	40002000 	.word	0x40002000

08003684 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e040      	b.n	8003754 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fa64 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2224      	movs	r2, #36	@ 0x24
 80036ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fb16 	bl	8003d38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f8af 	bl	8003870 <UART_SetConfig>
 8003712:	4603      	mov	r3, r0
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e01b      	b.n	8003754 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800372a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800373a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fb95 	bl	8003e7c <UART_CheckIdleState>
 8003752:	4603      	mov	r3, r0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	@ 0x28
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003770:	2b20      	cmp	r3, #32
 8003772:	d177      	bne.n	8003864 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_UART_Transmit+0x24>
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e070      	b.n	8003866 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2221      	movs	r2, #33	@ 0x21
 8003790:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003792:	f7fd fbd9 	bl	8000f48 <HAL_GetTick>
 8003796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	88fa      	ldrh	r2, [r7, #6]
 80037a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037b0:	d108      	bne.n	80037c4 <HAL_UART_Transmit+0x68>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d104      	bne.n	80037c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	e003      	b.n	80037cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037cc:	e02f      	b.n	800382e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2180      	movs	r1, #128	@ 0x80
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fbf7 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e03b      	b.n	8003866 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	3302      	adds	r3, #2
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e007      	b.n	800381c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1c9      	bne.n	80037ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	2140      	movs	r1, #64	@ 0x40
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fbc1 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e005      	b.n	8003866 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4ba6      	ldr	r3, [pc, #664]	@ (8003b34 <UART_SetConfig+0x2c4>)
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a94      	ldr	r2, [pc, #592]	@ (8003b38 <UART_SetConfig+0x2c8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d120      	bne.n	800392e <UART_SetConfig+0xbe>
 80038ec:	4b93      	ldr	r3, [pc, #588]	@ (8003b3c <UART_SetConfig+0x2cc>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d816      	bhi.n	8003928 <UART_SetConfig+0xb8>
 80038fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <UART_SetConfig+0x90>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003911 	.word	0x08003911
 8003904:	0800391d 	.word	0x0800391d
 8003908:	08003917 	.word	0x08003917
 800390c:	08003923 	.word	0x08003923
 8003910:	2301      	movs	r3, #1
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e150      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003916:	2302      	movs	r3, #2
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e14d      	b.n	8003bb8 <UART_SetConfig+0x348>
 800391c:	2304      	movs	r3, #4
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e14a      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003922:	2308      	movs	r3, #8
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e147      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003928:	2310      	movs	r3, #16
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e144      	b.n	8003bb8 <UART_SetConfig+0x348>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a83      	ldr	r2, [pc, #524]	@ (8003b40 <UART_SetConfig+0x2d0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d132      	bne.n	800399e <UART_SetConfig+0x12e>
 8003938:	4b80      	ldr	r3, [pc, #512]	@ (8003b3c <UART_SetConfig+0x2cc>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d828      	bhi.n	8003998 <UART_SetConfig+0x128>
 8003946:	a201      	add	r2, pc, #4	@ (adr r2, 800394c <UART_SetConfig+0xdc>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	08003981 	.word	0x08003981
 8003950:	08003999 	.word	0x08003999
 8003954:	08003999 	.word	0x08003999
 8003958:	08003999 	.word	0x08003999
 800395c:	0800398d 	.word	0x0800398d
 8003960:	08003999 	.word	0x08003999
 8003964:	08003999 	.word	0x08003999
 8003968:	08003999 	.word	0x08003999
 800396c:	08003987 	.word	0x08003987
 8003970:	08003999 	.word	0x08003999
 8003974:	08003999 	.word	0x08003999
 8003978:	08003999 	.word	0x08003999
 800397c:	08003993 	.word	0x08003993
 8003980:	2300      	movs	r3, #0
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e118      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003986:	2302      	movs	r3, #2
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e115      	b.n	8003bb8 <UART_SetConfig+0x348>
 800398c:	2304      	movs	r3, #4
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e112      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003992:	2308      	movs	r3, #8
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e10f      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003998:	2310      	movs	r3, #16
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e10c      	b.n	8003bb8 <UART_SetConfig+0x348>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a68      	ldr	r2, [pc, #416]	@ (8003b44 <UART_SetConfig+0x2d4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d120      	bne.n	80039ea <UART_SetConfig+0x17a>
 80039a8:	4b64      	ldr	r3, [pc, #400]	@ (8003b3c <UART_SetConfig+0x2cc>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039b2:	2b30      	cmp	r3, #48	@ 0x30
 80039b4:	d013      	beq.n	80039de <UART_SetConfig+0x16e>
 80039b6:	2b30      	cmp	r3, #48	@ 0x30
 80039b8:	d814      	bhi.n	80039e4 <UART_SetConfig+0x174>
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d009      	beq.n	80039d2 <UART_SetConfig+0x162>
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d810      	bhi.n	80039e4 <UART_SetConfig+0x174>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <UART_SetConfig+0x15c>
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d006      	beq.n	80039d8 <UART_SetConfig+0x168>
 80039ca:	e00b      	b.n	80039e4 <UART_SetConfig+0x174>
 80039cc:	2300      	movs	r3, #0
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e0f2      	b.n	8003bb8 <UART_SetConfig+0x348>
 80039d2:	2302      	movs	r3, #2
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e0ef      	b.n	8003bb8 <UART_SetConfig+0x348>
 80039d8:	2304      	movs	r3, #4
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e0ec      	b.n	8003bb8 <UART_SetConfig+0x348>
 80039de:	2308      	movs	r3, #8
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e0e9      	b.n	8003bb8 <UART_SetConfig+0x348>
 80039e4:	2310      	movs	r3, #16
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e0e6      	b.n	8003bb8 <UART_SetConfig+0x348>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a56      	ldr	r2, [pc, #344]	@ (8003b48 <UART_SetConfig+0x2d8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d120      	bne.n	8003a36 <UART_SetConfig+0x1c6>
 80039f4:	4b51      	ldr	r3, [pc, #324]	@ (8003b3c <UART_SetConfig+0x2cc>)
 80039f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80039fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a00:	d013      	beq.n	8003a2a <UART_SetConfig+0x1ba>
 8003a02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a04:	d814      	bhi.n	8003a30 <UART_SetConfig+0x1c0>
 8003a06:	2b80      	cmp	r3, #128	@ 0x80
 8003a08:	d009      	beq.n	8003a1e <UART_SetConfig+0x1ae>
 8003a0a:	2b80      	cmp	r3, #128	@ 0x80
 8003a0c:	d810      	bhi.n	8003a30 <UART_SetConfig+0x1c0>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <UART_SetConfig+0x1a8>
 8003a12:	2b40      	cmp	r3, #64	@ 0x40
 8003a14:	d006      	beq.n	8003a24 <UART_SetConfig+0x1b4>
 8003a16:	e00b      	b.n	8003a30 <UART_SetConfig+0x1c0>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e0cc      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e0c9      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a24:	2304      	movs	r3, #4
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e0c6      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a2a:	2308      	movs	r3, #8
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e0c3      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a30:	2310      	movs	r3, #16
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e0c0      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a44      	ldr	r2, [pc, #272]	@ (8003b4c <UART_SetConfig+0x2dc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d125      	bne.n	8003a8c <UART_SetConfig+0x21c>
 8003a40:	4b3e      	ldr	r3, [pc, #248]	@ (8003b3c <UART_SetConfig+0x2cc>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a4e:	d017      	beq.n	8003a80 <UART_SetConfig+0x210>
 8003a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a54:	d817      	bhi.n	8003a86 <UART_SetConfig+0x216>
 8003a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a5a:	d00b      	beq.n	8003a74 <UART_SetConfig+0x204>
 8003a5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a60:	d811      	bhi.n	8003a86 <UART_SetConfig+0x216>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <UART_SetConfig+0x1fe>
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a6a:	d006      	beq.n	8003a7a <UART_SetConfig+0x20a>
 8003a6c:	e00b      	b.n	8003a86 <UART_SetConfig+0x216>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e0a1      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a74:	2302      	movs	r3, #2
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e09e      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e09b      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a80:	2308      	movs	r3, #8
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e098      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a86:	2310      	movs	r3, #16
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e095      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2f      	ldr	r2, [pc, #188]	@ (8003b50 <UART_SetConfig+0x2e0>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d125      	bne.n	8003ae2 <UART_SetConfig+0x272>
 8003a96:	4b29      	ldr	r3, [pc, #164]	@ (8003b3c <UART_SetConfig+0x2cc>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003aa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003aa4:	d017      	beq.n	8003ad6 <UART_SetConfig+0x266>
 8003aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003aaa:	d817      	bhi.n	8003adc <UART_SetConfig+0x26c>
 8003aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab0:	d00b      	beq.n	8003aca <UART_SetConfig+0x25a>
 8003ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab6:	d811      	bhi.n	8003adc <UART_SetConfig+0x26c>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <UART_SetConfig+0x254>
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ac0:	d006      	beq.n	8003ad0 <UART_SetConfig+0x260>
 8003ac2:	e00b      	b.n	8003adc <UART_SetConfig+0x26c>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e076      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003aca:	2302      	movs	r3, #2
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e073      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e070      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e06d      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003adc:	2310      	movs	r3, #16
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e06a      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d138      	bne.n	8003b5e <UART_SetConfig+0x2ee>
 8003aec:	4b13      	ldr	r3, [pc, #76]	@ (8003b3c <UART_SetConfig+0x2cc>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003af6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003afa:	d017      	beq.n	8003b2c <UART_SetConfig+0x2bc>
 8003afc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b00:	d82a      	bhi.n	8003b58 <UART_SetConfig+0x2e8>
 8003b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b06:	d00b      	beq.n	8003b20 <UART_SetConfig+0x2b0>
 8003b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b0c:	d824      	bhi.n	8003b58 <UART_SetConfig+0x2e8>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <UART_SetConfig+0x2aa>
 8003b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b16:	d006      	beq.n	8003b26 <UART_SetConfig+0x2b6>
 8003b18:	e01e      	b.n	8003b58 <UART_SetConfig+0x2e8>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	77fb      	strb	r3, [r7, #31]
 8003b1e:	e04b      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003b20:	2302      	movs	r3, #2
 8003b22:	77fb      	strb	r3, [r7, #31]
 8003b24:	e048      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003b26:	2304      	movs	r3, #4
 8003b28:	77fb      	strb	r3, [r7, #31]
 8003b2a:	e045      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e042      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003b32:	bf00      	nop
 8003b34:	efff69f3 	.word	0xefff69f3
 8003b38:	40011000 	.word	0x40011000
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40004400 	.word	0x40004400
 8003b44:	40004800 	.word	0x40004800
 8003b48:	40004c00 	.word	0x40004c00
 8003b4c:	40005000 	.word	0x40005000
 8003b50:	40011400 	.word	0x40011400
 8003b54:	40007800 	.word	0x40007800
 8003b58:	2310      	movs	r3, #16
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e02c      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a72      	ldr	r2, [pc, #456]	@ (8003d2c <UART_SetConfig+0x4bc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d125      	bne.n	8003bb4 <UART_SetConfig+0x344>
 8003b68:	4b71      	ldr	r3, [pc, #452]	@ (8003d30 <UART_SetConfig+0x4c0>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003b72:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b76:	d017      	beq.n	8003ba8 <UART_SetConfig+0x338>
 8003b78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003b7c:	d817      	bhi.n	8003bae <UART_SetConfig+0x33e>
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b82:	d00b      	beq.n	8003b9c <UART_SetConfig+0x32c>
 8003b84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b88:	d811      	bhi.n	8003bae <UART_SetConfig+0x33e>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <UART_SetConfig+0x326>
 8003b8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b92:	d006      	beq.n	8003ba2 <UART_SetConfig+0x332>
 8003b94:	e00b      	b.n	8003bae <UART_SetConfig+0x33e>
 8003b96:	2300      	movs	r3, #0
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e00d      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e00a      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e007      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e004      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003bae:	2310      	movs	r3, #16
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	e001      	b.n	8003bb8 <UART_SetConfig+0x348>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc0:	d15b      	bne.n	8003c7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003bc2:	7ffb      	ldrb	r3, [r7, #31]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d828      	bhi.n	8003c1a <UART_SetConfig+0x3aa>
 8003bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd0 <UART_SetConfig+0x360>)
 8003bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bce:	bf00      	nop
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003c05 	.word	0x08003c05
 8003bdc:	08003c1b 	.word	0x08003c1b
 8003be0:	08003c0b 	.word	0x08003c0b
 8003be4:	08003c1b 	.word	0x08003c1b
 8003be8:	08003c1b 	.word	0x08003c1b
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c13 	.word	0x08003c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7fe fe14 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8003bf8:	61b8      	str	r0, [r7, #24]
        break;
 8003bfa:	e013      	b.n	8003c24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7fe fe24 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8003c00:	61b8      	str	r0, [r7, #24]
        break;
 8003c02:	e00f      	b.n	8003c24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c04:	4b4b      	ldr	r3, [pc, #300]	@ (8003d34 <UART_SetConfig+0x4c4>)
 8003c06:	61bb      	str	r3, [r7, #24]
        break;
 8003c08:	e00c      	b.n	8003c24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0a:	f7fe fcf7 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8003c0e:	61b8      	str	r0, [r7, #24]
        break;
 8003c10:	e008      	b.n	8003c24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c16:	61bb      	str	r3, [r7, #24]
        break;
 8003c18:	e004      	b.n	8003c24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	77bb      	strb	r3, [r7, #30]
        break;
 8003c22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d074      	beq.n	8003d14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	005a      	lsls	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	441a      	add	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	d916      	bls.n	8003c74 <UART_SetConfig+0x404>
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c4c:	d212      	bcs.n	8003c74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f023 030f 	bic.w	r3, r3, #15
 8003c56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	89fb      	ldrh	r3, [r7, #14]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	89fa      	ldrh	r2, [r7, #14]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	e04f      	b.n	8003d14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	77bb      	strb	r3, [r7, #30]
 8003c78:	e04c      	b.n	8003d14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c7a:	7ffb      	ldrb	r3, [r7, #31]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d828      	bhi.n	8003cd2 <UART_SetConfig+0x462>
 8003c80:	a201      	add	r2, pc, #4	@ (adr r2, 8003c88 <UART_SetConfig+0x418>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003cad 	.word	0x08003cad
 8003c8c:	08003cb5 	.word	0x08003cb5
 8003c90:	08003cbd 	.word	0x08003cbd
 8003c94:	08003cd3 	.word	0x08003cd3
 8003c98:	08003cc3 	.word	0x08003cc3
 8003c9c:	08003cd3 	.word	0x08003cd3
 8003ca0:	08003cd3 	.word	0x08003cd3
 8003ca4:	08003cd3 	.word	0x08003cd3
 8003ca8:	08003ccb 	.word	0x08003ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cac:	f7fe fdb8 	bl	8002820 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	61b8      	str	r0, [r7, #24]
        break;
 8003cb2:	e013      	b.n	8003cdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cb4:	f7fe fdc8 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8003cb8:	61b8      	str	r0, [r7, #24]
        break;
 8003cba:	e00f      	b.n	8003cdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d34 <UART_SetConfig+0x4c4>)
 8003cbe:	61bb      	str	r3, [r7, #24]
        break;
 8003cc0:	e00c      	b.n	8003cdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cc2:	f7fe fc9b 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8003cc6:	61b8      	str	r0, [r7, #24]
        break;
 8003cc8:	e008      	b.n	8003cdc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cce:	61bb      	str	r3, [r7, #24]
        break;
 8003cd0:	e004      	b.n	8003cdc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	77bb      	strb	r3, [r7, #30]
        break;
 8003cda:	bf00      	nop
    }

    if (pclk != 0U)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d018      	beq.n	8003d14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	085a      	lsrs	r2, r3, #1
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	441a      	add	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b0f      	cmp	r3, #15
 8003cfa:	d909      	bls.n	8003d10 <UART_SetConfig+0x4a0>
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d02:	d205      	bcs.n	8003d10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	e001      	b.n	8003d14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d20:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3720      	adds	r7, #32
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40007c00 	.word	0x40007c00
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400

08003d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e36:	d10a      	bne.n	8003e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b098      	sub	sp, #96	@ 0x60
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e8c:	f7fd f85c 	bl	8000f48 <HAL_GetTick>
 8003e90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d12e      	bne.n	8003efe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f88c 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d021      	beq.n	8003efe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec2:	e853 3f00 	ldrex	r3, [r3]
 8003ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e6      	bne.n	8003eba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e062      	b.n	8003fc4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d149      	bne.n	8003fa0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f856 	bl	8003fcc <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d03c      	beq.n	8003fa0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	623b      	str	r3, [r7, #32]
   return(result);
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e6      	bne.n	8003f26 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f78:	61fa      	str	r2, [r7, #28]
 8003f7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	69b9      	ldr	r1, [r7, #24]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	617b      	str	r3, [r7, #20]
   return(result);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e011      	b.n	8003fc4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3758      	adds	r7, #88	@ 0x58
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fdc:	e04f      	b.n	800407e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d04b      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	f7fc ffaf 	bl	8000f48 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d302      	bcc.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e04e      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d037      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xb2>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b80      	cmp	r3, #128	@ 0x80
 8004012:	d034      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d031      	beq.n	800407e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d110      	bne.n	800404a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2208      	movs	r2, #8
 800402e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f838 	bl	80040a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2208      	movs	r2, #8
 800403a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e029      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004054:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004058:	d111      	bne.n	800407e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f81e 	bl	80040a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e00f      	b.n	800409e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4013      	ands	r3, r2
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	bf0c      	ite	eq
 800408e:	2301      	moveq	r3, #1
 8004090:	2300      	movne	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	429a      	cmp	r2, r3
 800409a:	d0a0      	beq.n	8003fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b095      	sub	sp, #84	@ 0x54
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e6      	bne.n	80040ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3308      	adds	r3, #8
 80040e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004100:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004102:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004118:	2b01      	cmp	r3, #1
 800411a:	d118      	bne.n	800414e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	60bb      	str	r3, [r7, #8]
   return(result);
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f023 0310 	bic.w	r3, r3, #16
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6979      	ldr	r1, [r7, #20]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	613b      	str	r3, [r7, #16]
   return(result);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e6      	bne.n	800411c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004162:	bf00      	nop
 8004164:	3754      	adds	r7, #84	@ 0x54
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004170:	b084      	sub	sp, #16
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	f107 001c 	add.w	r0, r7, #28
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004182:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004186:	2b01      	cmp	r3, #1
 8004188:	d121      	bne.n	80041ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	4b21      	ldr	r3, [pc, #132]	@ (8004220 <USB_CoreInit+0xb0>)
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d105      	bne.n	80041c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fa92 	bl	80046ec <USB_CoreReset>
 80041c8:	4603      	mov	r3, r0
 80041ca:	73fb      	strb	r3, [r7, #15]
 80041cc:	e010      	b.n	80041f0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa86 	bl	80046ec <USB_CoreReset>
 80041e0:	4603      	mov	r3, r0
 80041e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80041f0:	7fbb      	ldrb	r3, [r7, #30]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d10b      	bne.n	800420e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f043 0206 	orr.w	r2, r3, #6
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800421a:	b004      	add	sp, #16
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	ffbdffbf 	.word	0xffbdffbf

08004224 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 0201 	bic.w	r2, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d115      	bne.n	8004294 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004274:	200a      	movs	r0, #10
 8004276:	f7fc fe73 	bl	8000f60 <HAL_Delay>
      ms += 10U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	330a      	adds	r3, #10
 800427e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fa25 	bl	80046d0 <USB_GetMode>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d01e      	beq.n	80042ca <USB_SetCurrentMode+0x84>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004290:	d9f0      	bls.n	8004274 <USB_SetCurrentMode+0x2e>
 8004292:	e01a      	b.n	80042ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d115      	bne.n	80042c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042a6:	200a      	movs	r0, #10
 80042a8:	f7fc fe5a 	bl	8000f60 <HAL_Delay>
      ms += 10U;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	330a      	adds	r3, #10
 80042b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa0c 	bl	80046d0 <USB_GetMode>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <USB_SetCurrentMode+0x84>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80042c2:	d9f0      	bls.n	80042a6 <USB_SetCurrentMode+0x60>
 80042c4:	e001      	b.n	80042ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e005      	b.n	80042d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80042ce:	d101      	bne.n	80042d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e000      	b.n	80042d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042e0:	b084      	sub	sp, #16
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80042ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e009      	b.n	8004314 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3340      	adds	r3, #64	@ 0x40
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	2200      	movs	r2, #0
 800430c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3301      	adds	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b0e      	cmp	r3, #14
 8004318:	d9f2      	bls.n	8004300 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800431a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800431e:	2b00      	cmp	r3, #0
 8004320:	d11c      	bne.n	800435c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004330:	f043 0302 	orr.w	r3, r3, #2
 8004334:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e005      	b.n	8004368 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004360:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800436e:	461a      	mov	r2, r3
 8004370:	2300      	movs	r3, #0
 8004372:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004374:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004378:	2b01      	cmp	r3, #1
 800437a:	d10d      	bne.n	8004398 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800437c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004384:	2100      	movs	r1, #0
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f968 	bl	800465c <USB_SetDevSpeed>
 800438c:	e008      	b.n	80043a0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800438e:	2101      	movs	r1, #1
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f963 	bl	800465c <USB_SetDevSpeed>
 8004396:	e003      	b.n	80043a0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004398:	2103      	movs	r1, #3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f95e 	bl	800465c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043a0:	2110      	movs	r1, #16
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f8fa 	bl	800459c <USB_FlushTxFifo>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f924 	bl	8004600 <USB_FlushRxFifo>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c8:	461a      	mov	r2, r3
 80043ca:	2300      	movs	r3, #0
 80043cc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d4:	461a      	mov	r2, r3
 80043d6:	2300      	movs	r3, #0
 80043d8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	e043      	b.n	8004474 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004402:	d118      	bne.n	8004436 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004416:	461a      	mov	r2, r3
 8004418:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e013      	b.n	8004448 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800442c:	461a      	mov	r2, r3
 800442e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	e008      	b.n	8004448 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004442:	461a      	mov	r2, r3
 8004444:	2300      	movs	r3, #0
 8004446:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004454:	461a      	mov	r2, r3
 8004456:	2300      	movs	r3, #0
 8004458:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004466:	461a      	mov	r2, r3
 8004468:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800446c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3301      	adds	r3, #1
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004478:	461a      	mov	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4293      	cmp	r3, r2
 800447e:	d3b5      	bcc.n	80043ec <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e043      	b.n	800450e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800449c:	d118      	bne.n	80044d0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044b0:	461a      	mov	r2, r3
 80044b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	e013      	b.n	80044e2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e008      	b.n	80044e2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044dc:	461a      	mov	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ee:	461a      	mov	r2, r3
 80044f0:	2300      	movs	r3, #0
 80044f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004500:	461a      	mov	r2, r3
 8004502:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004506:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004512:	461a      	mov	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4293      	cmp	r3, r2
 8004518:	d3b5      	bcc.n	8004486 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800452c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800453a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800453c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f043 0210 	orr.w	r2, r3, #16
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699a      	ldr	r2, [r3, #24]
 8004554:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <USB_DevInit+0x2b4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800455c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f043 0208 	orr.w	r2, r3, #8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004570:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004574:	2b01      	cmp	r3, #1
 8004576:	d105      	bne.n	8004584 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <USB_DevInit+0x2b8>)
 800457e:	4313      	orrs	r3, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004584:	7dfb      	ldrb	r3, [r7, #23]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004590:	b004      	add	sp, #16
 8004592:	4770      	bx	lr
 8004594:	803c3800 	.word	0x803c3800
 8004598:	40000004 	.word	0x40000004

0800459c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045b6:	d901      	bls.n	80045bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e01b      	b.n	80045f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	daf2      	bge.n	80045aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	019b      	lsls	r3, r3, #6
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045e0:	d901      	bls.n	80045e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e006      	b.n	80045f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d0f0      	beq.n	80045d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3301      	adds	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004618:	d901      	bls.n	800461e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e018      	b.n	8004650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	daf2      	bge.n	800460c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2210      	movs	r2, #16
 800462e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800463c:	d901      	bls.n	8004642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e006      	b.n	8004650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b10      	cmp	r3, #16
 800464c:	d0f0      	beq.n	8004630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80046a8:	f023 0303 	bic.w	r3, r3, #3
 80046ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046bc:	f043 0302 	orr.w	r3, r3, #2
 80046c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0301 	and.w	r3, r3, #1
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004704:	d901      	bls.n	800470a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e022      	b.n	8004750 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	daf2      	bge.n	80046f8 <USB_CoreReset+0xc>

  count = 10U;
 8004712:	230a      	movs	r3, #10
 8004714:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004716:	e002      	b.n	800471e <USB_CoreReset+0x32>
  {
    count--;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f9      	bne.n	8004718 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f043 0201 	orr.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800473c:	d901      	bls.n	8004742 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e006      	b.n	8004750 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d0f0      	beq.n	8004730 <USB_CoreReset+0x44>

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004772:	f3ef 8305 	mrs	r3, IPSR
 8004776:	60bb      	str	r3, [r7, #8]
  return(result);
 8004778:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10f      	bne.n	800479e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477e:	f3ef 8310 	mrs	r3, PRIMASK
 8004782:	607b      	str	r3, [r7, #4]
  return(result);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800478a:	f3ef 8311 	mrs	r3, BASEPRI
 800478e:	603b      	str	r3, [r7, #0]
  return(result);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <osKernelInitialize+0x3a>
 8004796:	4b0e      	ldr	r3, [pc, #56]	@ (80047d0 <osKernelInitialize+0x64>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d103      	bne.n	80047a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800479e:	f06f 0305 	mvn.w	r3, #5
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e00c      	b.n	80047c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047a6:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <osKernelInitialize+0x64>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80047ae:	4b08      	ldr	r3, [pc, #32]	@ (80047d0 <osKernelInitialize+0x64>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e002      	b.n	80047c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80047ba:	f04f 33ff 	mov.w	r3, #4294967295
 80047be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047c0:	68fb      	ldr	r3, [r7, #12]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000820 	.word	0x20000820

080047d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047da:	f3ef 8305 	mrs	r3, IPSR
 80047de:	60bb      	str	r3, [r7, #8]
  return(result);
 80047e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ea:	607b      	str	r3, [r7, #4]
  return(result);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047f2:	f3ef 8311 	mrs	r3, BASEPRI
 80047f6:	603b      	str	r3, [r7, #0]
  return(result);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <osKernelStart+0x3a>
 80047fe:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <osKernelStart+0x68>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d103      	bne.n	800480e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004806:	f06f 0305 	mvn.w	r3, #5
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e010      	b.n	8004830 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800480e:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <osKernelStart+0x68>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d109      	bne.n	800482a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004816:	f7ff ffa1 	bl	800475c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800481a:	4b08      	ldr	r3, [pc, #32]	@ (800483c <osKernelStart+0x68>)
 800481c:	2202      	movs	r2, #2
 800481e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004820:	f001 fc42 	bl	80060a8 <vTaskStartScheduler>
      stat = osOK;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	e002      	b.n	8004830 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295
 800482e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004830:	68fb      	ldr	r3, [r7, #12]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000820 	.word	0x20000820

08004840 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b090      	sub	sp, #64	@ 0x40
 8004844:	af04      	add	r7, sp, #16
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004850:	f3ef 8305 	mrs	r3, IPSR
 8004854:	61fb      	str	r3, [r7, #28]
  return(result);
 8004856:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 808f 	bne.w	800497c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485e:	f3ef 8310 	mrs	r3, PRIMASK
 8004862:	61bb      	str	r3, [r7, #24]
  return(result);
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d105      	bne.n	8004876 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800486a:	f3ef 8311 	mrs	r3, BASEPRI
 800486e:	617b      	str	r3, [r7, #20]
  return(result);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <osThreadNew+0x3e>
 8004876:	4b44      	ldr	r3, [pc, #272]	@ (8004988 <osThreadNew+0x148>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d07e      	beq.n	800497c <osThreadNew+0x13c>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d07b      	beq.n	800497c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004888:	2318      	movs	r3, #24
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004890:	f04f 33ff 	mov.w	r3, #4294967295
 8004894:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d045      	beq.n	8004928 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <osThreadNew+0x6a>
        name = attr->name;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <osThreadNew+0x90>
 80048be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c0:	2b38      	cmp	r3, #56	@ 0x38
 80048c2:	d805      	bhi.n	80048d0 <osThreadNew+0x90>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <osThreadNew+0x94>
        return (NULL);
 80048d0:	2300      	movs	r3, #0
 80048d2:	e054      	b.n	800497e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00e      	beq.n	800490a <osThreadNew+0xca>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b5b      	cmp	r3, #91	@ 0x5b
 80048f2:	d90a      	bls.n	800490a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d006      	beq.n	800490a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <osThreadNew+0xca>
        mem = 1;
 8004904:	2301      	movs	r3, #1
 8004906:	623b      	str	r3, [r7, #32]
 8004908:	e010      	b.n	800492c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10c      	bne.n	800492c <osThreadNew+0xec>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d108      	bne.n	800492c <osThreadNew+0xec>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d104      	bne.n	800492c <osThreadNew+0xec>
          mem = 0;
 8004922:	2300      	movs	r3, #0
 8004924:	623b      	str	r3, [r7, #32]
 8004926:	e001      	b.n	800492c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d110      	bne.n	8004954 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800493a:	9202      	str	r2, [sp, #8]
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f001 f9c7 	bl	8005cdc <xTaskCreateStatic>
 800494e:	4603      	mov	r3, r0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e013      	b.n	800497c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d110      	bne.n	800497c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	b29a      	uxth	r2, r3
 800495e:	f107 0310 	add.w	r3, r7, #16
 8004962:	9301      	str	r3, [sp, #4]
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f001 fa1b 	bl	8005da8 <xTaskCreate>
 8004972:	4603      	mov	r3, r0
 8004974:	2b01      	cmp	r3, #1
 8004976:	d001      	beq.n	800497c <osThreadNew+0x13c>
          hTask = NULL;
 8004978:	2300      	movs	r3, #0
 800497a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800497c:	693b      	ldr	r3, [r7, #16]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3730      	adds	r7, #48	@ 0x30
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000820 	.word	0x20000820

0800498c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004994:	f3ef 8305 	mrs	r3, IPSR
 8004998:	613b      	str	r3, [r7, #16]
  return(result);
 800499a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10f      	bne.n	80049c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049a0:	f3ef 8310 	mrs	r3, PRIMASK
 80049a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049ac:	f3ef 8311 	mrs	r3, BASEPRI
 80049b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <osDelay+0x3c>
 80049b8:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <osDelay+0x58>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d103      	bne.n	80049c8 <osDelay+0x3c>
    stat = osErrorISR;
 80049c0:	f06f 0305 	mvn.w	r3, #5
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e007      	b.n	80049d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 fb30 	bl	8006038 <vTaskDelay>
    }
  }

  return (stat);
 80049d8:	697b      	ldr	r3, [r7, #20]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000820 	.word	0x20000820

080049e8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	@ 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049f4:	f3ef 8305 	mrs	r3, IPSR
 80049f8:	613b      	str	r3, [r7, #16]
  return(result);
 80049fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 8085 	bne.w	8004b0c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a02:	f3ef 8310 	mrs	r3, PRIMASK
 8004a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d105      	bne.n	8004a1a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a12:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <osMutexNew+0x3a>
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8004b18 <osMutexNew+0x130>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d074      	beq.n	8004b0c <osMutexNew+0x124>
    if (attr != NULL) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	623b      	str	r3, [r7, #32]
 8004a2e:	e001      	b.n	8004a34 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <osMutexNew+0x5c>
      rmtx = 1U;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
 8004a42:	e001      	b.n	8004a48 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d15c      	bne.n	8004b0c <osMutexNew+0x124>
      mem = -1;
 8004a52:	f04f 33ff 	mov.w	r3, #4294967295
 8004a56:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d015      	beq.n	8004a8a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <osMutexNew+0x8c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b4f      	cmp	r3, #79	@ 0x4f
 8004a6c:	d902      	bls.n	8004a74 <osMutexNew+0x8c>
          mem = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	e00c      	b.n	8004a8e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d108      	bne.n	8004a8e <osMutexNew+0xa6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <osMutexNew+0xa6>
            mem = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	e001      	b.n	8004a8e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d112      	bne.n	8004aba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	2004      	movs	r0, #4
 8004aa2:	f000 fb5c 	bl	800515e <xQueueCreateMutexStatic>
 8004aa6:	6278      	str	r0, [r7, #36]	@ 0x24
 8004aa8:	e016      	b.n	8004ad8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	f000 fb54 	bl	800515e <xQueueCreateMutexStatic>
 8004ab6:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ab8:	e00e      	b.n	8004ad8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10b      	bne.n	8004ad8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d004      	beq.n	8004ad0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004ac6:	2004      	movs	r0, #4
 8004ac8:	f000 fb31 	bl	800512e <xQueueCreateMutex>
 8004acc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ace:	e003      	b.n	8004ad8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004ad0:	2001      	movs	r0, #1
 8004ad2:	f000 fb2c 	bl	800512e <xQueueCreateMutex>
 8004ad6:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00c      	beq.n	8004af8 <osMutexNew+0x110>
        if (attr != NULL) {
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <osMutexNew+0x104>
          name = attr->name;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e001      	b.n	8004af0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004af0:	6979      	ldr	r1, [r7, #20]
 8004af2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004af4:	f001 f894 	bl	8005c20 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d006      	beq.n	8004b0c <osMutexNew+0x124>
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3728      	adds	r7, #40	@ 0x28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000820 	.word	0x20000820

08004b1c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b3a:	f3ef 8305 	mrs	r3, IPSR
 8004b3e:	613b      	str	r3, [r7, #16]
  return(result);
 8004b40:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10f      	bne.n	8004b66 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b46:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d105      	bne.n	8004b5e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b52:	f3ef 8311 	mrs	r3, BASEPRI
 8004b56:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <osMutexAcquire+0x52>
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <osMutexAcquire+0xb8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d103      	bne.n	8004b6e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004b66:	f06f 0305 	mvn.w	r3, #5
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	e02c      	b.n	8004bc8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d103      	bne.n	8004b7c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004b74:	f06f 0303 	mvn.w	r3, #3
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e025      	b.n	8004bc8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d011      	beq.n	8004ba6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	69b8      	ldr	r0, [r7, #24]
 8004b86:	f000 fb3c 	bl	8005202 <xQueueTakeMutexRecursive>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d01b      	beq.n	8004bc8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004b96:	f06f 0301 	mvn.w	r3, #1
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	e014      	b.n	8004bc8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004b9e:	f06f 0302 	mvn.w	r3, #2
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	e010      	b.n	8004bc8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	69b8      	ldr	r0, [r7, #24]
 8004baa:	f000 fdf9 	bl	80057a0 <xQueueSemaphoreTake>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d009      	beq.n	8004bc8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004bba:	f06f 0301 	mvn.w	r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]
 8004bc0:	e002      	b.n	8004bc8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004bc2:	f06f 0302 	mvn.w	r3, #2
 8004bc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3720      	adds	r7, #32
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000820 	.word	0x20000820

08004bd8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf4:	f3ef 8305 	mrs	r3, IPSR
 8004bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8004bfa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10f      	bne.n	8004c20 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c00:	f3ef 8310 	mrs	r3, PRIMASK
 8004c04:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c10:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <osMutexRelease+0x50>
 8004c18:	4b16      	ldr	r3, [pc, #88]	@ (8004c74 <osMutexRelease+0x9c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d103      	bne.n	8004c28 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004c20:	f06f 0305 	mvn.w	r3, #5
 8004c24:	61fb      	str	r3, [r7, #28]
 8004c26:	e01f      	b.n	8004c68 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004c2e:	f06f 0303 	mvn.w	r3, #3
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e018      	b.n	8004c68 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d009      	beq.n	8004c50 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004c3c:	69b8      	ldr	r0, [r7, #24]
 8004c3e:	f000 faa9 	bl	8005194 <xQueueGiveMutexRecursive>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d00f      	beq.n	8004c68 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004c48:	f06f 0302 	mvn.w	r3, #2
 8004c4c:	61fb      	str	r3, [r7, #28]
 8004c4e:	e00b      	b.n	8004c68 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004c50:	2300      	movs	r3, #0
 8004c52:	2200      	movs	r2, #0
 8004c54:	2100      	movs	r1, #0
 8004c56:	69b8      	ldr	r0, [r7, #24]
 8004c58:	f000 fb0c 	bl	8005274 <xQueueGenericSend>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d002      	beq.n	8004c68 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004c62:	f06f 0302 	mvn.w	r3, #2
 8004c66:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004c68:	69fb      	ldr	r3, [r7, #28]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3720      	adds	r7, #32
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000820 	.word	0x20000820

08004c78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a07      	ldr	r2, [pc, #28]	@ (8004ca4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4a06      	ldr	r2, [pc, #24]	@ (8004ca8 <vApplicationGetIdleTaskMemory+0x30>)
 8004c8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2280      	movs	r2, #128	@ 0x80
 8004c94:	601a      	str	r2, [r3, #0]
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000824 	.word	0x20000824
 8004ca8:	20000880 	.word	0x20000880

08004cac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a07      	ldr	r2, [pc, #28]	@ (8004cd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004cbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	4a06      	ldr	r2, [pc, #24]	@ (8004cdc <vApplicationGetTimerTaskMemory+0x30>)
 8004cc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004cca:	601a      	str	r2, [r3, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000a80 	.word	0x20000a80
 8004cdc:	20000adc 	.word	0x20000adc

08004ce0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f103 0208 	add.w	r2, r3, #8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f103 0208 	add.w	r2, r3, #8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f103 0208 	add.w	r2, r3, #8
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d103      	bne.n	8004da2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	e00c      	b.n	8004dbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	3308      	adds	r3, #8
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e002      	b.n	8004db0 <vListInsert+0x2e>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d2f6      	bcs.n	8004daa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
}
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6852      	ldr	r2, [r2, #4]
 8004e14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d103      	bne.n	8004e28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	1e5a      	subs	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	b672      	cpsid	i
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	b662      	cpsie	i
 8004e70:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e72:	bf00      	nop
 8004e74:	bf00      	nop
 8004e76:	e7fd      	b.n	8004e74 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004e78:	f002 fbe8 	bl	800764c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e84:	68f9      	ldr	r1, [r7, #12]
 8004e86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	441a      	add	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	68f9      	ldr	r1, [r7, #12]
 8004eac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004eae:	fb01 f303 	mul.w	r3, r1, r3
 8004eb2:	441a      	add	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	22ff      	movs	r2, #255	@ 0xff
 8004ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	22ff      	movs	r2, #255	@ 0xff
 8004ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d114      	bne.n	8004ef8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01a      	beq.n	8004f0c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3310      	adds	r3, #16
 8004eda:	4618      	mov	r0, r3
 8004edc:	f001 fb80 	bl	80065e0 <xTaskRemoveFromEventList>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d012      	beq.n	8004f0c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f1c <xQueueGenericReset+0xd4>)
 8004ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	e009      	b.n	8004f0c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3310      	adds	r3, #16
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff feef 	bl	8004ce0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3324      	adds	r3, #36	@ 0x24
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7ff feea 	bl	8004ce0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f0c:	f002 fbd4 	bl	80076b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f10:	2301      	movs	r3, #1
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08e      	sub	sp, #56	@ 0x38
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10d      	bne.n	8004f50 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f38:	b672      	cpsid	i
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	b662      	cpsie	i
 8004f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	e7fd      	b.n	8004f4c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10d      	bne.n	8004f72 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8004f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5a:	b672      	cpsid	i
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	b662      	cpsie	i
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <xQueueGenericCreateStatic+0x5e>
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <xQueueGenericCreateStatic+0x62>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <xQueueGenericCreateStatic+0x64>
 8004f82:	2300      	movs	r3, #0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10d      	bne.n	8004fa4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8c:	b672      	cpsid	i
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	b662      	cpsie	i
 8004f9c:	623b      	str	r3, [r7, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <xQueueGenericCreateStatic+0x90>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <xQueueGenericCreateStatic+0x94>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <xQueueGenericCreateStatic+0x96>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	b672      	cpsid	i
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	b662      	cpsie	i
 8004fce:	61fb      	str	r3, [r7, #28]
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	e7fd      	b.n	8004fd2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fd6:	2350      	movs	r3, #80	@ 0x50
 8004fd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b50      	cmp	r3, #80	@ 0x50
 8004fde:	d00d      	beq.n	8004ffc <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	b672      	cpsid	i
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	b662      	cpsie	i
 8004ff4:	61bb      	str	r3, [r7, #24]
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ffc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00d      	beq.n	8005024 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005010:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f848 	bl	80050b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005026:	4618      	mov	r0, r3
 8005028:	3730      	adds	r7, #48	@ 0x30
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800502e:	b580      	push	{r7, lr}
 8005030:	b08a      	sub	sp, #40	@ 0x28
 8005032:	af02      	add	r7, sp, #8
 8005034:	60f8      	str	r0, [r7, #12]
 8005036:	60b9      	str	r1, [r7, #8]
 8005038:	4613      	mov	r3, r2
 800503a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <xQueueGenericCreate+0x30>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005046:	b672      	cpsid	i
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	b662      	cpsie	i
 8005056:	613b      	str	r3, [r7, #16]
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	e7fd      	b.n	800505a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	e004      	b.n	8005074 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	3350      	adds	r3, #80	@ 0x50
 8005078:	4618      	mov	r0, r3
 800507a:	f002 fc15 	bl	80078a8 <pvPortMalloc>
 800507e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d011      	beq.n	80050aa <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3350      	adds	r3, #80	@ 0x50
 800508e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005098:	79fa      	ldrb	r2, [r7, #7]
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	4613      	mov	r3, r2
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f805 	bl	80050b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050aa:	69bb      	ldr	r3, [r7, #24]
	}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e002      	b.n	80050d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050e2:	2101      	movs	r1, #1
 80050e4:	69b8      	ldr	r0, [r7, #24]
 80050e6:	f7ff feaf 	bl	8004e48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00e      	beq.n	8005126 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800511a:	2300      	movs	r3, #0
 800511c:	2200      	movs	r2, #0
 800511e:	2100      	movs	r1, #0
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8a7 	bl	8005274 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800512e:	b580      	push	{r7, lr}
 8005130:	b086      	sub	sp, #24
 8005132:	af00      	add	r7, sp, #0
 8005134:	4603      	mov	r3, r0
 8005136:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005138:	2301      	movs	r3, #1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	461a      	mov	r2, r3
 8005144:	6939      	ldr	r1, [r7, #16]
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff ff71 	bl	800502e <xQueueGenericCreate>
 800514c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ffd3 	bl	80050fa <prvInitialiseMutex>

		return xNewQueue;
 8005154:	68fb      	ldr	r3, [r7, #12]
	}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800515e:	b580      	push	{r7, lr}
 8005160:	b088      	sub	sp, #32
 8005162:	af02      	add	r7, sp, #8
 8005164:	4603      	mov	r3, r0
 8005166:	6039      	str	r1, [r7, #0]
 8005168:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800516a:	2301      	movs	r3, #1
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2200      	movs	r2, #0
 800517a:	6939      	ldr	r1, [r7, #16]
 800517c:	6978      	ldr	r0, [r7, #20]
 800517e:	f7ff fecf 	bl	8004f20 <xQueueGenericCreateStatic>
 8005182:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f7ff ffb8 	bl	80050fa <prvInitialiseMutex>

		return xNewQueue;
 800518a:	68fb      	ldr	r3, [r7, #12]
	}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10d      	bne.n	80051c2 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051aa:	b672      	cpsid	i
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	b662      	cpsie	i
 80051ba:	60fb      	str	r3, [r7, #12]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	689c      	ldr	r4, [r3, #8]
 80051c6:	f001 fbd3 	bl	8006970 <xTaskGetCurrentTaskHandle>
 80051ca:	4603      	mov	r3, r0
 80051cc:	429c      	cmp	r4, r3
 80051ce:	d111      	bne.n	80051f4 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	1e5a      	subs	r2, r3, #1
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d105      	bne.n	80051ee <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80051e2:	2300      	movs	r3, #0
 80051e4:	2200      	movs	r2, #0
 80051e6:	2100      	movs	r1, #0
 80051e8:	6938      	ldr	r0, [r7, #16]
 80051ea:	f000 f843 	bl	8005274 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80051ee:	2301      	movs	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e001      	b.n	80051f8 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80051f8:	697b      	ldr	r3, [r7, #20]
	}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd90      	pop	{r4, r7, pc}

08005202 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005202:	b590      	push	{r4, r7, lr}
 8005204:	b087      	sub	sp, #28
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10d      	bne.n	8005232 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521a:	b672      	cpsid	i
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	b662      	cpsie	i
 800522a:	60fb      	str	r3, [r7, #12]
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	e7fd      	b.n	800522e <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	689c      	ldr	r4, [r3, #8]
 8005236:	f001 fb9b 	bl	8006970 <xTaskGetCurrentTaskHandle>
 800523a:	4603      	mov	r3, r0
 800523c:	429c      	cmp	r4, r3
 800523e:	d107      	bne.n	8005250 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800524a:	2301      	movs	r3, #1
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	e00c      	b.n	800526a <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6938      	ldr	r0, [r7, #16]
 8005254:	f000 faa4 	bl	80057a0 <xQueueSemaphoreTake>
 8005258:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d004      	beq.n	800526a <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800526a:	697b      	ldr	r3, [r7, #20]
	}
 800526c:	4618      	mov	r0, r3
 800526e:	371c      	adds	r7, #28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd90      	pop	{r4, r7, pc}

08005274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	@ 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10d      	bne.n	80052ac <xQueueGenericSend+0x38>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	b672      	cpsid	i
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	b662      	cpsie	i
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <xQueueGenericSend+0x46>
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <xQueueGenericSend+0x4a>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <xQueueGenericSend+0x4c>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10d      	bne.n	80052e0 <xQueueGenericSend+0x6c>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c8:	b672      	cpsid	i
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	b662      	cpsie	i
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052da:	bf00      	nop
 80052dc:	bf00      	nop
 80052de:	e7fd      	b.n	80052dc <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d103      	bne.n	80052ee <xQueueGenericSend+0x7a>
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <xQueueGenericSend+0x7e>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <xQueueGenericSend+0x80>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10d      	bne.n	8005314 <xQueueGenericSend+0xa0>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	b672      	cpsid	i
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	b662      	cpsie	i
 800530c:	623b      	str	r3, [r7, #32]
}
 800530e:	bf00      	nop
 8005310:	bf00      	nop
 8005312:	e7fd      	b.n	8005310 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005314:	f001 fb3c 	bl	8006990 <xTaskGetSchedulerState>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <xQueueGenericSend+0xb0>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <xQueueGenericSend+0xb4>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <xQueueGenericSend+0xb6>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10d      	bne.n	800534a <xQueueGenericSend+0xd6>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	b672      	cpsid	i
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	b662      	cpsie	i
 8005342:	61fb      	str	r3, [r7, #28]
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800534a:	f002 f97f 	bl	800764c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005356:	429a      	cmp	r2, r3
 8005358:	d302      	bcc.n	8005360 <xQueueGenericSend+0xec>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d129      	bne.n	80053b4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	68b9      	ldr	r1, [r7, #8]
 8005364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005366:	f000 fb4b 	bl	8005a00 <prvCopyDataToQueue>
 800536a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005370:	2b00      	cmp	r3, #0
 8005372:	d010      	beq.n	8005396 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	3324      	adds	r3, #36	@ 0x24
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f931 	bl	80065e0 <xTaskRemoveFromEventList>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d013      	beq.n	80053ac <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005384:	4b3f      	ldr	r3, [pc, #252]	@ (8005484 <xQueueGenericSend+0x210>)
 8005386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	e00a      	b.n	80053ac <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800539c:	4b39      	ldr	r3, [pc, #228]	@ (8005484 <xQueueGenericSend+0x210>)
 800539e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053ac:	f002 f984 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e063      	b.n	800547c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ba:	f002 f97d 	bl	80076b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053be:	2300      	movs	r3, #0
 80053c0:	e05c      	b.n	800547c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d106      	bne.n	80053d6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053c8:	f107 0314 	add.w	r3, r7, #20
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 f96d 	bl	80066ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053d2:	2301      	movs	r3, #1
 80053d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053d6:	f002 f96f 	bl	80076b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053da:	f000 fed1 	bl	8006180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053de:	f002 f935 	bl	800764c <vPortEnterCritical>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053e8:	b25b      	sxtb	r3, r3
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d103      	bne.n	80053f8 <xQueueGenericSend+0x184>
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053fe:	b25b      	sxtb	r3, r3
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005404:	d103      	bne.n	800540e <xQueueGenericSend+0x19a>
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800540e:	f002 f953 	bl	80076b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005412:	1d3a      	adds	r2, r7, #4
 8005414:	f107 0314 	add.w	r3, r7, #20
 8005418:	4611      	mov	r1, r2
 800541a:	4618      	mov	r0, r3
 800541c:	f001 f95c 	bl	80066d8 <xTaskCheckForTimeOut>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d124      	bne.n	8005470 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005426:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005428:	f000 fbe2 	bl	8005bf0 <prvIsQueueFull>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d018      	beq.n	8005464 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	3310      	adds	r3, #16
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	4611      	mov	r1, r2
 800543a:	4618      	mov	r0, r3
 800543c:	f001 f87a 	bl	8006534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005442:	f000 fb6d 	bl	8005b20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005446:	f000 fea9 	bl	800619c <xTaskResumeAll>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	f47f af7c 	bne.w	800534a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005452:	4b0c      	ldr	r3, [pc, #48]	@ (8005484 <xQueueGenericSend+0x210>)
 8005454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	e772      	b.n	800534a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005466:	f000 fb5b 	bl	8005b20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800546a:	f000 fe97 	bl	800619c <xTaskResumeAll>
 800546e:	e76c      	b.n	800534a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005472:	f000 fb55 	bl	8005b20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005476:	f000 fe91 	bl	800619c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800547a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800547c:	4618      	mov	r0, r3
 800547e:	3738      	adds	r7, #56	@ 0x38
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	e000ed04 	.word	0xe000ed04

08005488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08e      	sub	sp, #56	@ 0x38
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10d      	bne.n	80054bc <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a4:	b672      	cpsid	i
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	b662      	cpsie	i
 80054b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	e7fd      	b.n	80054b8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d103      	bne.n	80054ca <xQueueGenericSendFromISR+0x42>
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <xQueueGenericSendFromISR+0x46>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <xQueueGenericSendFromISR+0x48>
 80054ce:	2300      	movs	r3, #0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10d      	bne.n	80054f0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d8:	b672      	cpsid	i
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	b662      	cpsie	i
 80054e8:	623b      	str	r3, [r7, #32]
}
 80054ea:	bf00      	nop
 80054ec:	bf00      	nop
 80054ee:	e7fd      	b.n	80054ec <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d103      	bne.n	80054fe <xQueueGenericSendFromISR+0x76>
 80054f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <xQueueGenericSendFromISR+0x7a>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <xQueueGenericSendFromISR+0x7c>
 8005502:	2300      	movs	r3, #0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10d      	bne.n	8005524 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550c:	b672      	cpsid	i
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	b662      	cpsie	i
 800551c:	61fb      	str	r3, [r7, #28]
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005524:	f002 f97a 	bl	800781c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005528:	f3ef 8211 	mrs	r2, BASEPRI
 800552c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005530:	b672      	cpsid	i
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	b662      	cpsie	i
 8005540:	61ba      	str	r2, [r7, #24]
 8005542:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005544:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005546:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <xQueueGenericSendFromISR+0xd2>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d12c      	bne.n	80055b4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005560:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800556a:	f000 fa49 	bl	8005a00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800556e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005576:	d112      	bne.n	800559e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	2b00      	cmp	r3, #0
 800557e:	d016      	beq.n	80055ae <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	3324      	adds	r3, #36	@ 0x24
 8005584:	4618      	mov	r0, r3
 8005586:	f001 f82b 	bl	80065e0 <xTaskRemoveFromEventList>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00e      	beq.n	80055ae <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e007      	b.n	80055ae <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800559e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055a2:	3301      	adds	r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	b25a      	sxtb	r2, r3
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80055ae:	2301      	movs	r3, #1
 80055b0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80055b2:	e001      	b.n	80055b8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055b4:	2300      	movs	r3, #0
 80055b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3738      	adds	r7, #56	@ 0x38
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	@ 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055dc:	2300      	movs	r3, #0
 80055de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10d      	bne.n	8005606 <xQueueReceive+0x36>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ee:	b672      	cpsid	i
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	b662      	cpsie	i
 80055fe:	623b      	str	r3, [r7, #32]
}
 8005600:	bf00      	nop
 8005602:	bf00      	nop
 8005604:	e7fd      	b.n	8005602 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d103      	bne.n	8005614 <xQueueReceive+0x44>
 800560c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <xQueueReceive+0x48>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <xQueueReceive+0x4a>
 8005618:	2300      	movs	r3, #0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10d      	bne.n	800563a <xQueueReceive+0x6a>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	b672      	cpsid	i
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	b662      	cpsie	i
 8005632:	61fb      	str	r3, [r7, #28]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800563a:	f001 f9a9 	bl	8006990 <xTaskGetSchedulerState>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d102      	bne.n	800564a <xQueueReceive+0x7a>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <xQueueReceive+0x7e>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <xQueueReceive+0x80>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10d      	bne.n	8005670 <xQueueReceive+0xa0>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005658:	b672      	cpsid	i
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	b662      	cpsie	i
 8005668:	61bb      	str	r3, [r7, #24]
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005670:	f001 ffec 	bl	800764c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005678:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01f      	beq.n	80056c0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005684:	f000 fa26 	bl	8005ad4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	1e5a      	subs	r2, r3, #1
 800568c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00f      	beq.n	80056b8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	3310      	adds	r3, #16
 800569c:	4618      	mov	r0, r3
 800569e:	f000 ff9f 	bl	80065e0 <xTaskRemoveFromEventList>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056a8:	4b3c      	ldr	r3, [pc, #240]	@ (800579c <xQueueReceive+0x1cc>)
 80056aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056b8:	f001 fffe 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 80056bc:	2301      	movs	r3, #1
 80056be:	e069      	b.n	8005794 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056c6:	f001 fff7 	bl	80076b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e062      	b.n	8005794 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056d4:	f107 0310 	add.w	r3, r7, #16
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 ffe7 	bl	80066ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056de:	2301      	movs	r3, #1
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056e2:	f001 ffe9 	bl	80076b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056e6:	f000 fd4b 	bl	8006180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056ea:	f001 ffaf 	bl	800764c <vPortEnterCritical>
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056f4:	b25b      	sxtb	r3, r3
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d103      	bne.n	8005704 <xQueueReceive+0x134>
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800570a:	b25b      	sxtb	r3, r3
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d103      	bne.n	800571a <xQueueReceive+0x14a>
 8005712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800571a:	f001 ffcd 	bl	80076b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800571e:	1d3a      	adds	r2, r7, #4
 8005720:	f107 0310 	add.w	r3, r7, #16
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f000 ffd6 	bl	80066d8 <xTaskCheckForTimeOut>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d123      	bne.n	800577a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005734:	f000 fa46 	bl	8005bc4 <prvIsQueueEmpty>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d017      	beq.n	800576e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	3324      	adds	r3, #36	@ 0x24
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fef4 	bl	8006534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800574c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800574e:	f000 f9e7 	bl	8005b20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005752:	f000 fd23 	bl	800619c <xTaskResumeAll>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d189      	bne.n	8005670 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800575c:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <xQueueReceive+0x1cc>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	e780      	b.n	8005670 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800576e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005770:	f000 f9d6 	bl	8005b20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005774:	f000 fd12 	bl	800619c <xTaskResumeAll>
 8005778:	e77a      	b.n	8005670 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800577a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800577c:	f000 f9d0 	bl	8005b20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005780:	f000 fd0c 	bl	800619c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005786:	f000 fa1d 	bl	8005bc4 <prvIsQueueEmpty>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	f43f af6f 	beq.w	8005670 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005792:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005794:	4618      	mov	r0, r3
 8005796:	3730      	adds	r7, #48	@ 0x30
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	e000ed04 	.word	0xe000ed04

080057a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08e      	sub	sp, #56	@ 0x38
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c0:	b672      	cpsid	i
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	b662      	cpsie	i
 80057d0:	623b      	str	r3, [r7, #32]
}
 80057d2:	bf00      	nop
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00d      	beq.n	80057fc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e4:	b672      	cpsid	i
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	b662      	cpsie	i
 80057f4:	61fb      	str	r3, [r7, #28]
}
 80057f6:	bf00      	nop
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057fc:	f001 f8c8 	bl	8006990 <xTaskGetSchedulerState>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <xQueueSemaphoreTake+0x6c>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <xQueueSemaphoreTake+0x70>
 800580c:	2301      	movs	r3, #1
 800580e:	e000      	b.n	8005812 <xQueueSemaphoreTake+0x72>
 8005810:	2300      	movs	r3, #0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10d      	bne.n	8005832 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	b672      	cpsid	i
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	b662      	cpsie	i
 800582a:	61bb      	str	r3, [r7, #24]
}
 800582c:	bf00      	nop
 800582e:	bf00      	nop
 8005830:	e7fd      	b.n	800582e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005832:	f001 ff0b 	bl	800764c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	2b00      	cmp	r3, #0
 8005840:	d024      	beq.n	800588c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	1e5a      	subs	r2, r3, #1
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d104      	bne.n	800585c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005852:	f001 fa1f 	bl	8006c94 <pvTaskIncrementMutexHeldCount>
 8005856:	4602      	mov	r2, r0
 8005858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	3310      	adds	r3, #16
 8005868:	4618      	mov	r0, r3
 800586a:	f000 feb9 	bl	80065e0 <xTaskRemoveFromEventList>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005874:	4b55      	ldr	r3, [pc, #340]	@ (80059cc <xQueueSemaphoreTake+0x22c>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005884:	f001 ff18 	bl	80076b8 <vPortExitCritical>
				return pdPASS;
 8005888:	2301      	movs	r3, #1
 800588a:	e09a      	b.n	80059c2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d114      	bne.n	80058bc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589c:	b672      	cpsid	i
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	b662      	cpsie	i
 80058ac:	617b      	str	r3, [r7, #20]
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	e7fd      	b.n	80058b0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058b4:	f001 ff00 	bl	80076b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e082      	b.n	80059c2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d106      	bne.n	80058d0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058c2:	f107 030c 	add.w	r3, r7, #12
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fef0 	bl	80066ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058d0:	f001 fef2 	bl	80076b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058d4:	f000 fc54 	bl	8006180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058d8:	f001 feb8 	bl	800764c <vPortEnterCritical>
 80058dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058e2:	b25b      	sxtb	r3, r3
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d103      	bne.n	80058f2 <xQueueSemaphoreTake+0x152>
 80058ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058f8:	b25b      	sxtb	r3, r3
 80058fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fe:	d103      	bne.n	8005908 <xQueueSemaphoreTake+0x168>
 8005900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005908:	f001 fed6 	bl	80076b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800590c:	463a      	mov	r2, r7
 800590e:	f107 030c 	add.w	r3, r7, #12
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fedf 	bl	80066d8 <xTaskCheckForTimeOut>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d132      	bne.n	8005986 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005922:	f000 f94f 	bl	8005bc4 <prvIsQueueEmpty>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d026      	beq.n	800597a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800592c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d109      	bne.n	8005948 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005934:	f001 fe8a 	bl	800764c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f845 	bl	80069cc <xTaskPriorityInherit>
 8005942:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005944:	f001 feb8 	bl	80076b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594a:	3324      	adds	r3, #36	@ 0x24
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fdef 	bl	8006534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005956:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005958:	f000 f8e2 	bl	8005b20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800595c:	f000 fc1e 	bl	800619c <xTaskResumeAll>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	f47f af65 	bne.w	8005832 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005968:	4b18      	ldr	r3, [pc, #96]	@ (80059cc <xQueueSemaphoreTake+0x22c>)
 800596a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	e75b      	b.n	8005832 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800597a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800597c:	f000 f8d0 	bl	8005b20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005980:	f000 fc0c 	bl	800619c <xTaskResumeAll>
 8005984:	e755      	b.n	8005832 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005988:	f000 f8ca 	bl	8005b20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800598c:	f000 fc06 	bl	800619c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005990:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005992:	f000 f917 	bl	8005bc4 <prvIsQueueEmpty>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	f43f af4a 	beq.w	8005832 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800599e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00d      	beq.n	80059c0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80059a4:	f001 fe52 	bl	800764c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059aa:	f000 f811 	bl	80059d0 <prvGetDisinheritPriorityAfterTimeout>
 80059ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 f8e4 	bl	8006b84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059bc:	f001 fe7c 	bl	80076b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3738      	adds	r7, #56	@ 0x38
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	e000ed04 	.word	0xe000ed04

080059d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e001      	b.n	80059f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80059f2:	68fb      	ldr	r3, [r7, #12]
	}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d14d      	bne.n	8005ac2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 f836 	bl	8006a9c <xTaskPriorityDisinherit>
 8005a30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	609a      	str	r2, [r3, #8]
 8005a38:	e043      	b.n	8005ac2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d119      	bne.n	8005a74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6858      	ldr	r0, [r3, #4]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	461a      	mov	r2, r3
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	f002 f942 	bl	8007cd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a58:	441a      	add	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d32b      	bcc.n	8005ac2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	e026      	b.n	8005ac2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68d8      	ldr	r0, [r3, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	f002 f928 	bl	8007cd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8c:	425b      	negs	r3, r3
 8005a8e:	441a      	add	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d207      	bcs.n	8005ab0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	425b      	negs	r3, r3
 8005aaa:	441a      	add	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d105      	bne.n	8005ac2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005aca:	697b      	ldr	r3, [r7, #20]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d018      	beq.n	8005b18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	441a      	add	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d303      	bcc.n	8005b08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68d9      	ldr	r1, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b10:	461a      	mov	r2, r3
 8005b12:	6838      	ldr	r0, [r7, #0]
 8005b14:	f002 f8de 	bl	8007cd4 <memcpy>
	}
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b28:	f001 fd90 	bl	800764c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b34:	e011      	b.n	8005b5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3324      	adds	r3, #36	@ 0x24
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fd4c 	bl	80065e0 <xTaskRemoveFromEventList>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b4e:	f000 fe2b 	bl	80067a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dce9      	bgt.n	8005b36 <prvUnlockQueue+0x16>
 8005b62:	e000      	b.n	8005b66 <prvUnlockQueue+0x46>
					break;
 8005b64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	22ff      	movs	r2, #255	@ 0xff
 8005b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b6e:	f001 fda3 	bl	80076b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b72:	f001 fd6b 	bl	800764c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b7e:	e011      	b.n	8005ba4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d012      	beq.n	8005bae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3310      	adds	r3, #16
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 fd27 	bl	80065e0 <xTaskRemoveFromEventList>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b98:	f000 fe06 	bl	80067a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b9c:	7bbb      	ldrb	r3, [r7, #14]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dce9      	bgt.n	8005b80 <prvUnlockQueue+0x60>
 8005bac:	e000      	b.n	8005bb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005bae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	22ff      	movs	r2, #255	@ 0xff
 8005bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005bb8:	f001 fd7e 	bl	80076b8 <vPortExitCritical>
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bcc:	f001 fd3e 	bl	800764c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d102      	bne.n	8005bde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	e001      	b.n	8005be2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005be2:	f001 fd69 	bl	80076b8 <vPortExitCritical>

	return xReturn;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bf8:	f001 fd28 	bl	800764c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d102      	bne.n	8005c0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e001      	b.n	8005c12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c12:	f001 fd51 	bl	80076b8 <vPortExitCritical>

	return xReturn;
 8005c16:	68fb      	ldr	r3, [r7, #12]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e014      	b.n	8005c5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c30:	4a0f      	ldr	r2, [pc, #60]	@ (8005c70 <vQueueAddToRegistry+0x50>)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10b      	bne.n	8005c54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c3c:	490c      	ldr	r1, [pc, #48]	@ (8005c70 <vQueueAddToRegistry+0x50>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005c46:	4a0a      	ldr	r2, [pc, #40]	@ (8005c70 <vQueueAddToRegistry+0x50>)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c52:	e006      	b.n	8005c62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	d9e7      	bls.n	8005c30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000edc 	.word	0x20000edc

08005c74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c84:	f001 fce2 	bl	800764c <vPortEnterCritical>
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d103      	bne.n	8005c9e <vQueueWaitForMessageRestricted+0x2a>
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ca4:	b25b      	sxtb	r3, r3
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005caa:	d103      	bne.n	8005cb4 <vQueueWaitForMessageRestricted+0x40>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cb4:	f001 fd00 	bl	80076b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	3324      	adds	r3, #36	@ 0x24
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fc5b 	bl	8006584 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005cce:	6978      	ldr	r0, [r7, #20]
 8005cd0:	f7ff ff26 	bl	8005b20 <prvUnlockQueue>
	}
 8005cd4:	bf00      	nop
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08e      	sub	sp, #56	@ 0x38
 8005ce0:	af04      	add	r7, sp, #16
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10d      	bne.n	8005d0c <xTaskCreateStatic+0x30>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf4:	b672      	cpsid	i
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	b662      	cpsie	i
 8005d04:	623b      	str	r3, [r7, #32]
}
 8005d06:	bf00      	nop
 8005d08:	bf00      	nop
 8005d0a:	e7fd      	b.n	8005d08 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10d      	bne.n	8005d2e <xTaskCreateStatic+0x52>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d16:	b672      	cpsid	i
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	b662      	cpsie	i
 8005d26:	61fb      	str	r3, [r7, #28]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d2e:	235c      	movs	r3, #92	@ 0x5c
 8005d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	2b5c      	cmp	r3, #92	@ 0x5c
 8005d36:	d00d      	beq.n	8005d54 <xTaskCreateStatic+0x78>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	b672      	cpsid	i
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	b662      	cpsie	i
 8005d4c:	61bb      	str	r3, [r7, #24]
}
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005d54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01e      	beq.n	8005d9a <xTaskCreateStatic+0xbe>
 8005d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01b      	beq.n	8005d9a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d74:	2300      	movs	r3, #0
 8005d76:	9303      	str	r3, [sp, #12]
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	9302      	str	r3, [sp, #8]
 8005d7c:	f107 0314 	add.w	r3, r7, #20
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f850 	bl	8005e32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d94:	f000 f8e0 	bl	8005f58 <prvAddNewTaskToReadyList>
 8005d98:	e001      	b.n	8005d9e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d9e:	697b      	ldr	r3, [r7, #20]
	}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3728      	adds	r7, #40	@ 0x28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08c      	sub	sp, #48	@ 0x30
 8005dac:	af04      	add	r7, sp, #16
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f001 fd73 	bl	80078a8 <pvPortMalloc>
 8005dc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00e      	beq.n	8005de8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005dca:	205c      	movs	r0, #92	@ 0x5c
 8005dcc:	f001 fd6c 	bl	80078a8 <pvPortMalloc>
 8005dd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005dde:	e005      	b.n	8005dec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f001 fe2f 	bl	8007a44 <vPortFree>
 8005de6:	e001      	b.n	8005dec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d017      	beq.n	8005e22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005dfa:	88fa      	ldrh	r2, [r7, #6]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9303      	str	r3, [sp, #12]
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	9302      	str	r3, [sp, #8]
 8005e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 f80e 	bl	8005e32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e16:	69f8      	ldr	r0, [r7, #28]
 8005e18:	f000 f89e 	bl	8005f58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	e002      	b.n	8005e28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e22:	f04f 33ff 	mov.w	r3, #4294967295
 8005e26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e28:	69bb      	ldr	r3, [r7, #24]
	}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3720      	adds	r7, #32
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b088      	sub	sp, #32
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	21a5      	movs	r1, #165	@ 0xa5
 8005e4c:	f001 ff16 	bl	8007c7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8005e5a:	440b      	add	r3, r1
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	f023 0307 	bic.w	r3, r3, #7
 8005e68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00d      	beq.n	8005e90 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8005e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e78:	b672      	cpsid	i
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	b662      	cpsie	i
 8005e88:	617b      	str	r3, [r7, #20]
}
 8005e8a:	bf00      	nop
 8005e8c:	bf00      	nop
 8005e8e:	e7fd      	b.n	8005e8c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01f      	beq.n	8005ed6 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e96:	2300      	movs	r3, #0
 8005e98:	61fb      	str	r3, [r7, #28]
 8005e9a:	e012      	b.n	8005ec2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	7819      	ldrb	r1, [r3, #0]
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3334      	adds	r3, #52	@ 0x34
 8005eac:	460a      	mov	r2, r1
 8005eae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	2b0f      	cmp	r3, #15
 8005ec6:	d9e9      	bls.n	8005e9c <prvInitialiseNewTask+0x6a>
 8005ec8:	e000      	b.n	8005ecc <prvInitialiseNewTask+0x9a>
			{
				break;
 8005eca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ed4:	e003      	b.n	8005ede <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	2b37      	cmp	r3, #55	@ 0x37
 8005ee2:	d901      	bls.n	8005ee8 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ee4:	2337      	movs	r3, #55	@ 0x37
 8005ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ef2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	3304      	adds	r3, #4
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fe ff0e 	bl	8004d20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f06:	3318      	adds	r3, #24
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe ff09 	bl	8004d20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	2200      	movs	r2, #0
 8005f28:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68f9      	ldr	r1, [r7, #12]
 8005f36:	69b8      	ldr	r0, [r7, #24]
 8005f38:	f001 fa7c 	bl	8007434 <pxPortInitialiseStack>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f4e:	bf00      	nop
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f60:	f001 fb74 	bl	800764c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f64:	4b2d      	ldr	r3, [pc, #180]	@ (800601c <prvAddNewTaskToReadyList+0xc4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a2c      	ldr	r2, [pc, #176]	@ (800601c <prvAddNewTaskToReadyList+0xc4>)
 8005f6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f76:	4a2a      	ldr	r2, [pc, #168]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f7c:	4b27      	ldr	r3, [pc, #156]	@ (800601c <prvAddNewTaskToReadyList+0xc4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d110      	bne.n	8005fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f84:	f000 fc34 	bl	80067f0 <prvInitialiseTaskLists>
 8005f88:	e00d      	b.n	8005fa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f8a:	4b26      	ldr	r3, [pc, #152]	@ (8006024 <prvAddNewTaskToReadyList+0xcc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f92:	4b23      	ldr	r3, [pc, #140]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d802      	bhi.n	8005fa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fa6:	4b20      	ldr	r3, [pc, #128]	@ (8006028 <prvAddNewTaskToReadyList+0xd0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	4a1e      	ldr	r2, [pc, #120]	@ (8006028 <prvAddNewTaskToReadyList+0xd0>)
 8005fae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006028 <prvAddNewTaskToReadyList+0xd0>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800602c <prvAddNewTaskToReadyList+0xd4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d903      	bls.n	8005fcc <prvAddNewTaskToReadyList+0x74>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	4a18      	ldr	r2, [pc, #96]	@ (800602c <prvAddNewTaskToReadyList+0xd4>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <prvAddNewTaskToReadyList+0xd8>)
 8005fda:	441a      	add	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f7fe fea9 	bl	8004d3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fe8:	f001 fb66 	bl	80076b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fec:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <prvAddNewTaskToReadyList+0xcc>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00e      	beq.n	8006012 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8006020 <prvAddNewTaskToReadyList+0xc8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d207      	bcs.n	8006012 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006002:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <prvAddNewTaskToReadyList+0xdc>)
 8006004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200013f0 	.word	0x200013f0
 8006020:	20000f1c 	.word	0x20000f1c
 8006024:	200013fc 	.word	0x200013fc
 8006028:	2000140c 	.word	0x2000140c
 800602c:	200013f8 	.word	0x200013f8
 8006030:	20000f20 	.word	0x20000f20
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01a      	beq.n	8006080 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <vTaskDelay+0x68>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00d      	beq.n	800606e <vTaskDelay+0x36>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006056:	b672      	cpsid	i
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	b662      	cpsie	i
 8006066:	60bb      	str	r3, [r7, #8]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800606e:	f000 f887 	bl	8006180 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006072:	2100      	movs	r1, #0
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fe21 	bl	8006cbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800607a:	f000 f88f 	bl	800619c <xTaskResumeAll>
 800607e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006086:	4b07      	ldr	r3, [pc, #28]	@ (80060a4 <vTaskDelay+0x6c>)
 8006088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20001418 	.word	0x20001418
 80060a4:	e000ed04 	.word	0xe000ed04

080060a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	@ 0x28
 80060ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060b6:	463a      	mov	r2, r7
 80060b8:	1d39      	adds	r1, r7, #4
 80060ba:	f107 0308 	add.w	r3, r7, #8
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fdda 	bl	8004c78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	9202      	str	r2, [sp, #8]
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	2300      	movs	r3, #0
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	2300      	movs	r3, #0
 80060d4:	460a      	mov	r2, r1
 80060d6:	4924      	ldr	r1, [pc, #144]	@ (8006168 <vTaskStartScheduler+0xc0>)
 80060d8:	4824      	ldr	r0, [pc, #144]	@ (800616c <vTaskStartScheduler+0xc4>)
 80060da:	f7ff fdff 	bl	8005cdc <xTaskCreateStatic>
 80060de:	4603      	mov	r3, r0
 80060e0:	4a23      	ldr	r2, [pc, #140]	@ (8006170 <vTaskStartScheduler+0xc8>)
 80060e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060e4:	4b22      	ldr	r3, [pc, #136]	@ (8006170 <vTaskStartScheduler+0xc8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060ec:	2301      	movs	r3, #1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e001      	b.n	80060f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d102      	bne.n	8006102 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060fc:	f000 fe32 	bl	8006d64 <xTimerCreateTimerTask>
 8006100:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d118      	bne.n	800613a <vTaskStartScheduler+0x92>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610c:	b672      	cpsid	i
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	b662      	cpsie	i
 800611c:	613b      	str	r3, [r7, #16]
}
 800611e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006120:	4b14      	ldr	r3, [pc, #80]	@ (8006174 <vTaskStartScheduler+0xcc>)
 8006122:	f04f 32ff 	mov.w	r2, #4294967295
 8006126:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006128:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <vTaskStartScheduler+0xd0>)
 800612a:	2201      	movs	r2, #1
 800612c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800612e:	4b13      	ldr	r3, [pc, #76]	@ (800617c <vTaskStartScheduler+0xd4>)
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006134:	f001 fa0c 	bl	8007550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006138:	e011      	b.n	800615e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d10d      	bne.n	800615e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006146:	b672      	cpsid	i
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	b662      	cpsie	i
 8006156:	60fb      	str	r3, [r7, #12]
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	e7fd      	b.n	800615a <vTaskStartScheduler+0xb2>
}
 800615e:	bf00      	nop
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	08007d50 	.word	0x08007d50
 800616c:	080067c1 	.word	0x080067c1
 8006170:	20001414 	.word	0x20001414
 8006174:	20001410 	.word	0x20001410
 8006178:	200013fc 	.word	0x200013fc
 800617c:	200013f4 	.word	0x200013f4

08006180 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006184:	4b04      	ldr	r3, [pc, #16]	@ (8006198 <vTaskSuspendAll+0x18>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	4a03      	ldr	r2, [pc, #12]	@ (8006198 <vTaskSuspendAll+0x18>)
 800618c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800618e:	bf00      	nop
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr
 8006198:	20001418 	.word	0x20001418

0800619c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061aa:	4b43      	ldr	r3, [pc, #268]	@ (80062b8 <xTaskResumeAll+0x11c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10d      	bne.n	80061ce <xTaskResumeAll+0x32>
	__asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	b672      	cpsid	i
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	b662      	cpsie	i
 80061c6:	603b      	str	r3, [r7, #0]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061ce:	f001 fa3d 	bl	800764c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061d2:	4b39      	ldr	r3, [pc, #228]	@ (80062b8 <xTaskResumeAll+0x11c>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4a37      	ldr	r2, [pc, #220]	@ (80062b8 <xTaskResumeAll+0x11c>)
 80061da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061dc:	4b36      	ldr	r3, [pc, #216]	@ (80062b8 <xTaskResumeAll+0x11c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d162      	bne.n	80062aa <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061e4:	4b35      	ldr	r3, [pc, #212]	@ (80062bc <xTaskResumeAll+0x120>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d05e      	beq.n	80062aa <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061ec:	e02f      	b.n	800624e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ee:	4b34      	ldr	r3, [pc, #208]	@ (80062c0 <xTaskResumeAll+0x124>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3318      	adds	r3, #24
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe fdfa 	bl	8004df4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3304      	adds	r3, #4
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe fdf5 	bl	8004df4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620e:	4b2d      	ldr	r3, [pc, #180]	@ (80062c4 <xTaskResumeAll+0x128>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d903      	bls.n	800621e <xTaskResumeAll+0x82>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621a:	4a2a      	ldr	r2, [pc, #168]	@ (80062c4 <xTaskResumeAll+0x128>)
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a27      	ldr	r2, [pc, #156]	@ (80062c8 <xTaskResumeAll+0x12c>)
 800622c:	441a      	add	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7fe fd80 	bl	8004d3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800623e:	4b23      	ldr	r3, [pc, #140]	@ (80062cc <xTaskResumeAll+0x130>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	429a      	cmp	r2, r3
 8006246:	d302      	bcc.n	800624e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006248:	4b21      	ldr	r3, [pc, #132]	@ (80062d0 <xTaskResumeAll+0x134>)
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800624e:	4b1c      	ldr	r3, [pc, #112]	@ (80062c0 <xTaskResumeAll+0x124>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1cb      	bne.n	80061ee <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d001      	beq.n	8006260 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800625c:	f000 fb68 	bl	8006930 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006260:	4b1c      	ldr	r3, [pc, #112]	@ (80062d4 <xTaskResumeAll+0x138>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d010      	beq.n	800628e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800626c:	f000 f846 	bl	80062fc <xTaskIncrementTick>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006276:	4b16      	ldr	r3, [pc, #88]	@ (80062d0 <xTaskResumeAll+0x134>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3b01      	subs	r3, #1
 8006280:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f1      	bne.n	800626c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006288:	4b12      	ldr	r3, [pc, #72]	@ (80062d4 <xTaskResumeAll+0x138>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800628e:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <xTaskResumeAll+0x134>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006296:	2301      	movs	r3, #1
 8006298:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800629a:	4b0f      	ldr	r3, [pc, #60]	@ (80062d8 <xTaskResumeAll+0x13c>)
 800629c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062aa:	f001 fa05 	bl	80076b8 <vPortExitCritical>

	return xAlreadyYielded;
 80062ae:	68bb      	ldr	r3, [r7, #8]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20001418 	.word	0x20001418
 80062bc:	200013f0 	.word	0x200013f0
 80062c0:	200013b0 	.word	0x200013b0
 80062c4:	200013f8 	.word	0x200013f8
 80062c8:	20000f20 	.word	0x20000f20
 80062cc:	20000f1c 	.word	0x20000f1c
 80062d0:	20001404 	.word	0x20001404
 80062d4:	20001400 	.word	0x20001400
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062e2:	4b05      	ldr	r3, [pc, #20]	@ (80062f8 <xTaskGetTickCount+0x1c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062e8:	687b      	ldr	r3, [r7, #4]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	200013f4 	.word	0x200013f4

080062fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006306:	4b50      	ldr	r3, [pc, #320]	@ (8006448 <xTaskIncrementTick+0x14c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 808c 	bne.w	8006428 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006310:	4b4e      	ldr	r3, [pc, #312]	@ (800644c <xTaskIncrementTick+0x150>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006318:	4a4c      	ldr	r2, [pc, #304]	@ (800644c <xTaskIncrementTick+0x150>)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d123      	bne.n	800636c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006324:	4b4a      	ldr	r3, [pc, #296]	@ (8006450 <xTaskIncrementTick+0x154>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00d      	beq.n	800634a <xTaskIncrementTick+0x4e>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	b672      	cpsid	i
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	b662      	cpsie	i
 8006342:	603b      	str	r3, [r7, #0]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <xTaskIncrementTick+0x4a>
 800634a:	4b41      	ldr	r3, [pc, #260]	@ (8006450 <xTaskIncrementTick+0x154>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	4b40      	ldr	r3, [pc, #256]	@ (8006454 <xTaskIncrementTick+0x158>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a3e      	ldr	r2, [pc, #248]	@ (8006450 <xTaskIncrementTick+0x154>)
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	4a3e      	ldr	r2, [pc, #248]	@ (8006454 <xTaskIncrementTick+0x158>)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	4b3e      	ldr	r3, [pc, #248]	@ (8006458 <xTaskIncrementTick+0x15c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3301      	adds	r3, #1
 8006364:	4a3c      	ldr	r2, [pc, #240]	@ (8006458 <xTaskIncrementTick+0x15c>)
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	f000 fae2 	bl	8006930 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800636c:	4b3b      	ldr	r3, [pc, #236]	@ (800645c <xTaskIncrementTick+0x160>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	429a      	cmp	r2, r3
 8006374:	d349      	bcc.n	800640a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006376:	4b36      	ldr	r3, [pc, #216]	@ (8006450 <xTaskIncrementTick+0x154>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006380:	4b36      	ldr	r3, [pc, #216]	@ (800645c <xTaskIncrementTick+0x160>)
 8006382:	f04f 32ff 	mov.w	r2, #4294967295
 8006386:	601a      	str	r2, [r3, #0]
					break;
 8006388:	e03f      	b.n	800640a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800638a:	4b31      	ldr	r3, [pc, #196]	@ (8006450 <xTaskIncrementTick+0x154>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d203      	bcs.n	80063aa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063a2:	4a2e      	ldr	r2, [pc, #184]	@ (800645c <xTaskIncrementTick+0x160>)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80063a8:	e02f      	b.n	800640a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fd20 	bl	8004df4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	3318      	adds	r3, #24
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fe fd17 	bl	8004df4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ca:	4b25      	ldr	r3, [pc, #148]	@ (8006460 <xTaskIncrementTick+0x164>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d903      	bls.n	80063da <xTaskIncrementTick+0xde>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d6:	4a22      	ldr	r2, [pc, #136]	@ (8006460 <xTaskIncrementTick+0x164>)
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006464 <xTaskIncrementTick+0x168>)
 80063e8:	441a      	add	r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f7fe fca2 	bl	8004d3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006468 <xTaskIncrementTick+0x16c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	429a      	cmp	r2, r3
 8006402:	d3b8      	bcc.n	8006376 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006404:	2301      	movs	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006408:	e7b5      	b.n	8006376 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800640a:	4b17      	ldr	r3, [pc, #92]	@ (8006468 <xTaskIncrementTick+0x16c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006410:	4914      	ldr	r1, [pc, #80]	@ (8006464 <xTaskIncrementTick+0x168>)
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d907      	bls.n	8006432 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006422:	2301      	movs	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	e004      	b.n	8006432 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006428:	4b10      	ldr	r3, [pc, #64]	@ (800646c <xTaskIncrementTick+0x170>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	4a0f      	ldr	r2, [pc, #60]	@ (800646c <xTaskIncrementTick+0x170>)
 8006430:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006432:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <xTaskIncrementTick+0x174>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800643a:	2301      	movs	r3, #1
 800643c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800643e:	697b      	ldr	r3, [r7, #20]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20001418 	.word	0x20001418
 800644c:	200013f4 	.word	0x200013f4
 8006450:	200013a8 	.word	0x200013a8
 8006454:	200013ac 	.word	0x200013ac
 8006458:	20001408 	.word	0x20001408
 800645c:	20001410 	.word	0x20001410
 8006460:	200013f8 	.word	0x200013f8
 8006464:	20000f20 	.word	0x20000f20
 8006468:	20000f1c 	.word	0x20000f1c
 800646c:	20001400 	.word	0x20001400
 8006470:	20001404 	.word	0x20001404

08006474 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800647a:	4b29      	ldr	r3, [pc, #164]	@ (8006520 <vTaskSwitchContext+0xac>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006482:	4b28      	ldr	r3, [pc, #160]	@ (8006524 <vTaskSwitchContext+0xb0>)
 8006484:	2201      	movs	r2, #1
 8006486:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006488:	e044      	b.n	8006514 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800648a:	4b26      	ldr	r3, [pc, #152]	@ (8006524 <vTaskSwitchContext+0xb0>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006490:	4b25      	ldr	r3, [pc, #148]	@ (8006528 <vTaskSwitchContext+0xb4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	e013      	b.n	80064c0 <vTaskSwitchContext+0x4c>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10d      	bne.n	80064ba <vTaskSwitchContext+0x46>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	b672      	cpsid	i
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	b662      	cpsie	i
 80064b2:	607b      	str	r3, [r7, #4]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <vTaskSwitchContext+0x42>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3b01      	subs	r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	491a      	ldr	r1, [pc, #104]	@ (800652c <vTaskSwitchContext+0xb8>)
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0e1      	beq.n	8006498 <vTaskSwitchContext+0x24>
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4a13      	ldr	r2, [pc, #76]	@ (800652c <vTaskSwitchContext+0xb8>)
 80064e0:	4413      	add	r3, r2
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3308      	adds	r3, #8
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d104      	bne.n	8006504 <vTaskSwitchContext+0x90>
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a09      	ldr	r2, [pc, #36]	@ (8006530 <vTaskSwitchContext+0xbc>)
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	4a06      	ldr	r2, [pc, #24]	@ (8006528 <vTaskSwitchContext+0xb4>)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6013      	str	r3, [r2, #0]
}
 8006514:	bf00      	nop
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	20001418 	.word	0x20001418
 8006524:	20001404 	.word	0x20001404
 8006528:	200013f8 	.word	0x200013f8
 800652c:	20000f20 	.word	0x20000f20
 8006530:	20000f1c 	.word	0x20000f1c

08006534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10d      	bne.n	8006560 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	b672      	cpsid	i
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	b662      	cpsie	i
 8006558:	60fb      	str	r3, [r7, #12]
}
 800655a:	bf00      	nop
 800655c:	bf00      	nop
 800655e:	e7fd      	b.n	800655c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006560:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <vTaskPlaceOnEventList+0x4c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3318      	adds	r3, #24
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fe fc0a 	bl	8004d82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800656e:	2101      	movs	r1, #1
 8006570:	6838      	ldr	r0, [r7, #0]
 8006572:	f000 fba3 	bl	8006cbc <prvAddCurrentTaskToDelayedList>
}
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000f1c 	.word	0x20000f1c

08006584 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659a:	b672      	cpsid	i
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	b662      	cpsie	i
 80065aa:	617b      	str	r3, [r7, #20]
}
 80065ac:	bf00      	nop
 80065ae:	bf00      	nop
 80065b0:	e7fd      	b.n	80065ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065b2:	4b0a      	ldr	r3, [pc, #40]	@ (80065dc <vTaskPlaceOnEventListRestricted+0x58>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3318      	adds	r3, #24
 80065b8:	4619      	mov	r1, r3
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7fe fbbd 	bl	8004d3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80065c6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	68b8      	ldr	r0, [r7, #8]
 80065d0:	f000 fb74 	bl	8006cbc <prvAddCurrentTaskToDelayedList>
	}
 80065d4:	bf00      	nop
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	20000f1c 	.word	0x20000f1c

080065e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10d      	bne.n	8006612 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	b672      	cpsid	i
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	b662      	cpsie	i
 800660a:	60fb      	str	r3, [r7, #12]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	3318      	adds	r3, #24
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fbec 	bl	8004df4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661c:	4b1d      	ldr	r3, [pc, #116]	@ (8006694 <xTaskRemoveFromEventList+0xb4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11d      	bne.n	8006660 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3304      	adds	r3, #4
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe fbe3 	bl	8004df4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006632:	4b19      	ldr	r3, [pc, #100]	@ (8006698 <xTaskRemoveFromEventList+0xb8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d903      	bls.n	8006642 <xTaskRemoveFromEventList+0x62>
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663e:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <xTaskRemoveFromEventList+0xb8>)
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4a13      	ldr	r2, [pc, #76]	@ (800669c <xTaskRemoveFromEventList+0xbc>)
 8006650:	441a      	add	r2, r3
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7fe fb6e 	bl	8004d3a <vListInsertEnd>
 800665e:	e005      	b.n	800666c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3318      	adds	r3, #24
 8006664:	4619      	mov	r1, r3
 8006666:	480e      	ldr	r0, [pc, #56]	@ (80066a0 <xTaskRemoveFromEventList+0xc0>)
 8006668:	f7fe fb67 	bl	8004d3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006670:	4b0c      	ldr	r3, [pc, #48]	@ (80066a4 <xTaskRemoveFromEventList+0xc4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	429a      	cmp	r2, r3
 8006678:	d905      	bls.n	8006686 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800667e:	4b0a      	ldr	r3, [pc, #40]	@ (80066a8 <xTaskRemoveFromEventList+0xc8>)
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	e001      	b.n	800668a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800668a:	697b      	ldr	r3, [r7, #20]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20001418 	.word	0x20001418
 8006698:	200013f8 	.word	0x200013f8
 800669c:	20000f20 	.word	0x20000f20
 80066a0:	200013b0 	.word	0x200013b0
 80066a4:	20000f1c 	.word	0x20000f1c
 80066a8:	20001404 	.word	0x20001404

080066ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066b4:	4b06      	ldr	r3, [pc, #24]	@ (80066d0 <vTaskInternalSetTimeOutState+0x24>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066bc:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <vTaskInternalSetTimeOutState+0x28>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	605a      	str	r2, [r3, #4]
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	20001408 	.word	0x20001408
 80066d4:	200013f4 	.word	0x200013f4

080066d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10d      	bne.n	8006704 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	b672      	cpsid	i
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	b662      	cpsie	i
 80066fc:	613b      	str	r3, [r7, #16]
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	e7fd      	b.n	8006700 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10d      	bne.n	8006726 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	b672      	cpsid	i
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	b662      	cpsie	i
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	bf00      	nop
 8006724:	e7fd      	b.n	8006722 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006726:	f000 ff91 	bl	800764c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800672a:	4b1d      	ldr	r3, [pc, #116]	@ (80067a0 <xTaskCheckForTimeOut+0xc8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d102      	bne.n	800674a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006744:	2300      	movs	r3, #0
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	e023      	b.n	8006792 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	4b15      	ldr	r3, [pc, #84]	@ (80067a4 <xTaskCheckForTimeOut+0xcc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d007      	beq.n	8006766 <xTaskCheckForTimeOut+0x8e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	429a      	cmp	r2, r3
 800675e:	d302      	bcc.n	8006766 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	61fb      	str	r3, [r7, #28]
 8006764:	e015      	b.n	8006792 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	429a      	cmp	r2, r3
 800676e:	d20b      	bcs.n	8006788 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	1ad2      	subs	r2, r2, r3
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff ff95 	bl	80066ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
 8006786:	e004      	b.n	8006792 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800678e:	2301      	movs	r3, #1
 8006790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006792:	f000 ff91 	bl	80076b8 <vPortExitCritical>

	return xReturn;
 8006796:	69fb      	ldr	r3, [r7, #28]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	200013f4 	.word	0x200013f4
 80067a4:	20001408 	.word	0x20001408

080067a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067ac:	4b03      	ldr	r3, [pc, #12]	@ (80067bc <vTaskMissedYield+0x14>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	20001404 	.word	0x20001404

080067c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067c8:	f000 f852 	bl	8006870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80067cc:	4b06      	ldr	r3, [pc, #24]	@ (80067e8 <prvIdleTask+0x28>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d9f9      	bls.n	80067c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80067d4:	4b05      	ldr	r3, [pc, #20]	@ (80067ec <prvIdleTask+0x2c>)
 80067d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067e4:	e7f0      	b.n	80067c8 <prvIdleTask+0x8>
 80067e6:	bf00      	nop
 80067e8:	20000f20 	.word	0x20000f20
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067f6:	2300      	movs	r3, #0
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	e00c      	b.n	8006816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4a12      	ldr	r2, [pc, #72]	@ (8006850 <prvInitialiseTaskLists+0x60>)
 8006808:	4413      	add	r3, r2
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fa68 	bl	8004ce0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3301      	adds	r3, #1
 8006814:	607b      	str	r3, [r7, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b37      	cmp	r3, #55	@ 0x37
 800681a:	d9ef      	bls.n	80067fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800681c:	480d      	ldr	r0, [pc, #52]	@ (8006854 <prvInitialiseTaskLists+0x64>)
 800681e:	f7fe fa5f 	bl	8004ce0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006822:	480d      	ldr	r0, [pc, #52]	@ (8006858 <prvInitialiseTaskLists+0x68>)
 8006824:	f7fe fa5c 	bl	8004ce0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006828:	480c      	ldr	r0, [pc, #48]	@ (800685c <prvInitialiseTaskLists+0x6c>)
 800682a:	f7fe fa59 	bl	8004ce0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800682e:	480c      	ldr	r0, [pc, #48]	@ (8006860 <prvInitialiseTaskLists+0x70>)
 8006830:	f7fe fa56 	bl	8004ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006834:	480b      	ldr	r0, [pc, #44]	@ (8006864 <prvInitialiseTaskLists+0x74>)
 8006836:	f7fe fa53 	bl	8004ce0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800683a:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <prvInitialiseTaskLists+0x78>)
 800683c:	4a05      	ldr	r2, [pc, #20]	@ (8006854 <prvInitialiseTaskLists+0x64>)
 800683e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006840:	4b0a      	ldr	r3, [pc, #40]	@ (800686c <prvInitialiseTaskLists+0x7c>)
 8006842:	4a05      	ldr	r2, [pc, #20]	@ (8006858 <prvInitialiseTaskLists+0x68>)
 8006844:	601a      	str	r2, [r3, #0]
}
 8006846:	bf00      	nop
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000f20 	.word	0x20000f20
 8006854:	20001380 	.word	0x20001380
 8006858:	20001394 	.word	0x20001394
 800685c:	200013b0 	.word	0x200013b0
 8006860:	200013c4 	.word	0x200013c4
 8006864:	200013dc 	.word	0x200013dc
 8006868:	200013a8 	.word	0x200013a8
 800686c:	200013ac 	.word	0x200013ac

08006870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006876:	e019      	b.n	80068ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006878:	f000 fee8 	bl	800764c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687c:	4b10      	ldr	r3, [pc, #64]	@ (80068c0 <prvCheckTasksWaitingTermination+0x50>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3304      	adds	r3, #4
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fab3 	bl	8004df4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800688e:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <prvCheckTasksWaitingTermination+0x54>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3b01      	subs	r3, #1
 8006894:	4a0b      	ldr	r2, [pc, #44]	@ (80068c4 <prvCheckTasksWaitingTermination+0x54>)
 8006896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006898:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <prvCheckTasksWaitingTermination+0x58>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3b01      	subs	r3, #1
 800689e:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <prvCheckTasksWaitingTermination+0x58>)
 80068a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068a2:	f000 ff09 	bl	80076b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f810 	bl	80068cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ac:	4b06      	ldr	r3, [pc, #24]	@ (80068c8 <prvCheckTasksWaitingTermination+0x58>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e1      	bne.n	8006878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	200013c4 	.word	0x200013c4
 80068c4:	200013f0 	.word	0x200013f0
 80068c8:	200013d8 	.word	0x200013d8

080068cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d108      	bne.n	80068f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 f8ae 	bl	8007a44 <vPortFree>
				vPortFree( pxTCB );
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 f8ab 	bl	8007a44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068ee:	e01b      	b.n	8006928 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d103      	bne.n	8006902 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f001 f8a2 	bl	8007a44 <vPortFree>
	}
 8006900:	e012      	b.n	8006928 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006908:	2b02      	cmp	r3, #2
 800690a:	d00d      	beq.n	8006928 <prvDeleteTCB+0x5c>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	b672      	cpsid	i
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	b662      	cpsie	i
 8006920:	60fb      	str	r3, [r7, #12]
}
 8006922:	bf00      	nop
 8006924:	bf00      	nop
 8006926:	e7fd      	b.n	8006924 <prvDeleteTCB+0x58>
	}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006936:	4b0c      	ldr	r3, [pc, #48]	@ (8006968 <prvResetNextTaskUnblockTime+0x38>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006940:	4b0a      	ldr	r3, [pc, #40]	@ (800696c <prvResetNextTaskUnblockTime+0x3c>)
 8006942:	f04f 32ff 	mov.w	r2, #4294967295
 8006946:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006948:	e008      	b.n	800695c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800694a:	4b07      	ldr	r3, [pc, #28]	@ (8006968 <prvResetNextTaskUnblockTime+0x38>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4a04      	ldr	r2, [pc, #16]	@ (800696c <prvResetNextTaskUnblockTime+0x3c>)
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	200013a8 	.word	0x200013a8
 800696c:	20001410 	.word	0x20001410

08006970 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006976:	4b05      	ldr	r3, [pc, #20]	@ (800698c <xTaskGetCurrentTaskHandle+0x1c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800697c:	687b      	ldr	r3, [r7, #4]
	}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20000f1c 	.word	0x20000f1c

08006990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006996:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <xTaskGetSchedulerState+0x34>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800699e:	2301      	movs	r3, #1
 80069a0:	607b      	str	r3, [r7, #4]
 80069a2:	e008      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069a4:	4b08      	ldr	r3, [pc, #32]	@ (80069c8 <xTaskGetSchedulerState+0x38>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069ac:	2302      	movs	r3, #2
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	e001      	b.n	80069b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80069b2:	2300      	movs	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80069b6:	687b      	ldr	r3, [r7, #4]
	}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	200013fc 	.word	0x200013fc
 80069c8:	20001418 	.word	0x20001418

080069cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d051      	beq.n	8006a86 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006a90 <xTaskPriorityInherit+0xc4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d241      	bcs.n	8006a74 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	db06      	blt.n	8006a06 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069f8:	4b25      	ldr	r3, [pc, #148]	@ (8006a90 <xTaskPriorityInherit+0xc4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069fe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6959      	ldr	r1, [r3, #20]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4a1f      	ldr	r2, [pc, #124]	@ (8006a94 <xTaskPriorityInherit+0xc8>)
 8006a18:	4413      	add	r3, r2
 8006a1a:	4299      	cmp	r1, r3
 8006a1c:	d122      	bne.n	8006a64 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	3304      	adds	r3, #4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe f9e6 	bl	8004df4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a28:	4b19      	ldr	r3, [pc, #100]	@ (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a36:	4b18      	ldr	r3, [pc, #96]	@ (8006a98 <xTaskPriorityInherit+0xcc>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d903      	bls.n	8006a46 <xTaskPriorityInherit+0x7a>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	4a15      	ldr	r2, [pc, #84]	@ (8006a98 <xTaskPriorityInherit+0xcc>)
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4a10      	ldr	r2, [pc, #64]	@ (8006a94 <xTaskPriorityInherit+0xc8>)
 8006a54:	441a      	add	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe f96c 	bl	8004d3a <vListInsertEnd>
 8006a62:	e004      	b.n	8006a6e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a64:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e008      	b.n	8006a86 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <xTaskPriorityInherit+0xc4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d201      	bcs.n	8006a86 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a82:	2301      	movs	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a86:	68fb      	ldr	r3, [r7, #12]
	}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	20000f1c 	.word	0x20000f1c
 8006a94:	20000f20 	.word	0x20000f20
 8006a98:	200013f8 	.word	0x200013f8

08006a9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b086      	sub	sp, #24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d05c      	beq.n	8006b6c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ab2:	4b31      	ldr	r3, [pc, #196]	@ (8006b78 <xTaskPriorityDisinherit+0xdc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d00d      	beq.n	8006ad8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	b672      	cpsid	i
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	b662      	cpsie	i
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	e7fd      	b.n	8006ad4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10d      	bne.n	8006afc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae4:	b672      	cpsid	i
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	b662      	cpsie	i
 8006af4:	60bb      	str	r3, [r7, #8]
}
 8006af6:	bf00      	nop
 8006af8:	bf00      	nop
 8006afa:	e7fd      	b.n	8006af8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b00:	1e5a      	subs	r2, r3, #1
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d02c      	beq.n	8006b6c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d128      	bne.n	8006b6c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe f968 	bl	8004df4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b7c <xTaskPriorityDisinherit+0xe0>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d903      	bls.n	8006b4c <xTaskPriorityDisinherit+0xb0>
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b48:	4a0c      	ldr	r2, [pc, #48]	@ (8006b7c <xTaskPriorityDisinherit+0xe0>)
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4a09      	ldr	r2, [pc, #36]	@ (8006b80 <xTaskPriorityDisinherit+0xe4>)
 8006b5a:	441a      	add	r2, r3
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f7fe f8e9 	bl	8004d3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b6c:	697b      	ldr	r3, [r7, #20]
	}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20000f1c 	.word	0x20000f1c
 8006b7c:	200013f8 	.word	0x200013f8
 8006b80:	20000f20 	.word	0x20000f20

08006b84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b92:	2301      	movs	r3, #1
 8006b94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d070      	beq.n	8006c7e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10d      	bne.n	8006bc0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	b672      	cpsid	i
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	b662      	cpsie	i
 8006bb8:	60fb      	str	r3, [r7, #12]
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	e7fd      	b.n	8006bbc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d902      	bls.n	8006bd0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	61fb      	str	r3, [r7, #28]
 8006bce:	e002      	b.n	8006bd6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d04e      	beq.n	8006c7e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d149      	bne.n	8006c7e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006bea:	4b27      	ldr	r3, [pc, #156]	@ (8006c88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d10d      	bne.n	8006c10 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf8:	b672      	cpsid	i
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	b662      	cpsie	i
 8006c08:	60bb      	str	r3, [r7, #8]
}
 8006c0a:	bf00      	nop
 8006c0c:	bf00      	nop
 8006c0e:	e7fd      	b.n	8006c0c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	db04      	blt.n	8006c2e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	6959      	ldr	r1, [r3, #20]
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4a13      	ldr	r2, [pc, #76]	@ (8006c8c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	4299      	cmp	r1, r3
 8006c42:	d11c      	bne.n	8006c7e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	3304      	adds	r3, #4
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe f8d3 	bl	8004df4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c52:	4b0f      	ldr	r3, [pc, #60]	@ (8006c90 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d903      	bls.n	8006c62 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006c90 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4a07      	ldr	r2, [pc, #28]	@ (8006c8c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006c70:	441a      	add	r2, r3
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4619      	mov	r1, r3
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f7fe f85e 	bl	8004d3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c7e:	bf00      	nop
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	20000f1c 	.word	0x20000f1c
 8006c8c:	20000f20 	.word	0x20000f20
 8006c90:	200013f8 	.word	0x200013f8

08006c94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c98:	4b07      	ldr	r3, [pc, #28]	@ (8006cb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ca0:	4b05      	ldr	r3, [pc, #20]	@ (8006cb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ca6:	3201      	adds	r2, #1
 8006ca8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006caa:	4b03      	ldr	r3, [pc, #12]	@ (8006cb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006cac:	681b      	ldr	r3, [r3, #0]
	}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000f1c 	.word	0x20000f1c

08006cbc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cc6:	4b21      	ldr	r3, [pc, #132]	@ (8006d4c <prvAddCurrentTaskToDelayedList+0x90>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ccc:	4b20      	ldr	r3, [pc, #128]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe f88e 	bl	8004df4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d10a      	bne.n	8006cf6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4819      	ldr	r0, [pc, #100]	@ (8006d54 <prvAddCurrentTaskToDelayedList+0x98>)
 8006cf0:	f7fe f823 	bl	8004d3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006cf4:	e026      	b.n	8006d44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006cfe:	4b14      	ldr	r3, [pc, #80]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d209      	bcs.n	8006d22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d0e:	4b12      	ldr	r3, [pc, #72]	@ (8006d58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	4b0f      	ldr	r3, [pc, #60]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe f831 	bl	8004d82 <vListInsert>
}
 8006d20:	e010      	b.n	8006d44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d22:	4b0e      	ldr	r3, [pc, #56]	@ (8006d5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b0a      	ldr	r3, [pc, #40]	@ (8006d50 <prvAddCurrentTaskToDelayedList+0x94>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	f7fe f827 	bl	8004d82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d34:	4b0a      	ldr	r3, [pc, #40]	@ (8006d60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d202      	bcs.n	8006d44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006d3e:	4a08      	ldr	r2, [pc, #32]	@ (8006d60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	6013      	str	r3, [r2, #0]
}
 8006d44:	bf00      	nop
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	200013f4 	.word	0x200013f4
 8006d50:	20000f1c 	.word	0x20000f1c
 8006d54:	200013dc 	.word	0x200013dc
 8006d58:	200013ac 	.word	0x200013ac
 8006d5c:	200013a8 	.word	0x200013a8
 8006d60:	20001410 	.word	0x20001410

08006d64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08a      	sub	sp, #40	@ 0x28
 8006d68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d6e:	f000 fb21 	bl	80073b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d72:	4b1e      	ldr	r3, [pc, #120]	@ (8006dec <xTimerCreateTimerTask+0x88>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d021      	beq.n	8006dbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d82:	1d3a      	adds	r2, r7, #4
 8006d84:	f107 0108 	add.w	r1, r7, #8
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fd ff8d 	bl	8004cac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	9202      	str	r2, [sp, #8]
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	2300      	movs	r3, #0
 8006da2:	460a      	mov	r2, r1
 8006da4:	4912      	ldr	r1, [pc, #72]	@ (8006df0 <xTimerCreateTimerTask+0x8c>)
 8006da6:	4813      	ldr	r0, [pc, #76]	@ (8006df4 <xTimerCreateTimerTask+0x90>)
 8006da8:	f7fe ff98 	bl	8005cdc <xTaskCreateStatic>
 8006dac:	4603      	mov	r3, r0
 8006dae:	4a12      	ldr	r2, [pc, #72]	@ (8006df8 <xTimerCreateTimerTask+0x94>)
 8006db0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006db2:	4b11      	ldr	r3, [pc, #68]	@ (8006df8 <xTimerCreateTimerTask+0x94>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10d      	bne.n	8006de0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc8:	b672      	cpsid	i
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	b662      	cpsie	i
 8006dd8:	613b      	str	r3, [r7, #16]
}
 8006dda:	bf00      	nop
 8006ddc:	bf00      	nop
 8006dde:	e7fd      	b.n	8006ddc <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006de0:	697b      	ldr	r3, [r7, #20]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	2000144c 	.word	0x2000144c
 8006df0:	08007d58 	.word	0x08007d58
 8006df4:	08006f3d 	.word	0x08006f3d
 8006df8:	20001450 	.word	0x20001450

08006dfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08a      	sub	sp, #40	@ 0x28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10d      	bne.n	8006e30 <xTimerGenericCommand+0x34>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e18:	b672      	cpsid	i
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	b662      	cpsie	i
 8006e28:	623b      	str	r3, [r7, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	bf00      	nop
 8006e2e:	e7fd      	b.n	8006e2c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006e30:	4b19      	ldr	r3, [pc, #100]	@ (8006e98 <xTimerGenericCommand+0x9c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d02a      	beq.n	8006e8e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2b05      	cmp	r3, #5
 8006e48:	dc18      	bgt.n	8006e7c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e4a:	f7ff fda1 	bl	8006990 <xTaskGetSchedulerState>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d109      	bne.n	8006e68 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e54:	4b10      	ldr	r3, [pc, #64]	@ (8006e98 <xTimerGenericCommand+0x9c>)
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	f107 0110 	add.w	r1, r7, #16
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e60:	f7fe fa08 	bl	8005274 <xQueueGenericSend>
 8006e64:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e66:	e012      	b.n	8006e8e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e68:	4b0b      	ldr	r3, [pc, #44]	@ (8006e98 <xTimerGenericCommand+0x9c>)
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	f107 0110 	add.w	r1, r7, #16
 8006e70:	2300      	movs	r3, #0
 8006e72:	2200      	movs	r2, #0
 8006e74:	f7fe f9fe 	bl	8005274 <xQueueGenericSend>
 8006e78:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e7a:	e008      	b.n	8006e8e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e7c:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <xTimerGenericCommand+0x9c>)
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	f107 0110 	add.w	r1, r7, #16
 8006e84:	2300      	movs	r3, #0
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	f7fe fafe 	bl	8005488 <xQueueGenericSendFromISR>
 8006e8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3728      	adds	r7, #40	@ 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	2000144c 	.word	0x2000144c

08006e9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea6:	4b24      	ldr	r3, [pc, #144]	@ (8006f38 <prvProcessExpiredTimer+0x9c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fd ff9d 	bl	8004df4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d025      	beq.n	8006f14 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	18d1      	adds	r1, r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	6978      	ldr	r0, [r7, #20]
 8006ed6:	f000 f8d7 	bl	8007088 <prvInsertTimerInActiveList>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d022      	beq.n	8006f26 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	6978      	ldr	r0, [r7, #20]
 8006eec:	f7ff ff86 	bl	8006dfc <xTimerGenericCommand>
 8006ef0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d116      	bne.n	8006f26 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	b672      	cpsid	i
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	b662      	cpsie	i
 8006f0c:	60fb      	str	r3, [r7, #12]
}
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	e7fd      	b.n	8006f10 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	6978      	ldr	r0, [r7, #20]
 8006f2c:	4798      	blx	r3
}
 8006f2e:	bf00      	nop
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20001444 	.word	0x20001444

08006f3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f44:	f107 0308 	add.w	r3, r7, #8
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 f859 	bl	8007000 <prvGetNextExpireTime>
 8006f4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4619      	mov	r1, r3
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 f805 	bl	8006f64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f5a:	f000 f8d7 	bl	800710c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f5e:	bf00      	nop
 8006f60:	e7f0      	b.n	8006f44 <prvTimerTask+0x8>
	...

08006f64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f6e:	f7ff f907 	bl	8006180 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f72:	f107 0308 	add.w	r3, r7, #8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f866 	bl	8007048 <prvSampleTimeNow>
 8006f7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d130      	bne.n	8006fe6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10a      	bne.n	8006fa0 <prvProcessTimerOrBlockTask+0x3c>
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d806      	bhi.n	8006fa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f92:	f7ff f903 	bl	800619c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f96:	68f9      	ldr	r1, [r7, #12]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff ff7f 	bl	8006e9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f9e:	e024      	b.n	8006fea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006fa6:	4b13      	ldr	r3, [pc, #76]	@ (8006ff4 <prvProcessTimerOrBlockTask+0x90>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <prvProcessTimerOrBlockTask+0x50>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <prvProcessTimerOrBlockTask+0x52>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ff8 <prvProcessTimerOrBlockTask+0x94>)
 8006fba:	6818      	ldr	r0, [r3, #0]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f7fe fe55 	bl	8005c74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006fca:	f7ff f8e7 	bl	800619c <xTaskResumeAll>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10a      	bne.n	8006fea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006fd4:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <prvProcessTimerOrBlockTask+0x98>)
 8006fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	f3bf 8f6f 	isb	sy
}
 8006fe4:	e001      	b.n	8006fea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006fe6:	f7ff f8d9 	bl	800619c <xTaskResumeAll>
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20001448 	.word	0x20001448
 8006ff8:	2000144c 	.word	0x2000144c
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007008:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <prvGetNextExpireTime+0x44>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <prvGetNextExpireTime+0x16>
 8007012:	2201      	movs	r2, #1
 8007014:	e000      	b.n	8007018 <prvGetNextExpireTime+0x18>
 8007016:	2200      	movs	r2, #0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007024:	4b07      	ldr	r3, [pc, #28]	@ (8007044 <prvGetNextExpireTime+0x44>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e001      	b.n	8007034 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007034:	68fb      	ldr	r3, [r7, #12]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20001444 	.word	0x20001444

08007048 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007050:	f7ff f944 	bl	80062dc <xTaskGetTickCount>
 8007054:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007056:	4b0b      	ldr	r3, [pc, #44]	@ (8007084 <prvSampleTimeNow+0x3c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	429a      	cmp	r2, r3
 800705e:	d205      	bcs.n	800706c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007060:	f000 f940 	bl	80072e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e002      	b.n	8007072 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007072:	4a04      	ldr	r2, [pc, #16]	@ (8007084 <prvSampleTimeNow+0x3c>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007078:	68fb      	ldr	r3, [r7, #12]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20001454 	.word	0x20001454

08007088 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d812      	bhi.n	80070d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	1ad2      	subs	r2, r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d302      	bcc.n	80070c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e01b      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070c2:	4b10      	ldr	r3, [pc, #64]	@ (8007104 <prvInsertTimerInActiveList+0x7c>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4619      	mov	r1, r3
 80070cc:	4610      	mov	r0, r2
 80070ce:	f7fd fe58 	bl	8004d82 <vListInsert>
 80070d2:	e012      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d206      	bcs.n	80070ea <prvInsertTimerInActiveList+0x62>
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d302      	bcc.n	80070ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e007      	b.n	80070fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070ea:	4b07      	ldr	r3, [pc, #28]	@ (8007108 <prvInsertTimerInActiveList+0x80>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fd fe44 	bl	8004d82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80070fa:	697b      	ldr	r3, [r7, #20]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20001448 	.word	0x20001448
 8007108:	20001444 	.word	0x20001444

0800710c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08e      	sub	sp, #56	@ 0x38
 8007110:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007112:	e0d4      	b.n	80072be <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	da1b      	bge.n	8007152 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800711a:	1d3b      	adds	r3, r7, #4
 800711c:	3304      	adds	r3, #4
 800711e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10d      	bne.n	8007142 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800712a:	b672      	cpsid	i
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	b662      	cpsie	i
 800713a:	61fb      	str	r3, [r7, #28]
}
 800713c:	bf00      	nop
 800713e:	bf00      	nop
 8007140:	e7fd      	b.n	800713e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007148:	6850      	ldr	r0, [r2, #4]
 800714a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800714c:	6892      	ldr	r2, [r2, #8]
 800714e:	4611      	mov	r1, r2
 8007150:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f2c0 80b2 	blt.w	80072be <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800715e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d004      	beq.n	8007170 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007168:	3304      	adds	r3, #4
 800716a:	4618      	mov	r0, r3
 800716c:	f7fd fe42 	bl	8004df4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007170:	463b      	mov	r3, r7
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff ff68 	bl	8007048 <prvSampleTimeNow>
 8007178:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b09      	cmp	r3, #9
 800717e:	f200 809b 	bhi.w	80072b8 <prvProcessReceivedCommands+0x1ac>
 8007182:	a201      	add	r2, pc, #4	@ (adr r2, 8007188 <prvProcessReceivedCommands+0x7c>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	080071b1 	.word	0x080071b1
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071b1 	.word	0x080071b1
 8007194:	0800722b 	.word	0x0800722b
 8007198:	0800723f 	.word	0x0800723f
 800719c:	0800728f 	.word	0x0800728f
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071b1 	.word	0x080071b1
 80071a8:	0800722b 	.word	0x0800722b
 80071ac:	0800723f 	.word	0x0800723f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	18d1      	adds	r1, r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071d0:	f7ff ff5a 	bl	8007088 <prvInsertTimerInActiveList>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d070      	beq.n	80072bc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d065      	beq.n	80072bc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	441a      	add	r2, r3
 80071f8:	2300      	movs	r3, #0
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	2300      	movs	r3, #0
 80071fe:	2100      	movs	r1, #0
 8007200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007202:	f7ff fdfb 	bl	8006dfc <xTimerGenericCommand>
 8007206:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d156      	bne.n	80072bc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	b672      	cpsid	i
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	b662      	cpsie	i
 8007222:	61bb      	str	r3, [r7, #24]
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800722a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	b2da      	uxtb	r2, r3
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800723c:	e03f      	b.n	80072be <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800723e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007240:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	b2da      	uxtb	r2, r3
 800724a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007254:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10d      	bne.n	800727a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007262:	b672      	cpsid	i
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	b662      	cpsie	i
 8007272:	617b      	str	r3, [r7, #20]
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800727a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	18d1      	adds	r1, r2, r3
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007288:	f7ff fefe 	bl	8007088 <prvInsertTimerInActiveList>
					break;
 800728c:	e017      	b.n	80072be <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800728e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800729c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800729e:	f000 fbd1 	bl	8007a44 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80072a2:	e00c      	b.n	80072be <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072aa:	f023 0301 	bic.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80072b6:	e002      	b.n	80072be <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80072b8:	bf00      	nop
 80072ba:	e000      	b.n	80072be <prvProcessReceivedCommands+0x1b2>
					break;
 80072bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072be:	4b08      	ldr	r3, [pc, #32]	@ (80072e0 <prvProcessReceivedCommands+0x1d4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	1d39      	adds	r1, r7, #4
 80072c4:	2200      	movs	r2, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fe f982 	bl	80055d0 <xQueueReceive>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f47f af20 	bne.w	8007114 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop
 80072d8:	3730      	adds	r7, #48	@ 0x30
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	2000144c 	.word	0x2000144c

080072e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072ea:	e04b      	b.n	8007384 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072ec:	4b2f      	ldr	r3, [pc, #188]	@ (80073ac <prvSwitchTimerLists+0xc8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f6:	4b2d      	ldr	r3, [pc, #180]	@ (80073ac <prvSwitchTimerLists+0xc8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3304      	adds	r3, #4
 8007304:	4618      	mov	r0, r3
 8007306:	f7fd fd75 	bl	8004df4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b00      	cmp	r3, #0
 800731e:	d031      	beq.n	8007384 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4413      	add	r3, r2
 8007328:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	429a      	cmp	r2, r3
 8007330:	d90e      	bls.n	8007350 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800733e:	4b1b      	ldr	r3, [pc, #108]	@ (80073ac <prvSwitchTimerLists+0xc8>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3304      	adds	r3, #4
 8007346:	4619      	mov	r1, r3
 8007348:	4610      	mov	r0, r2
 800734a:	f7fd fd1a 	bl	8004d82 <vListInsert>
 800734e:	e019      	b.n	8007384 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007350:	2300      	movs	r3, #0
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	2300      	movs	r3, #0
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	2100      	movs	r1, #0
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fd4e 	bl	8006dfc <xTimerGenericCommand>
 8007360:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10d      	bne.n	8007384 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736c:	b672      	cpsid	i
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	b662      	cpsie	i
 800737c:	603b      	str	r3, [r7, #0]
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007384:	4b09      	ldr	r3, [pc, #36]	@ (80073ac <prvSwitchTimerLists+0xc8>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1ae      	bne.n	80072ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800738e:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <prvSwitchTimerLists+0xc8>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007394:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <prvSwitchTimerLists+0xcc>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a04      	ldr	r2, [pc, #16]	@ (80073ac <prvSwitchTimerLists+0xc8>)
 800739a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800739c:	4a04      	ldr	r2, [pc, #16]	@ (80073b0 <prvSwitchTimerLists+0xcc>)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	6013      	str	r3, [r2, #0]
}
 80073a2:	bf00      	nop
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20001444 	.word	0x20001444
 80073b0:	20001448 	.word	0x20001448

080073b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80073ba:	f000 f947 	bl	800764c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80073be:	4b15      	ldr	r3, [pc, #84]	@ (8007414 <prvCheckForValidListAndQueue+0x60>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d120      	bne.n	8007408 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80073c6:	4814      	ldr	r0, [pc, #80]	@ (8007418 <prvCheckForValidListAndQueue+0x64>)
 80073c8:	f7fd fc8a 	bl	8004ce0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80073cc:	4813      	ldr	r0, [pc, #76]	@ (800741c <prvCheckForValidListAndQueue+0x68>)
 80073ce:	f7fd fc87 	bl	8004ce0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80073d2:	4b13      	ldr	r3, [pc, #76]	@ (8007420 <prvCheckForValidListAndQueue+0x6c>)
 80073d4:	4a10      	ldr	r2, [pc, #64]	@ (8007418 <prvCheckForValidListAndQueue+0x64>)
 80073d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80073d8:	4b12      	ldr	r3, [pc, #72]	@ (8007424 <prvCheckForValidListAndQueue+0x70>)
 80073da:	4a10      	ldr	r2, [pc, #64]	@ (800741c <prvCheckForValidListAndQueue+0x68>)
 80073dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80073de:	2300      	movs	r3, #0
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	4b11      	ldr	r3, [pc, #68]	@ (8007428 <prvCheckForValidListAndQueue+0x74>)
 80073e4:	4a11      	ldr	r2, [pc, #68]	@ (800742c <prvCheckForValidListAndQueue+0x78>)
 80073e6:	2110      	movs	r1, #16
 80073e8:	200a      	movs	r0, #10
 80073ea:	f7fd fd99 	bl	8004f20 <xQueueGenericCreateStatic>
 80073ee:	4603      	mov	r3, r0
 80073f0:	4a08      	ldr	r2, [pc, #32]	@ (8007414 <prvCheckForValidListAndQueue+0x60>)
 80073f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80073f4:	4b07      	ldr	r3, [pc, #28]	@ (8007414 <prvCheckForValidListAndQueue+0x60>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80073fc:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <prvCheckForValidListAndQueue+0x60>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	490b      	ldr	r1, [pc, #44]	@ (8007430 <prvCheckForValidListAndQueue+0x7c>)
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fc0c 	bl	8005c20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007408:	f000 f956 	bl	80076b8 <vPortExitCritical>
}
 800740c:	bf00      	nop
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	2000144c 	.word	0x2000144c
 8007418:	2000141c 	.word	0x2000141c
 800741c:	20001430 	.word	0x20001430
 8007420:	20001444 	.word	0x20001444
 8007424:	20001448 	.word	0x20001448
 8007428:	200014f8 	.word	0x200014f8
 800742c:	20001458 	.word	0x20001458
 8007430:	08007d60 	.word	0x08007d60

08007434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3b04      	subs	r3, #4
 8007444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800744c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3b04      	subs	r3, #4
 8007452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f023 0201 	bic.w	r2, r3, #1
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	3b04      	subs	r3, #4
 8007462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007464:	4a0c      	ldr	r2, [pc, #48]	@ (8007498 <pxPortInitialiseStack+0x64>)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	3b14      	subs	r3, #20
 800746e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3b04      	subs	r3, #4
 800747a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f06f 0202 	mvn.w	r2, #2
 8007482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3b20      	subs	r3, #32
 8007488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800748a:	68fb      	ldr	r3, [r7, #12]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	0800749d 	.word	0x0800749d

0800749c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074a6:	4b15      	ldr	r3, [pc, #84]	@ (80074fc <prvTaskExitError+0x60>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d00d      	beq.n	80074cc <prvTaskExitError+0x30>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	b672      	cpsid	i
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	b662      	cpsie	i
 80074c4:	60fb      	str	r3, [r7, #12]
}
 80074c6:	bf00      	nop
 80074c8:	bf00      	nop
 80074ca:	e7fd      	b.n	80074c8 <prvTaskExitError+0x2c>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d0:	b672      	cpsid	i
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	b662      	cpsie	i
 80074e0:	60bb      	str	r3, [r7, #8]
}
 80074e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80074e4:	bf00      	nop
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0fc      	beq.n	80074e6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80074ec:	bf00      	nop
 80074ee:	bf00      	nop
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	2000000c 	.word	0x2000000c

08007500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007500:	4b07      	ldr	r3, [pc, #28]	@ (8007520 <pxCurrentTCBConst2>)
 8007502:	6819      	ldr	r1, [r3, #0]
 8007504:	6808      	ldr	r0, [r1, #0]
 8007506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	f380 8809 	msr	PSP, r0
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f04f 0000 	mov.w	r0, #0
 8007516:	f380 8811 	msr	BASEPRI, r0
 800751a:	4770      	bx	lr
 800751c:	f3af 8000 	nop.w

08007520 <pxCurrentTCBConst2>:
 8007520:	20000f1c 	.word	0x20000f1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop

08007528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007528:	4808      	ldr	r0, [pc, #32]	@ (800754c <prvPortStartFirstTask+0x24>)
 800752a:	6800      	ldr	r0, [r0, #0]
 800752c:	6800      	ldr	r0, [r0, #0]
 800752e:	f380 8808 	msr	MSP, r0
 8007532:	f04f 0000 	mov.w	r0, #0
 8007536:	f380 8814 	msr	CONTROL, r0
 800753a:	b662      	cpsie	i
 800753c:	b661      	cpsie	f
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	df00      	svc	0
 8007548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800754a:	bf00      	nop
 800754c:	e000ed08 	.word	0xe000ed08

08007550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007556:	4b37      	ldr	r3, [pc, #220]	@ (8007634 <xPortStartScheduler+0xe4>)
 8007558:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b2db      	uxtb	r3, r3
 8007560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	22ff      	movs	r2, #255	@ 0xff
 8007566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007578:	b2da      	uxtb	r2, r3
 800757a:	4b2f      	ldr	r3, [pc, #188]	@ (8007638 <xPortStartScheduler+0xe8>)
 800757c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800757e:	4b2f      	ldr	r3, [pc, #188]	@ (800763c <xPortStartScheduler+0xec>)
 8007580:	2207      	movs	r2, #7
 8007582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007584:	e009      	b.n	800759a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007586:	4b2d      	ldr	r3, [pc, #180]	@ (800763c <xPortStartScheduler+0xec>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3b01      	subs	r3, #1
 800758c:	4a2b      	ldr	r2, [pc, #172]	@ (800763c <xPortStartScheduler+0xec>)
 800758e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	b2db      	uxtb	r3, r3
 8007598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	b2db      	uxtb	r3, r3
 800759e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a2:	2b80      	cmp	r3, #128	@ 0x80
 80075a4:	d0ef      	beq.n	8007586 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075a6:	4b25      	ldr	r3, [pc, #148]	@ (800763c <xPortStartScheduler+0xec>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f1c3 0307 	rsb	r3, r3, #7
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d00d      	beq.n	80075ce <xPortStartScheduler+0x7e>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	b672      	cpsid	i
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	b662      	cpsie	i
 80075c6:	60bb      	str	r3, [r7, #8]
}
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
 80075cc:	e7fd      	b.n	80075ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075ce:	4b1b      	ldr	r3, [pc, #108]	@ (800763c <xPortStartScheduler+0xec>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	021b      	lsls	r3, r3, #8
 80075d4:	4a19      	ldr	r2, [pc, #100]	@ (800763c <xPortStartScheduler+0xec>)
 80075d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075d8:	4b18      	ldr	r3, [pc, #96]	@ (800763c <xPortStartScheduler+0xec>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075e0:	4a16      	ldr	r2, [pc, #88]	@ (800763c <xPortStartScheduler+0xec>)
 80075e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075ec:	4b14      	ldr	r3, [pc, #80]	@ (8007640 <xPortStartScheduler+0xf0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a13      	ldr	r2, [pc, #76]	@ (8007640 <xPortStartScheduler+0xf0>)
 80075f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075f8:	4b11      	ldr	r3, [pc, #68]	@ (8007640 <xPortStartScheduler+0xf0>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a10      	ldr	r2, [pc, #64]	@ (8007640 <xPortStartScheduler+0xf0>)
 80075fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007602:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007604:	f000 f8dc 	bl	80077c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007608:	4b0e      	ldr	r3, [pc, #56]	@ (8007644 <xPortStartScheduler+0xf4>)
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800760e:	f000 f8fb 	bl	8007808 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <xPortStartScheduler+0xf8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a0c      	ldr	r2, [pc, #48]	@ (8007648 <xPortStartScheduler+0xf8>)
 8007618:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800761c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800761e:	f7ff ff83 	bl	8007528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007622:	f7fe ff27 	bl	8006474 <vTaskSwitchContext>
	prvTaskExitError();
 8007626:	f7ff ff39 	bl	800749c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	e000e400 	.word	0xe000e400
 8007638:	20001548 	.word	0x20001548
 800763c:	2000154c 	.word	0x2000154c
 8007640:	e000ed20 	.word	0xe000ed20
 8007644:	2000000c 	.word	0x2000000c
 8007648:	e000ef34 	.word	0xe000ef34

0800764c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
	__asm volatile
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	b672      	cpsid	i
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	b662      	cpsie	i
 8007666:	607b      	str	r3, [r7, #4]
}
 8007668:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800766a:	4b11      	ldr	r3, [pc, #68]	@ (80076b0 <vPortEnterCritical+0x64>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3301      	adds	r3, #1
 8007670:	4a0f      	ldr	r2, [pc, #60]	@ (80076b0 <vPortEnterCritical+0x64>)
 8007672:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007674:	4b0e      	ldr	r3, [pc, #56]	@ (80076b0 <vPortEnterCritical+0x64>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d112      	bne.n	80076a2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800767c:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <vPortEnterCritical+0x68>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00d      	beq.n	80076a2 <vPortEnterCritical+0x56>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	b672      	cpsid	i
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	b662      	cpsie	i
 800769a:	603b      	str	r3, [r7, #0]
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	e7fd      	b.n	800769e <vPortEnterCritical+0x52>
	}
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	2000000c 	.word	0x2000000c
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076be:	4b13      	ldr	r3, [pc, #76]	@ (800770c <vPortExitCritical+0x54>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10d      	bne.n	80076e2 <vPortExitCritical+0x2a>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ca:	b672      	cpsid	i
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	b662      	cpsie	i
 80076da:	607b      	str	r3, [r7, #4]
}
 80076dc:	bf00      	nop
 80076de:	bf00      	nop
 80076e0:	e7fd      	b.n	80076de <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80076e2:	4b0a      	ldr	r3, [pc, #40]	@ (800770c <vPortExitCritical+0x54>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	4a08      	ldr	r2, [pc, #32]	@ (800770c <vPortExitCritical+0x54>)
 80076ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076ec:	4b07      	ldr	r3, [pc, #28]	@ (800770c <vPortExitCritical+0x54>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d105      	bne.n	8007700 <vPortExitCritical+0x48>
 80076f4:	2300      	movs	r3, #0
 80076f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f383 8811 	msr	BASEPRI, r3
}
 80076fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	2000000c 	.word	0x2000000c

08007710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007710:	f3ef 8009 	mrs	r0, PSP
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4b15      	ldr	r3, [pc, #84]	@ (8007770 <pxCurrentTCBConst>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f01e 0f10 	tst.w	lr, #16
 8007720:	bf08      	it	eq
 8007722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007730:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007734:	b672      	cpsid	i
 8007736:	f380 8811 	msr	BASEPRI, r0
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	b662      	cpsie	i
 8007744:	f7fe fe96 	bl	8006474 <vTaskSwitchContext>
 8007748:	f04f 0000 	mov.w	r0, #0
 800774c:	f380 8811 	msr	BASEPRI, r0
 8007750:	bc09      	pop	{r0, r3}
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	6808      	ldr	r0, [r1, #0]
 8007756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775a:	f01e 0f10 	tst.w	lr, #16
 800775e:	bf08      	it	eq
 8007760:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007764:	f380 8809 	msr	PSP, r0
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <pxCurrentTCBConst>:
 8007770:	20000f1c 	.word	0x20000f1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	b672      	cpsid	i
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	b662      	cpsie	i
 8007792:	607b      	str	r3, [r7, #4]
}
 8007794:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007796:	f7fe fdb1 	bl	80062fc <xTaskIncrementTick>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <SysTick_Handler+0x44>)
 80077a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	2300      	movs	r3, #0
 80077aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	f383 8811 	msr	BASEPRI, r3
}
 80077b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	e000ed04 	.word	0xe000ed04

080077c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80077c0:	b480      	push	{r7}
 80077c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077c4:	4b0b      	ldr	r3, [pc, #44]	@ (80077f4 <vPortSetupTimerInterrupt+0x34>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077ca:	4b0b      	ldr	r3, [pc, #44]	@ (80077f8 <vPortSetupTimerInterrupt+0x38>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077d0:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <vPortSetupTimerInterrupt+0x3c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a0a      	ldr	r2, [pc, #40]	@ (8007800 <vPortSetupTimerInterrupt+0x40>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	099b      	lsrs	r3, r3, #6
 80077dc:	4a09      	ldr	r2, [pc, #36]	@ (8007804 <vPortSetupTimerInterrupt+0x44>)
 80077de:	3b01      	subs	r3, #1
 80077e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077e2:	4b04      	ldr	r3, [pc, #16]	@ (80077f4 <vPortSetupTimerInterrupt+0x34>)
 80077e4:	2207      	movs	r2, #7
 80077e6:	601a      	str	r2, [r3, #0]
}
 80077e8:	bf00      	nop
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	e000e010 	.word	0xe000e010
 80077f8:	e000e018 	.word	0xe000e018
 80077fc:	20000000 	.word	0x20000000
 8007800:	10624dd3 	.word	0x10624dd3
 8007804:	e000e014 	.word	0xe000e014

08007808 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007808:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007818 <vPortEnableVFP+0x10>
 800780c:	6801      	ldr	r1, [r0, #0]
 800780e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007812:	6001      	str	r1, [r0, #0]
 8007814:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007816:	bf00      	nop
 8007818:	e000ed88 	.word	0xe000ed88

0800781c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007822:	f3ef 8305 	mrs	r3, IPSR
 8007826:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b0f      	cmp	r3, #15
 800782c:	d917      	bls.n	800785e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800782e:	4a1a      	ldr	r2, [pc, #104]	@ (8007898 <vPortValidateInterruptPriority+0x7c>)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007838:	4b18      	ldr	r3, [pc, #96]	@ (800789c <vPortValidateInterruptPriority+0x80>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	7afa      	ldrb	r2, [r7, #11]
 800783e:	429a      	cmp	r2, r3
 8007840:	d20d      	bcs.n	800785e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	b672      	cpsid	i
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	b662      	cpsie	i
 8007856:	607b      	str	r3, [r7, #4]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800785e:	4b10      	ldr	r3, [pc, #64]	@ (80078a0 <vPortValidateInterruptPriority+0x84>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007866:	4b0f      	ldr	r3, [pc, #60]	@ (80078a4 <vPortValidateInterruptPriority+0x88>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d90d      	bls.n	800788a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007872:	b672      	cpsid	i
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	b662      	cpsie	i
 8007882:	603b      	str	r3, [r7, #0]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <vPortValidateInterruptPriority+0x6a>
	}
 800788a:	bf00      	nop
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	e000e3f0 	.word	0xe000e3f0
 800789c:	20001548 	.word	0x20001548
 80078a0:	e000ed0c 	.word	0xe000ed0c
 80078a4:	2000154c 	.word	0x2000154c

080078a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	@ 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80078b4:	f7fe fc64 	bl	8006180 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80078b8:	4b5d      	ldr	r3, [pc, #372]	@ (8007a30 <pvPortMalloc+0x188>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80078c0:	f000 f920 	bl	8007b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078c4:	4b5b      	ldr	r3, [pc, #364]	@ (8007a34 <pvPortMalloc+0x18c>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 8094 	bne.w	80079fa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d020      	beq.n	800791a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80078d8:	2208      	movs	r2, #8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d017      	beq.n	800791a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f023 0307 	bic.w	r3, r3, #7
 80078f0:	3308      	adds	r3, #8
 80078f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00d      	beq.n	800791a <pvPortMalloc+0x72>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	b672      	cpsid	i
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	b662      	cpsie	i
 8007912:	617b      	str	r3, [r7, #20]
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop
 8007918:	e7fd      	b.n	8007916 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d06c      	beq.n	80079fa <pvPortMalloc+0x152>
 8007920:	4b45      	ldr	r3, [pc, #276]	@ (8007a38 <pvPortMalloc+0x190>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	429a      	cmp	r2, r3
 8007928:	d867      	bhi.n	80079fa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800792a:	4b44      	ldr	r3, [pc, #272]	@ (8007a3c <pvPortMalloc+0x194>)
 800792c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800792e:	4b43      	ldr	r3, [pc, #268]	@ (8007a3c <pvPortMalloc+0x194>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007934:	e004      	b.n	8007940 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	429a      	cmp	r2, r3
 8007948:	d903      	bls.n	8007952 <pvPortMalloc+0xaa>
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1f1      	bne.n	8007936 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007952:	4b37      	ldr	r3, [pc, #220]	@ (8007a30 <pvPortMalloc+0x188>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007958:	429a      	cmp	r2, r3
 800795a:	d04e      	beq.n	80079fa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2208      	movs	r2, #8
 8007962:	4413      	add	r3, r2
 8007964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	1ad2      	subs	r2, r2, r3
 8007976:	2308      	movs	r3, #8
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	429a      	cmp	r2, r3
 800797c:	d922      	bls.n	80079c4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800797e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4413      	add	r3, r2
 8007984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	f003 0307 	and.w	r3, r3, #7
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00d      	beq.n	80079ac <pvPortMalloc+0x104>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007994:	b672      	cpsid	i
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	b662      	cpsie	i
 80079a4:	613b      	str	r3, [r7, #16]
}
 80079a6:	bf00      	nop
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	1ad2      	subs	r2, r2, r3
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079be:	69b8      	ldr	r0, [r7, #24]
 80079c0:	f000 f902 	bl	8007bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a38 <pvPortMalloc+0x190>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	4a1a      	ldr	r2, [pc, #104]	@ (8007a38 <pvPortMalloc+0x190>)
 80079d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079d2:	4b19      	ldr	r3, [pc, #100]	@ (8007a38 <pvPortMalloc+0x190>)
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007a40 <pvPortMalloc+0x198>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d203      	bcs.n	80079e6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079de:	4b16      	ldr	r3, [pc, #88]	@ (8007a38 <pvPortMalloc+0x190>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a17      	ldr	r2, [pc, #92]	@ (8007a40 <pvPortMalloc+0x198>)
 80079e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	4b12      	ldr	r3, [pc, #72]	@ (8007a34 <pvPortMalloc+0x18c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	431a      	orrs	r2, r3
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079fa:	f7fe fbcf 	bl	800619c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00d      	beq.n	8007a24 <pvPortMalloc+0x17c>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	b672      	cpsid	i
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	b662      	cpsie	i
 8007a1c:	60fb      	str	r3, [r7, #12]
}
 8007a1e:	bf00      	nop
 8007a20:	bf00      	nop
 8007a22:	e7fd      	b.n	8007a20 <pvPortMalloc+0x178>
	return pvReturn;
 8007a24:	69fb      	ldr	r3, [r7, #28]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3728      	adds	r7, #40	@ 0x28
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20005158 	.word	0x20005158
 8007a34:	20005164 	.word	0x20005164
 8007a38:	2000515c 	.word	0x2000515c
 8007a3c:	20005150 	.word	0x20005150
 8007a40:	20005160 	.word	0x20005160

08007a44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d04e      	beq.n	8007af4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a56:	2308      	movs	r3, #8
 8007a58:	425b      	negs	r3, r3
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	4b24      	ldr	r3, [pc, #144]	@ (8007afc <vPortFree+0xb8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10d      	bne.n	8007a8e <vPortFree+0x4a>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	b672      	cpsid	i
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	b662      	cpsie	i
 8007a86:	60fb      	str	r3, [r7, #12]
}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	e7fd      	b.n	8007a8a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00d      	beq.n	8007ab2 <vPortFree+0x6e>
	__asm volatile
 8007a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9a:	b672      	cpsid	i
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	b662      	cpsie	i
 8007aaa:	60bb      	str	r3, [r7, #8]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	4b11      	ldr	r3, [pc, #68]	@ (8007afc <vPortFree+0xb8>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d019      	beq.n	8007af4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d115      	bne.n	8007af4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	4b0b      	ldr	r3, [pc, #44]	@ (8007afc <vPortFree+0xb8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007ad8:	f7fe fb52 	bl	8006180 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <vPortFree+0xbc>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4a06      	ldr	r2, [pc, #24]	@ (8007b00 <vPortFree+0xbc>)
 8007ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007aea:	6938      	ldr	r0, [r7, #16]
 8007aec:	f000 f86c 	bl	8007bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007af0:	f7fe fb54 	bl	800619c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007af4:	bf00      	nop
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20005164 	.word	0x20005164
 8007b00:	2000515c 	.word	0x2000515c

08007b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b0a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b10:	4b27      	ldr	r3, [pc, #156]	@ (8007bb0 <prvHeapInit+0xac>)
 8007b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 0307 	and.w	r3, r3, #7
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00c      	beq.n	8007b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3307      	adds	r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0307 	bic.w	r3, r3, #7
 8007b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb0 <prvHeapInit+0xac>)
 8007b34:	4413      	add	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb4 <prvHeapInit+0xb0>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b42:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb4 <prvHeapInit+0xb0>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b50:	2208      	movs	r2, #8
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1a9b      	subs	r3, r3, r2
 8007b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a15      	ldr	r2, [pc, #84]	@ (8007bb8 <prvHeapInit+0xb4>)
 8007b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b66:	4b14      	ldr	r3, [pc, #80]	@ (8007bb8 <prvHeapInit+0xb4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b6e:	4b12      	ldr	r3, [pc, #72]	@ (8007bb8 <prvHeapInit+0xb4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b84:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb8 <prvHeapInit+0xb4>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	4a0a      	ldr	r2, [pc, #40]	@ (8007bbc <prvHeapInit+0xb8>)
 8007b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	4a09      	ldr	r2, [pc, #36]	@ (8007bc0 <prvHeapInit+0xbc>)
 8007b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b9c:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <prvHeapInit+0xc0>)
 8007b9e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ba2:	601a      	str	r2, [r3, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	20001550 	.word	0x20001550
 8007bb4:	20005150 	.word	0x20005150
 8007bb8:	20005158 	.word	0x20005158
 8007bbc:	20005160 	.word	0x20005160
 8007bc0:	2000515c 	.word	0x2000515c
 8007bc4:	20005164 	.word	0x20005164

08007bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bd0:	4b28      	ldr	r3, [pc, #160]	@ (8007c74 <prvInsertBlockIntoFreeList+0xac>)
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e002      	b.n	8007bdc <prvInsertBlockIntoFreeList+0x14>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d8f7      	bhi.n	8007bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d108      	bne.n	8007c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	441a      	add	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d118      	bne.n	8007c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b15      	ldr	r3, [pc, #84]	@ (8007c78 <prvInsertBlockIntoFreeList+0xb0>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d00d      	beq.n	8007c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	441a      	add	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	e008      	b.n	8007c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c46:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <prvInsertBlockIntoFreeList+0xb0>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e003      	b.n	8007c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d002      	beq.n	8007c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20005150 	.word	0x20005150
 8007c78:	20005158 	.word	0x20005158

08007c7c <memset>:
 8007c7c:	4402      	add	r2, r0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d100      	bne.n	8007c86 <memset+0xa>
 8007c84:	4770      	bx	lr
 8007c86:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8a:	e7f9      	b.n	8007c80 <memset+0x4>

08007c8c <__libc_init_array>:
 8007c8c:	b570      	push	{r4, r5, r6, lr}
 8007c8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007cc4 <__libc_init_array+0x38>)
 8007c90:	4c0d      	ldr	r4, [pc, #52]	@ (8007cc8 <__libc_init_array+0x3c>)
 8007c92:	1b64      	subs	r4, r4, r5
 8007c94:	10a4      	asrs	r4, r4, #2
 8007c96:	2600      	movs	r6, #0
 8007c98:	42a6      	cmp	r6, r4
 8007c9a:	d109      	bne.n	8007cb0 <__libc_init_array+0x24>
 8007c9c:	4d0b      	ldr	r5, [pc, #44]	@ (8007ccc <__libc_init_array+0x40>)
 8007c9e:	4c0c      	ldr	r4, [pc, #48]	@ (8007cd0 <__libc_init_array+0x44>)
 8007ca0:	f000 f826 	bl	8007cf0 <_init>
 8007ca4:	1b64      	subs	r4, r4, r5
 8007ca6:	10a4      	asrs	r4, r4, #2
 8007ca8:	2600      	movs	r6, #0
 8007caa:	42a6      	cmp	r6, r4
 8007cac:	d105      	bne.n	8007cba <__libc_init_array+0x2e>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb4:	4798      	blx	r3
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7ee      	b.n	8007c98 <__libc_init_array+0xc>
 8007cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cbe:	4798      	blx	r3
 8007cc0:	3601      	adds	r6, #1
 8007cc2:	e7f2      	b.n	8007caa <__libc_init_array+0x1e>
 8007cc4:	08007de0 	.word	0x08007de0
 8007cc8:	08007de0 	.word	0x08007de0
 8007ccc:	08007de0 	.word	0x08007de0
 8007cd0:	08007de4 	.word	0x08007de4

08007cd4 <memcpy>:
 8007cd4:	440a      	add	r2, r1
 8007cd6:	4291      	cmp	r1, r2
 8007cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cdc:	d100      	bne.n	8007ce0 <memcpy+0xc>
 8007cde:	4770      	bx	lr
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cea:	4291      	cmp	r1, r2
 8007cec:	d1f9      	bne.n	8007ce2 <memcpy+0xe>
 8007cee:	bd10      	pop	{r4, pc}

08007cf0 <_init>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	bf00      	nop
 8007cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf6:	bc08      	pop	{r3}
 8007cf8:	469e      	mov	lr, r3
 8007cfa:	4770      	bx	lr

08007cfc <_fini>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	bf00      	nop
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr
