
atv05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08007ef8  08007ef8  00008ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008038  08008038  0000a150  2**0
                  CONTENTS
  4 .ARM          00000008  08008038  08008038  00009038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008040  08008040  0000a150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008040  08008040  00009040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008044  08008044  00009044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08008048  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08008058  0000a010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  080080f8  0000a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005024  20000150  08008198  0000a150  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005174  08008198  0000a174  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020dcd  00000000  00000000  0000a17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000040dd  00000000  00000000  0002af4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a30  00000000  00000000  0002f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000146e  00000000  00000000  00030a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004683  00000000  00000000  00031ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ef11  00000000  00000000  00036549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d6bc  00000000  00000000  0005545a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00162b16  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006fb8  00000000  00000000  00162b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  00169b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000150 	.word	0x20000150
 800021c:	00000000 	.word	0x00000000
 8000220:	08007ee0 	.word	0x08007ee0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000154 	.word	0x20000154
 800023c:	08007ee0 	.word	0x08007ee0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b96a 	b.w	800053c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9d08      	ldr	r5, [sp, #32]
 8000286:	460c      	mov	r4, r1
 8000288:	2b00      	cmp	r3, #0
 800028a:	d14e      	bne.n	800032a <__udivmoddi4+0xaa>
 800028c:	4694      	mov	ip, r2
 800028e:	458c      	cmp	ip, r1
 8000290:	4686      	mov	lr, r0
 8000292:	fab2 f282 	clz	r2, r2
 8000296:	d962      	bls.n	800035e <__udivmoddi4+0xde>
 8000298:	b14a      	cbz	r2, 80002ae <__udivmoddi4+0x2e>
 800029a:	f1c2 0320 	rsb	r3, r2, #32
 800029e:	4091      	lsls	r1, r2
 80002a0:	fa20 f303 	lsr.w	r3, r0, r3
 80002a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a8:	4319      	orrs	r1, r3
 80002aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b2:	fa1f f68c 	uxth.w	r6, ip
 80002b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002be:	fb07 1114 	mls	r1, r7, r4, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb04 f106 	mul.w	r1, r4, r6
 80002ca:	4299      	cmp	r1, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x64>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002d6:	f080 8112 	bcs.w	80004fe <__udivmoddi4+0x27e>
 80002da:	4299      	cmp	r1, r3
 80002dc:	f240 810f 	bls.w	80004fe <__udivmoddi4+0x27e>
 80002e0:	3c02      	subs	r4, #2
 80002e2:	4463      	add	r3, ip
 80002e4:	1a59      	subs	r1, r3, r1
 80002e6:	fa1f f38e 	uxth.w	r3, lr
 80002ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ee:	fb07 1110 	mls	r1, r7, r0, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb00 f606 	mul.w	r6, r0, r6
 80002fa:	429e      	cmp	r6, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x94>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f100 31ff 	add.w	r1, r0, #4294967295
 8000306:	f080 80fc 	bcs.w	8000502 <__udivmoddi4+0x282>
 800030a:	429e      	cmp	r6, r3
 800030c:	f240 80f9 	bls.w	8000502 <__udivmoddi4+0x282>
 8000310:	4463      	add	r3, ip
 8000312:	3802      	subs	r0, #2
 8000314:	1b9b      	subs	r3, r3, r6
 8000316:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800031a:	2100      	movs	r1, #0
 800031c:	b11d      	cbz	r5, 8000326 <__udivmoddi4+0xa6>
 800031e:	40d3      	lsrs	r3, r2
 8000320:	2200      	movs	r2, #0
 8000322:	e9c5 3200 	strd	r3, r2, [r5]
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	428b      	cmp	r3, r1
 800032c:	d905      	bls.n	800033a <__udivmoddi4+0xba>
 800032e:	b10d      	cbz	r5, 8000334 <__udivmoddi4+0xb4>
 8000330:	e9c5 0100 	strd	r0, r1, [r5]
 8000334:	2100      	movs	r1, #0
 8000336:	4608      	mov	r0, r1
 8000338:	e7f5      	b.n	8000326 <__udivmoddi4+0xa6>
 800033a:	fab3 f183 	clz	r1, r3
 800033e:	2900      	cmp	r1, #0
 8000340:	d146      	bne.n	80003d0 <__udivmoddi4+0x150>
 8000342:	42a3      	cmp	r3, r4
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xcc>
 8000346:	4290      	cmp	r0, r2
 8000348:	f0c0 80f0 	bcc.w	800052c <__udivmoddi4+0x2ac>
 800034c:	1a86      	subs	r6, r0, r2
 800034e:	eb64 0303 	sbc.w	r3, r4, r3
 8000352:	2001      	movs	r0, #1
 8000354:	2d00      	cmp	r5, #0
 8000356:	d0e6      	beq.n	8000326 <__udivmoddi4+0xa6>
 8000358:	e9c5 6300 	strd	r6, r3, [r5]
 800035c:	e7e3      	b.n	8000326 <__udivmoddi4+0xa6>
 800035e:	2a00      	cmp	r2, #0
 8000360:	f040 8090 	bne.w	8000484 <__udivmoddi4+0x204>
 8000364:	eba1 040c 	sub.w	r4, r1, ip
 8000368:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800036c:	fa1f f78c 	uxth.w	r7, ip
 8000370:	2101      	movs	r1, #1
 8000372:	fbb4 f6f8 	udiv	r6, r4, r8
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb08 4416 	mls	r4, r8, r6, r4
 800037e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000382:	fb07 f006 	mul.w	r0, r7, r6
 8000386:	4298      	cmp	r0, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x11c>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x11a>
 8000394:	4298      	cmp	r0, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2b4>
 800039a:	4626      	mov	r6, r4
 800039c:	1a1c      	subs	r4, r3, r0
 800039e:	fa1f f38e 	uxth.w	r3, lr
 80003a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a6:	fb08 4410 	mls	r4, r8, r0, r4
 80003aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ae:	fb00 f707 	mul.w	r7, r0, r7
 80003b2:	429f      	cmp	r7, r3
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x148>
 80003b6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x146>
 80003c0:	429f      	cmp	r7, r3
 80003c2:	f200 80b0 	bhi.w	8000526 <__udivmoddi4+0x2a6>
 80003c6:	4620      	mov	r0, r4
 80003c8:	1bdb      	subs	r3, r3, r7
 80003ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ce:	e7a5      	b.n	800031c <__udivmoddi4+0x9c>
 80003d0:	f1c1 0620 	rsb	r6, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 f706 	lsr.w	r7, r2, r6
 80003da:	431f      	orrs	r7, r3
 80003dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003e0:	fa04 f301 	lsl.w	r3, r4, r1
 80003e4:	ea43 030c 	orr.w	r3, r3, ip
 80003e8:	40f4      	lsrs	r4, r6
 80003ea:	fa00 f801 	lsl.w	r8, r0, r1
 80003ee:	0c38      	lsrs	r0, r7, #16
 80003f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003f4:	fbb4 fef0 	udiv	lr, r4, r0
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000400:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000404:	fb0e f90c 	mul.w	r9, lr, ip
 8000408:	45a1      	cmp	r9, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90a      	bls.n	8000426 <__udivmoddi4+0x1a6>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000416:	f080 8084 	bcs.w	8000522 <__udivmoddi4+0x2a2>
 800041a:	45a1      	cmp	r9, r4
 800041c:	f240 8081 	bls.w	8000522 <__udivmoddi4+0x2a2>
 8000420:	f1ae 0e02 	sub.w	lr, lr, #2
 8000424:	443c      	add	r4, r7
 8000426:	eba4 0409 	sub.w	r4, r4, r9
 800042a:	fa1f f983 	uxth.w	r9, r3
 800042e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000432:	fb00 4413 	mls	r4, r0, r3, r4
 8000436:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043a:	fb03 fc0c 	mul.w	ip, r3, ip
 800043e:	45a4      	cmp	ip, r4
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1d2>
 8000442:	193c      	adds	r4, r7, r4
 8000444:	f103 30ff 	add.w	r0, r3, #4294967295
 8000448:	d267      	bcs.n	800051a <__udivmoddi4+0x29a>
 800044a:	45a4      	cmp	ip, r4
 800044c:	d965      	bls.n	800051a <__udivmoddi4+0x29a>
 800044e:	3b02      	subs	r3, #2
 8000450:	443c      	add	r4, r7
 8000452:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000456:	fba0 9302 	umull	r9, r3, r0, r2
 800045a:	eba4 040c 	sub.w	r4, r4, ip
 800045e:	429c      	cmp	r4, r3
 8000460:	46ce      	mov	lr, r9
 8000462:	469c      	mov	ip, r3
 8000464:	d351      	bcc.n	800050a <__udivmoddi4+0x28a>
 8000466:	d04e      	beq.n	8000506 <__udivmoddi4+0x286>
 8000468:	b155      	cbz	r5, 8000480 <__udivmoddi4+0x200>
 800046a:	ebb8 030e 	subs.w	r3, r8, lr
 800046e:	eb64 040c 	sbc.w	r4, r4, ip
 8000472:	fa04 f606 	lsl.w	r6, r4, r6
 8000476:	40cb      	lsrs	r3, r1
 8000478:	431e      	orrs	r6, r3
 800047a:	40cc      	lsrs	r4, r1
 800047c:	e9c5 6400 	strd	r6, r4, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	e750      	b.n	8000326 <__udivmoddi4+0xa6>
 8000484:	f1c2 0320 	rsb	r3, r2, #32
 8000488:	fa20 f103 	lsr.w	r1, r0, r3
 800048c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000490:	fa24 f303 	lsr.w	r3, r4, r3
 8000494:	4094      	lsls	r4, r2
 8000496:	430c      	orrs	r4, r1
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa00 fe02 	lsl.w	lr, r0, r2
 80004a0:	fa1f f78c 	uxth.w	r7, ip
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b2:	fb00 f107 	mul.w	r1, r0, r7
 80004b6:	4299      	cmp	r1, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x24c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f100 36ff 	add.w	r6, r0, #4294967295
 80004c2:	d22c      	bcs.n	800051e <__udivmoddi4+0x29e>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d92a      	bls.n	800051e <__udivmoddi4+0x29e>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	b2a4      	uxth	r4, r4
 80004d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d4:	fb08 3311 	mls	r3, r8, r1, r3
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb01 f307 	mul.w	r3, r1, r7
 80004e0:	42a3      	cmp	r3, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x276>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ec:	d213      	bcs.n	8000516 <__udivmoddi4+0x296>
 80004ee:	42a3      	cmp	r3, r4
 80004f0:	d911      	bls.n	8000516 <__udivmoddi4+0x296>
 80004f2:	3902      	subs	r1, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	1ae4      	subs	r4, r4, r3
 80004f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004fc:	e739      	b.n	8000372 <__udivmoddi4+0xf2>
 80004fe:	4604      	mov	r4, r0
 8000500:	e6f0      	b.n	80002e4 <__udivmoddi4+0x64>
 8000502:	4608      	mov	r0, r1
 8000504:	e706      	b.n	8000314 <__udivmoddi4+0x94>
 8000506:	45c8      	cmp	r8, r9
 8000508:	d2ae      	bcs.n	8000468 <__udivmoddi4+0x1e8>
 800050a:	ebb9 0e02 	subs.w	lr, r9, r2
 800050e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000512:	3801      	subs	r0, #1
 8000514:	e7a8      	b.n	8000468 <__udivmoddi4+0x1e8>
 8000516:	4631      	mov	r1, r6
 8000518:	e7ed      	b.n	80004f6 <__udivmoddi4+0x276>
 800051a:	4603      	mov	r3, r0
 800051c:	e799      	b.n	8000452 <__udivmoddi4+0x1d2>
 800051e:	4630      	mov	r0, r6
 8000520:	e7d4      	b.n	80004cc <__udivmoddi4+0x24c>
 8000522:	46d6      	mov	lr, sl
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1a6>
 8000526:	4463      	add	r3, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74d      	b.n	80003c8 <__udivmoddi4+0x148>
 800052c:	4606      	mov	r6, r0
 800052e:	4623      	mov	r3, r4
 8000530:	4608      	mov	r0, r1
 8000532:	e70f      	b.n	8000354 <__udivmoddi4+0xd4>
 8000534:	3e02      	subs	r6, #2
 8000536:	4463      	add	r3, ip
 8000538:	e730      	b.n	800039c <__udivmoddi4+0x11c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fd91 	bl	800106a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f842 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f95e 	bl	800080c <MX_GPIO_Init>
  MX_ETH_Init();
 8000550:	f000 f8b0 	bl	80006b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f8fc 	bl	8000750 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000558:	f000 f92a 	bl	80007b0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f004 f9b8 	bl	80048d0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex01 */
  Mutex01Handle = osMutexNew(&Mutex01_attributes);
 8000560:	4810      	ldr	r0, [pc, #64]	@ (80005a4 <main+0x64>)
 8000562:	f004 fb27 	bl	8004bb4 <osMutexNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0f      	ldr	r2, [pc, #60]	@ (80005a8 <main+0x68>)
 800056a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tarefa01 */
  Tarefa01Handle = osThreadNew(Tarefa_01, NULL, &Tarefa01_attributes);
 800056c:	4a0f      	ldr	r2, [pc, #60]	@ (80005ac <main+0x6c>)
 800056e:	2100      	movs	r1, #0
 8000570:	480f      	ldr	r0, [pc, #60]	@ (80005b0 <main+0x70>)
 8000572:	f004 fa3f 	bl	80049f4 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <main+0x74>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of Tarefa02 */
  Tarefa02Handle = osThreadNew(Tarefa_02, NULL, &Tarefa02_attributes);
 800057c:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <main+0x78>)
 800057e:	2100      	movs	r1, #0
 8000580:	480e      	ldr	r0, [pc, #56]	@ (80005bc <main+0x7c>)
 8000582:	f004 fa37 	bl	80049f4 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <main+0x80>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of Tarefa03 */
  Tarefa03Handle = osThreadNew(Tarefa_03, NULL, &Tarefa03_attributes);
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <main+0x84>)
 800058e:	2100      	movs	r1, #0
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <main+0x88>)
 8000592:	f004 fa2f 	bl	80049f4 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0c      	ldr	r2, [pc, #48]	@ (80005cc <main+0x8c>)
 800059a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f004 f9cc 	bl	8004938 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <main+0x60>
 80005a4:	08008010 	.word	0x08008010
 80005a8:	200007c8 	.word	0x200007c8
 80005ac:	08007fa4 	.word	0x08007fa4
 80005b0:	08000951 	.word	0x08000951
 80005b4:	200007bc 	.word	0x200007bc
 80005b8:	08007fc8 	.word	0x08007fc8
 80005bc:	080009cd 	.word	0x080009cd
 80005c0:	200007c0 	.word	0x200007c0
 80005c4:	08007fec 	.word	0x08007fec
 80005c8:	08000a71 	.word	0x08000a71
 80005cc:	200007c4 	.word	0x200007c4

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	@ 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 fc44 	bl	8007e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f4:	f001 fcba 	bl	8001f6c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a2b      	ldr	r2, [pc, #172]	@ (80006ac <SystemClock_Config+0xdc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b29      	ldr	r3, [pc, #164]	@ (80006ac <SystemClock_Config+0xdc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000610:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <SystemClock_Config+0xe0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000618:	4a25      	ldr	r2, [pc, #148]	@ (80006b0 <SystemClock_Config+0xe0>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <SystemClock_Config+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000630:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000644:	2360      	movs	r3, #96	@ 0x60
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fce7 	bl	800202c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 fa70 	bl	8000b48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000668:	f001 fc90 	bl	8001f8c <HAL_PWREx_EnableOverDrive>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000672:	f000 fa69 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2103      	movs	r1, #3
 8000692:	4618      	mov	r0, r3
 8000694:	f001 ff78 	bl	8002588 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800069e:	f000 fa53 	bl	8000b48 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	@ 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <MX_ETH_Init+0x84>)
 80006ba:	4a20      	ldr	r2, [pc, #128]	@ (800073c <MX_ETH_Init+0x88>)
 80006bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_ETH_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_ETH_Init+0x8c>)
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_ETH_Init+0x8c>)
 80006cc:	22e1      	movs	r2, #225	@ 0xe1
 80006ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_ETH_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_ETH_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_ETH_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_ETH_Init+0x84>)
 80006e4:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <MX_ETH_Init+0x8c>)
 80006e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e8:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <MX_ETH_Init+0x84>)
 80006ea:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f0:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_ETH_Init+0x84>)
 80006f2:	4a14      	ldr	r2, [pc, #80]	@ (8000744 <MX_ETH_Init+0x90>)
 80006f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <MX_ETH_Init+0x84>)
 80006f8:	4a13      	ldr	r2, [pc, #76]	@ (8000748 <MX_ETH_Init+0x94>)
 80006fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_ETH_Init+0x84>)
 80006fe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000702:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_ETH_Init+0x84>)
 8000706:	f000 fde3 	bl	80012d0 <HAL_ETH_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 fa1a 	bl	8000b48 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000714:	2238      	movs	r2, #56	@ 0x38
 8000716:	2100      	movs	r1, #0
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <MX_ETH_Init+0x98>)
 800071a:	f007 fba7 	bl	8007e6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_ETH_Init+0x98>)
 8000720:	2221      	movs	r2, #33	@ 0x21
 8000722:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_ETH_Init+0x98>)
 8000726:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800072a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_ETH_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200001a4 	.word	0x200001a4
 800073c:	40028000 	.word	0x40028000
 8000740:	200007d0 	.word	0x200007d0
 8000744:	200000b0 	.word	0x200000b0
 8000748:	20000010 	.word	0x20000010
 800074c:	2000016c 	.word	0x2000016c

08000750 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <MX_USART3_UART_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_USART3_UART_Init+0x58>)
 8000794:	f003 f846 	bl	8003824 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f9d3 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000254 	.word	0x20000254
 80007ac:	40004800 	.word	0x40004800

080007b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80007ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2206      	movs	r2, #6
 80007c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	f001 fa7f 	bl	8001cf6 <HAL_PCD_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f9a3 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200002dc 	.word	0x200002dc

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	@ 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b47      	ldr	r3, [pc, #284]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a46      	ldr	r2, [pc, #280]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b44      	ldr	r3, [pc, #272]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	4b41      	ldr	r3, [pc, #260]	@ (8000940 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a40      	ldr	r2, [pc, #256]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b3e      	ldr	r3, [pc, #248]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b3b      	ldr	r3, [pc, #236]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a3a      	ldr	r2, [pc, #232]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b38      	ldr	r3, [pc, #224]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	4b35      	ldr	r3, [pc, #212]	@ (8000940 <MX_GPIO_Init+0x134>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a34      	ldr	r2, [pc, #208]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b32      	ldr	r3, [pc, #200]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a2e      	ldr	r2, [pc, #184]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b2c      	ldr	r3, [pc, #176]	@ (8000940 <MX_GPIO_Init+0x134>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <MX_GPIO_Init+0x134>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a28      	ldr	r2, [pc, #160]	@ (8000940 <MX_GPIO_Init+0x134>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <MX_GPIO_Init+0x134>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008b8:	4822      	ldr	r0, [pc, #136]	@ (8000944 <MX_GPIO_Init+0x138>)
 80008ba:	f001 fa03 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	@ 0x40
 80008c2:	4821      	ldr	r0, [pc, #132]	@ (8000948 <MX_GPIO_Init+0x13c>)
 80008c4:	f001 f9fe 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	481b      	ldr	r0, [pc, #108]	@ (800094c <MX_GPIO_Init+0x140>)
 80008e0:	f001 f844 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4811      	ldr	r0, [pc, #68]	@ (8000944 <MX_GPIO_Init+0x138>)
 80008fe:	f001 f835 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	480b      	ldr	r0, [pc, #44]	@ (8000948 <MX_GPIO_Init+0x13c>)
 800091a:	f001 f827 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091e:	2380      	movs	r3, #128	@ 0x80
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_GPIO_Init+0x13c>)
 8000932:	f001 f81b 	bl	800196c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	@ 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800
 8000944:	40020400 	.word	0x40020400
 8000948:	40021800 	.word	0x40021800
 800094c:	40020800 	.word	0x40020800

08000950 <Tarefa_01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Tarefa_01 */
void Tarefa_01(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  donoMutex = osThreadGetId();
 8000958:	f004 f8f2 	bl	8004b40 <osThreadGetId>
 800095c:	4603      	mov	r3, r0
 800095e:	4a16      	ldr	r2, [pc, #88]	@ (80009b8 <Tarefa_01+0x68>)
 8000960:	6013      	str	r3, [r2, #0]
	  if(osMutexAcquire(Mutex01Handle, osWaitForever) == osOK || donoMutex == Tarefa01Handle){
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <Tarefa_01+0x6c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f04f 31ff 	mov.w	r1, #4294967295
 800096a:	4618      	mov	r0, r3
 800096c:	f004 f9bc 	bl	8004ce8 <osMutexAcquire>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d005      	beq.n	8000982 <Tarefa_01+0x32>
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <Tarefa_01+0x68>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <Tarefa_01+0x70>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	429a      	cmp	r2, r3
 8000980:	d1ea      	bne.n	8000958 <Tarefa_01+0x8>
		  donoMutex = osThreadGetId();
 8000982:	f004 f8dd 	bl	8004b40 <osThreadGetId>
 8000986:	4603      	mov	r3, r0
 8000988:	4a0b      	ldr	r2, [pc, #44]	@ (80009b8 <Tarefa_01+0x68>)
 800098a:	6013      	str	r3, [r2, #0]


		  char *str1 = "Tarefa 01 Enviando na UART \n";
 800098c:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <Tarefa_01+0x74>)
 800098e:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart3, (uint8_t *)str1, strlen(str1),100);
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f7ff fc55 	bl	8000240 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	@ 0x64
 800099c:	68f9      	ldr	r1, [r7, #12]
 800099e:	480a      	ldr	r0, [pc, #40]	@ (80009c8 <Tarefa_01+0x78>)
 80009a0:	f002 ff8e 	bl	80038c0 <HAL_UART_Transmit>
		  osMutexRelease(Mutex01Handle);
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <Tarefa_01+0x6c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 f9fb 	bl	8004da4 <osMutexRelease>
		  osDelay(500);
 80009ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009b2:	f004 f8d1 	bl	8004b58 <osDelay>
	  donoMutex = osThreadGetId();
 80009b6:	e7cf      	b.n	8000958 <Tarefa_01+0x8>
 80009b8:	200007cc 	.word	0x200007cc
 80009bc:	200007c8 	.word	0x200007c8
 80009c0:	200007bc 	.word	0x200007bc
 80009c4:	08007f24 	.word	0x08007f24
 80009c8:	20000254 	.word	0x20000254

080009cc <Tarefa_02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa_02 */
void Tarefa_02(void *argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  static int numeroEnvios = 0;
  for(;;)
  {
	  donoMutex = osThreadGetId();
 80009d4:	f004 f8b4 	bl	8004b40 <osThreadGetId>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a1f      	ldr	r2, [pc, #124]	@ (8000a58 <Tarefa_02+0x8c>)
 80009dc:	6013      	str	r3, [r2, #0]
	  if(osMutexAcquire(Mutex01Handle, osWaitForever) == osOK || donoMutex == Tarefa02Handle){
 80009de:	4b1f      	ldr	r3, [pc, #124]	@ (8000a5c <Tarefa_02+0x90>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f04f 31ff 	mov.w	r1, #4294967295
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 f97e 	bl	8004ce8 <osMutexAcquire>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d005      	beq.n	80009fe <Tarefa_02+0x32>
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <Tarefa_02+0x8c>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <Tarefa_02+0x94>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d1ea      	bne.n	80009d4 <Tarefa_02+0x8>
		  donoMutex = osThreadGetId();
 80009fe:	f004 f89f 	bl	8004b40 <osThreadGetId>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <Tarefa_02+0x8c>)
 8000a06:	6013      	str	r3, [r2, #0]
		  char *str2 = "Tarefa 02 Enviando na UART \n";
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <Tarefa_02+0x98>)
 8000a0a:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart3, (uint8_t *)str2, strlen(str2),100);
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fc17 	bl	8000240 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	2364      	movs	r3, #100	@ 0x64
 8000a18:	68f9      	ldr	r1, [r7, #12]
 8000a1a:	4813      	ldr	r0, [pc, #76]	@ (8000a68 <Tarefa_02+0x9c>)
 8000a1c:	f002 ff50 	bl	80038c0 <HAL_UART_Transmit>
		  numeroEnvios ++;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <Tarefa_02+0xa0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a11      	ldr	r2, [pc, #68]	@ (8000a6c <Tarefa_02+0xa0>)
 8000a28:	6013      	str	r3, [r2, #0]
		  osMutexRelease(Mutex01Handle);
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <Tarefa_02+0x90>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 f9b8 	bl	8004da4 <osMutexRelease>
		  if (numeroEnvios >= 3){
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <Tarefa_02+0xa0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	dd07      	ble.n	8000a4c <Tarefa_02+0x80>
			  osMutexRelease(Mutex01Handle);
 8000a3c:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <Tarefa_02+0x90>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 f9af 	bl	8004da4 <osMutexRelease>
			  numeroEnvios = 0;
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <Tarefa_02+0xa0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
		  }
		  osDelay(1000);
 8000a4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a50:	f004 f882 	bl	8004b58 <osDelay>
	  donoMutex = osThreadGetId();
 8000a54:	e7be      	b.n	80009d4 <Tarefa_02+0x8>
 8000a56:	bf00      	nop
 8000a58:	200007cc 	.word	0x200007cc
 8000a5c:	200007c8 	.word	0x200007c8
 8000a60:	200007c0 	.word	0x200007c0
 8000a64:	08007f44 	.word	0x08007f44
 8000a68:	20000254 	.word	0x20000254
 8000a6c:	200007d8 	.word	0x200007d8

08000a70 <Tarefa_03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa_03 */
void Tarefa_03(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tarefa_03 */
  /* Infinite loop */

  uint32_t count = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  for(;;)
  {
	  donoMutex = osThreadGetId();
 8000a7c:	f004 f860 	bl	8004b40 <osThreadGetId>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a22      	ldr	r2, [pc, #136]	@ (8000b0c <Tarefa_03+0x9c>)
 8000a84:	6013      	str	r3, [r2, #0]
	  if(osMutexAcquire(Mutex01Handle, osWaitForever) == osOK || donoMutex == Tarefa03Handle){
 8000a86:	4b22      	ldr	r3, [pc, #136]	@ (8000b10 <Tarefa_03+0xa0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 f92a 	bl	8004ce8 <osMutexAcquire>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d005      	beq.n	8000aa6 <Tarefa_03+0x36>
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <Tarefa_03+0x9c>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b14 <Tarefa_03+0xa4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d114      	bne.n	8000ad0 <Tarefa_03+0x60>
		  char *str3 = "Tarefa 03 Enviando na UART \n";
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <Tarefa_03+0xa8>)
 8000aa8:	613b      	str	r3, [r7, #16]
		  HAL_UART_Transmit(&huart3, (uint8_t *)str3, strlen(str3),100);
 8000aaa:	6938      	ldr	r0, [r7, #16]
 8000aac:	f7ff fbc8 	bl	8000240 <strlen>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	2364      	movs	r3, #100	@ 0x64
 8000ab6:	6939      	ldr	r1, [r7, #16]
 8000ab8:	4818      	ldr	r0, [pc, #96]	@ (8000b1c <Tarefa_03+0xac>)
 8000aba:	f002 ff01 	bl	80038c0 <HAL_UART_Transmit>
		  osMutexRelease(Mutex01Handle);
 8000abe:	4b14      	ldr	r3, [pc, #80]	@ (8000b10 <Tarefa_03+0xa0>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 f96e 	bl	8004da4 <osMutexRelease>
		  osDelay(1000);
 8000ac8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000acc:	f004 f844 	bl	8004b58 <osDelay>
	  }
	  if(count = osKernelGetTickCount() && count == 2000){
 8000ad0:	f003 ff68 	bl	80049a4 <osKernelGetTickCount>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d005      	beq.n	8000ae6 <Tarefa_03+0x76>
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000ae0:	d101      	bne.n	8000ae6 <Tarefa_03+0x76>
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e000      	b.n	8000ae8 <Tarefa_03+0x78>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0c5      	beq.n	8000a7c <Tarefa_03+0xc>
		  char *str3 = "Alerta";
 8000af0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <Tarefa_03+0xb0>)
 8000af2:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart3, (uint8_t *)str3, strlen(str3),100);
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f7ff fba3 	bl	8000240 <strlen>
 8000afa:	4603      	mov	r3, r0
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	2364      	movs	r3, #100	@ 0x64
 8000b00:	68f9      	ldr	r1, [r7, #12]
 8000b02:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <Tarefa_03+0xac>)
 8000b04:	f002 fedc 	bl	80038c0 <HAL_UART_Transmit>
	  donoMutex = osThreadGetId();
 8000b08:	e7b8      	b.n	8000a7c <Tarefa_03+0xc>
 8000b0a:	bf00      	nop
 8000b0c:	200007cc 	.word	0x200007cc
 8000b10:	200007c8 	.word	0x200007c8
 8000b14:	200007c4 	.word	0x200007c4
 8000b18:	08007f64 	.word	0x08007f64
 8000b1c:	20000254 	.word	0x20000254
 8000b20:	08007f84 	.word	0x08007f84

08000b24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d101      	bne.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b36:	f000 faa5 	bl	8001084 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010000 	.word	0x40010000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	f06f 0001 	mvn.w	r0, #1
 8000b92:	f000 fb73 	bl	800127c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08e      	sub	sp, #56	@ 0x38
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8000cfc <HAL_ETH_MspInit+0x158>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	f040 8096 	bne.w	8000cf4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000bce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	4b47      	ldr	r3, [pc, #284]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	4a46      	ldr	r2, [pc, #280]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000be6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000bea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bec:	4b44      	ldr	r3, [pc, #272]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	4b41      	ldr	r3, [pc, #260]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	4a40      	ldr	r2, [pc, #256]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c04:	4b3e      	ldr	r3, [pc, #248]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c10:	4b3b      	ldr	r3, [pc, #236]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	4a3a      	ldr	r2, [pc, #232]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1c:	4b38      	ldr	r3, [pc, #224]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b35      	ldr	r3, [pc, #212]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	4a34      	ldr	r2, [pc, #208]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	f043 0301 	orr.w	r3, r3, #1
 8000c32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c34:	4b32      	ldr	r3, [pc, #200]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c40:	4b2f      	ldr	r3, [pc, #188]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	4a2e      	ldr	r2, [pc, #184]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c58:	4b29      	ldr	r3, [pc, #164]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	4a28      	ldr	r2, [pc, #160]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c64:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <HAL_ETH_MspInit+0x15c>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c70:	2332      	movs	r3, #50	@ 0x32
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c80:	230b      	movs	r3, #11
 8000c82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c88:	4619      	mov	r1, r3
 8000c8a:	481e      	ldr	r0, [pc, #120]	@ (8000d04 <HAL_ETH_MspInit+0x160>)
 8000c8c:	f000 fe6e 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c90:	2386      	movs	r3, #134	@ 0x86
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4817      	ldr	r0, [pc, #92]	@ (8000d08 <HAL_ETH_MspInit+0x164>)
 8000cac:	f000 fe5e 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc2:	230b      	movs	r3, #11
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480f      	ldr	r0, [pc, #60]	@ (8000d0c <HAL_ETH_MspInit+0x168>)
 8000cce:	f000 fe4d 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cd2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce4:	230b      	movs	r3, #11
 8000ce6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cec:	4619      	mov	r1, r3
 8000cee:	4808      	ldr	r0, [pc, #32]	@ (8000d10 <HAL_ETH_MspInit+0x16c>)
 8000cf0:	f000 fe3c 	bl	800196c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3738      	adds	r7, #56	@ 0x38
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40028000 	.word	0x40028000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40021800 	.word	0x40021800

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0ae      	sub	sp, #184	@ 0xb8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2290      	movs	r2, #144	@ 0x90
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f007 f899 	bl	8007e6c <memset>
  if(huart->Instance==USART3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <HAL_UART_MspInit+0xb4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d13c      	bne.n	8000dbe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 fe70 	bl	8002a38 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d5e:	f7ff fef3 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a19      	ldr	r2, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a13      	ldr	r2, [pc, #76]	@ (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dac:	2307      	movs	r3, #7
 8000dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <HAL_UART_MspInit+0xbc>)
 8000dba:	f000 fdd7 	bl	800196c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dbe:	bf00      	nop
 8000dc0:	37b8      	adds	r7, #184	@ 0xb8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0ae      	sub	sp, #184	@ 0xb8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2290      	movs	r2, #144	@ 0x90
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f007 f839 	bl	8007e6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e02:	d159      	bne.n	8000eb8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fe0f 	bl	8002a38 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e20:	f7ff fe92 	bl	8000b48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e28:	4a25      	ldr	r2, [pc, #148]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e30:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e3c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e56:	230a      	movs	r3, #10
 8000e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4818      	ldr	r0, [pc, #96]	@ (8000ec4 <HAL_PCD_MspInit+0xf0>)
 8000e64:	f000 fd82 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4810      	ldr	r0, [pc, #64]	@ (8000ec4 <HAL_PCD_MspInit+0xf0>)
 8000e84:	f000 fd72 	bl	800196c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e92:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea4:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eaa:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000eb8:	bf00      	nop
 8000eba:	37b8      	adds	r7, #184	@ 0xb8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f94 <HAL_InitTick+0xcc>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f94 <HAL_InitTick+0xcc>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <HAL_InitTick+0xcc>)
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ef0:	f107 020c 	add.w	r2, r7, #12
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fd6a 	bl	80029d4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f00:	f001 fd54 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8000f04:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f08:	4a23      	ldr	r2, [pc, #140]	@ (8000f98 <HAL_InitTick+0xd0>)
 8000f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0e:	0c9b      	lsrs	r3, r3, #18
 8000f10:	3b01      	subs	r3, #1
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f14:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f16:	4a22      	ldr	r2, [pc, #136]	@ (8000fa0 <HAL_InitTick+0xd8>)
 8000f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f22:	4a1e      	ldr	r2, [pc, #120]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f28:	4b1c      	ldr	r3, [pc, #112]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f3a:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f3c:	f002 f9a4 	bl	8003288 <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d11b      	bne.n	8000f86 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f4e:	4813      	ldr	r0, [pc, #76]	@ (8000f9c <HAL_InitTick+0xd4>)
 8000f50:	f002 f9fc 	bl	800334c <HAL_TIM_Base_Start_IT>
 8000f54:	4603      	mov	r3, r0
 8000f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d111      	bne.n	8000f86 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f62:	2019      	movs	r0, #25
 8000f64:	f000 f9a6 	bl	80012b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	d808      	bhi.n	8000f80 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	2019      	movs	r0, #25
 8000f74:	f000 f982 	bl	800127c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f78:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <HAL_InitTick+0xdc>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e002      	b.n	8000f86 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3730      	adds	r7, #48	@ 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	431bde83 	.word	0x431bde83
 8000f9c:	200007dc 	.word	0x200007dc
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fe6:	f002 fa29 	bl	800343c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200007dc 	.word	0x200007dc

08000ff4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101c:	f7ff ffea 	bl	8000ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001046:	f006 ff19 	bl	8007e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fa79 	bl	8000540 <main>
  bx  lr    
 800104e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800105c:	08008048 	.word	0x08008048
  ldr r2, =_sbss
 8001060:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001064:	20005174 	.word	0x20005174

08001068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC_IRQHandler>

0800106a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106e:	2003      	movs	r0, #3
 8001070:	f000 f8f9 	bl	8001266 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001074:	200f      	movs	r0, #15
 8001076:	f7ff ff27 	bl	8000ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107a:	f7ff fd6b 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000828 	.word	0x20000828

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	20000828 	.word	0x20000828

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000008 	.word	0x20000008

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	4313      	orrs	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	@ (800114c <__NVIC_SetPriorityGrouping+0x40>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00
 8001150:	05fa0000 	.word	0x05fa0000

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	@ (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	@ (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	@ (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	@ 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	@ 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff4c 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128e:	f7ff ff61 	bl	8001154 <__NVIC_GetPriorityGrouping>
 8001292:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	6978      	ldr	r0, [r7, #20]
 800129a:	f7ff ffb1 	bl	8001200 <NVIC_EncodePriority>
 800129e:	4602      	mov	r2, r0
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff80 	bl	80011ac <__NVIC_SetPriority>
}
 80012ac:	bf00      	nop
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff54 	bl	8001170 <__NVIC_EnableIRQ>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e086      	b.n	80013f0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d106      	bne.n	80012fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fc55 	bl	8000ba4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b3f      	ldr	r3, [pc, #252]	@ (80013f8 <HAL_ETH_Init+0x128>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a3e      	ldr	r2, [pc, #248]	@ (80013f8 <HAL_ETH_Init+0x128>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <HAL_ETH_Init+0x128>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001312:	4b3a      	ldr	r3, [pc, #232]	@ (80013fc <HAL_ETH_Init+0x12c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a39      	ldr	r2, [pc, #228]	@ (80013fc <HAL_ETH_Init+0x12c>)
 8001318:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800131c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800131e:	4b37      	ldr	r3, [pc, #220]	@ (80013fc <HAL_ETH_Init+0x12c>)
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	4935      	ldr	r1, [pc, #212]	@ (80013fc <HAL_ETH_Init+0x12c>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800132c:	4b33      	ldr	r3, [pc, #204]	@ (80013fc <HAL_ETH_Init+0x12c>)
 800132e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001346:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001348:	f7ff feb0 	bl	80010ac <HAL_GetTick>
 800134c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800134e:	e011      	b.n	8001374 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001350:	f7ff feac 	bl	80010ac <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800135e:	d909      	bls.n	8001374 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2204      	movs	r2, #4
 8001364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	22e0      	movs	r2, #224	@ 0xe0
 800136c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e03d      	b.n	80013f0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e4      	bne.n	8001350 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 f97a 	bl	8001680 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fa25 	bl	80017dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fa7b 	bl	800188e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	461a      	mov	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f9e3 	bl	800176c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80013b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <HAL_ETH_Init+0x130>)
 80013c4:	430b      	orrs	r3, r1
 80013c6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80013da:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2210      	movs	r2, #16
 80013ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40013800 	.word	0x40013800
 8001400:	00020060 	.word	0x00020060

08001404 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <ETH_SetMACConfig+0x164>)
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	7b9b      	ldrb	r3, [r3, #14]
 8001422:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	7c12      	ldrb	r2, [r2, #16]
 8001428:	2a00      	cmp	r2, #0
 800142a:	d102      	bne.n	8001432 <ETH_SetMACConfig+0x2e>
 800142c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001430:	e000      	b.n	8001434 <ETH_SetMACConfig+0x30>
 8001432:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001434:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	7c52      	ldrb	r2, [r2, #17]
 800143a:	2a00      	cmp	r2, #0
 800143c:	d102      	bne.n	8001444 <ETH_SetMACConfig+0x40>
 800143e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001442:	e000      	b.n	8001446 <ETH_SetMACConfig+0x42>
 8001444:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001446:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800144c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	7fdb      	ldrb	r3, [r3, #31]
 8001452:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001454:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800145a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	7f92      	ldrb	r2, [r2, #30]
 8001460:	2a00      	cmp	r2, #0
 8001462:	d102      	bne.n	800146a <ETH_SetMACConfig+0x66>
 8001464:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001468:	e000      	b.n	800146c <ETH_SetMACConfig+0x68>
 800146a:	2200      	movs	r2, #0
                        macconf->Speed |
 800146c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	7f1b      	ldrb	r3, [r3, #28]
 8001472:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001474:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800147a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	791b      	ldrb	r3, [r3, #4]
 8001480:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001482:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	f892 2020 	ldrb.w	r2, [r2, #32]
 800148a:	2a00      	cmp	r2, #0
 800148c:	d102      	bne.n	8001494 <ETH_SetMACConfig+0x90>
 800148e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001492:	e000      	b.n	8001496 <ETH_SetMACConfig+0x92>
 8001494:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001496:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	7bdb      	ldrb	r3, [r3, #15]
 800149c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800149e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80014ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014ae:	4313      	orrs	r3, r2
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fdfc 	bl	80010c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80014e2:	4013      	ands	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80014f2:	2a00      	cmp	r2, #0
 80014f4:	d101      	bne.n	80014fa <ETH_SetMACConfig+0xf6>
 80014f6:	2280      	movs	r2, #128	@ 0x80
 80014f8:	e000      	b.n	80014fc <ETH_SetMACConfig+0xf8>
 80014fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001502:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800150a:	2a01      	cmp	r2, #1
 800150c:	d101      	bne.n	8001512 <ETH_SetMACConfig+0x10e>
 800150e:	2208      	movs	r2, #8
 8001510:	e000      	b.n	8001514 <ETH_SetMACConfig+0x110>
 8001512:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001514:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800151c:	2a01      	cmp	r2, #1
 800151e:	d101      	bne.n	8001524 <ETH_SetMACConfig+0x120>
 8001520:	2204      	movs	r2, #4
 8001522:	e000      	b.n	8001526 <ETH_SetMACConfig+0x122>
 8001524:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001526:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800152e:	2a01      	cmp	r2, #1
 8001530:	d101      	bne.n	8001536 <ETH_SetMACConfig+0x132>
 8001532:	2202      	movs	r2, #2
 8001534:	e000      	b.n	8001538 <ETH_SetMACConfig+0x134>
 8001536:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001538:	4313      	orrs	r3, r2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001550:	2001      	movs	r0, #1
 8001552:	f7ff fdb7 	bl	80010c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	fd20810f 	.word	0xfd20810f

0800156c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <ETH_SetDMAConfig+0x110>)
 8001586:	4013      	ands	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	7b1b      	ldrb	r3, [r3, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <ETH_SetDMAConfig+0x2c>
 8001592:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001596:	e000      	b.n	800159a <ETH_SetDMAConfig+0x2e>
 8001598:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	7b5b      	ldrb	r3, [r3, #13]
 800159e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	7f52      	ldrb	r2, [r2, #29]
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	d102      	bne.n	80015b0 <ETH_SetDMAConfig+0x44>
 80015aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80015ae:	e000      	b.n	80015b2 <ETH_SetDMAConfig+0x46>
 80015b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	7b9b      	ldrb	r3, [r3, #14]
 80015b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80015c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	7f1b      	ldrb	r3, [r3, #28]
 80015c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80015c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	7f9b      	ldrb	r3, [r3, #30]
 80015ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80015d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015e0:	4313      	orrs	r3, r2
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f0:	461a      	mov	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001602:	2001      	movs	r0, #1
 8001604:	f7ff fd5e 	bl	80010c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001610:	461a      	mov	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	791b      	ldrb	r3, [r3, #4]
 800161a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001620:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001626:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800162c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001634:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001636:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800163e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001644:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800164e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001652:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff fd2f 	bl	80010c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	f8de3f23 	.word	0xf8de3f23

08001680 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b0a6      	sub	sp, #152	@ 0x98
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001688:	2301      	movs	r3, #1
 800168a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800168e:	2301      	movs	r3, #1
 8001690:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001694:	2300      	movs	r3, #0
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016c2:	2300      	movs	r3, #0
 80016c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016fe:	4619      	mov	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fe7f 	bl	8001404 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001706:	2301      	movs	r3, #1
 8001708:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001714:	2301      	movs	r3, #1
 8001716:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800172c:	2301      	movs	r3, #1
 800172e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001732:	2301      	movs	r3, #1
 8001734:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800173a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800173c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001740:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001742:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001746:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001748:	2301      	movs	r3, #1
 800174a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4619      	mov	r1, r3
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff05 	bl	800156c <ETH_SetDMAConfig>
}
 8001762:	bf00      	nop
 8001764:	3798      	adds	r7, #152	@ 0x98
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3305      	adds	r3, #5
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	3204      	adds	r2, #4
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	4313      	orrs	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <ETH_MACAddressConfig+0x68>)
 800178e:	4413      	add	r3, r2
 8001790:	461a      	mov	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3303      	adds	r3, #3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	061a      	lsls	r2, r3, #24
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3302      	adds	r3, #2
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4313      	orrs	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <ETH_MACAddressConfig+0x6c>)
 80017be:	4413      	add	r3, r2
 80017c0:	461a      	mov	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	6013      	str	r3, [r2, #0]
}
 80017c6:	bf00      	nop
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40028040 	.word	0x40028040
 80017d8:	40028044 	.word	0x40028044

080017dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e03e      	b.n	8001868 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68d9      	ldr	r1, [r3, #12]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	3206      	adds	r2, #6
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d80c      	bhi.n	800184c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68d9      	ldr	r1, [r3, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	461a      	mov	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	e004      	b.n	8001856 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	461a      	mov	r2, r3
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b03      	cmp	r3, #3
 800186c:	d9bd      	bls.n	80017ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001880:	611a      	str	r2, [r3, #16]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800188e:	b480      	push	{r7}
 8001890:	b085      	sub	sp, #20
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e048      	b.n	800192e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6919      	ldr	r1, [r3, #16]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80018d8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	3212      	adds	r2, #18
 80018fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d80c      	bhi.n	800191e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6919      	ldr	r1, [r3, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	461a      	mov	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	e004      	b.n	8001928 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	461a      	mov	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d9b3      	bls.n	800189c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800195e:	60da      	str	r2, [r3, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e175      	b.n	8001c78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8164 	bne.w	8001c72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d005      	beq.n	80019c2 <HAL_GPIO_Init+0x56>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d130      	bne.n	8001a24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 0201 	and.w	r2, r3, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d017      	beq.n	8001a60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d123      	bne.n	8001ab4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80be 	beq.w	8001c72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b66      	ldr	r3, [pc, #408]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a65      	ldr	r2, [pc, #404]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b63      	ldr	r3, [pc, #396]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b0e:	4a61      	ldr	r2, [pc, #388]	@ (8001c94 <HAL_GPIO_Init+0x328>)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a58      	ldr	r2, [pc, #352]	@ (8001c98 <HAL_GPIO_Init+0x32c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d037      	beq.n	8001baa <HAL_GPIO_Init+0x23e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a57      	ldr	r2, [pc, #348]	@ (8001c9c <HAL_GPIO_Init+0x330>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d031      	beq.n	8001ba6 <HAL_GPIO_Init+0x23a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a56      	ldr	r2, [pc, #344]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d02b      	beq.n	8001ba2 <HAL_GPIO_Init+0x236>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a55      	ldr	r2, [pc, #340]	@ (8001ca4 <HAL_GPIO_Init+0x338>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d025      	beq.n	8001b9e <HAL_GPIO_Init+0x232>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a54      	ldr	r2, [pc, #336]	@ (8001ca8 <HAL_GPIO_Init+0x33c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d01f      	beq.n	8001b9a <HAL_GPIO_Init+0x22e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a53      	ldr	r2, [pc, #332]	@ (8001cac <HAL_GPIO_Init+0x340>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d019      	beq.n	8001b96 <HAL_GPIO_Init+0x22a>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a52      	ldr	r2, [pc, #328]	@ (8001cb0 <HAL_GPIO_Init+0x344>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_GPIO_Init+0x226>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a51      	ldr	r2, [pc, #324]	@ (8001cb4 <HAL_GPIO_Init+0x348>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00d      	beq.n	8001b8e <HAL_GPIO_Init+0x222>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a50      	ldr	r2, [pc, #320]	@ (8001cb8 <HAL_GPIO_Init+0x34c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d007      	beq.n	8001b8a <HAL_GPIO_Init+0x21e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	@ (8001cbc <HAL_GPIO_Init+0x350>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_GPIO_Init+0x21a>
 8001b82:	2309      	movs	r3, #9
 8001b84:	e012      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b86:	230a      	movs	r3, #10
 8001b88:	e010      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	e00e      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e00c      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b92:	2306      	movs	r3, #6
 8001b94:	e00a      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b96:	2305      	movs	r3, #5
 8001b98:	e008      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x240>
 8001baa:	2300      	movs	r3, #0
 8001bac:	69fa      	ldr	r2, [r7, #28]
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bbc:	4935      	ldr	r1, [pc, #212]	@ (8001c94 <HAL_GPIO_Init+0x328>)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bca:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bee:	4a34      	ldr	r2, [pc, #208]	@ (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <HAL_GPIO_Init+0x354>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4013      	ands	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c18:	4a29      	ldr	r2, [pc, #164]	@ (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1e:	4b28      	ldr	r3, [pc, #160]	@ (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c42:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <HAL_GPIO_Init+0x354>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	f67f ae86 	bls.w	800198c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3724      	adds	r7, #36	@ 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40013800 	.word	0x40013800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	40020800 	.word	0x40020800
 8001ca4:	40020c00 	.word	0x40020c00
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40021400 	.word	0x40021400
 8001cb0:	40021800 	.word	0x40021800
 8001cb4:	40021c00 	.word	0x40021c00
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40022400 	.word	0x40022400
 8001cc0:	40013c00 	.word	0x40013c00

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ce0:	e003      	b.n	8001cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ce2:	887b      	ldrh	r3, [r7, #2]
 8001ce4:	041a      	lsls	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	619a      	str	r2, [r3, #24]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e108      	b.n	8001f1a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff f856 	bl	8000dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d36:	d102      	bne.n	8001d3e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fb20 	bl	8004388 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7c1a      	ldrb	r2, [r3, #16]
 8001d50:	f88d 2000 	strb.w	r2, [sp]
 8001d54:	3304      	adds	r3, #4
 8001d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d58:	f002 fabc 	bl	80042d4 <USB_CoreInit>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0d5      	b.n	8001f1a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 fb18 	bl	80043aa <USB_SetCurrentMode>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0c6      	b.n	8001f1a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e04a      	b.n	8001e28 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	3315      	adds	r3, #21
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	3314      	adds	r3, #20
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	b298      	uxth	r0, r3
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	332e      	adds	r3, #46	@ 0x2e
 8001dce:	4602      	mov	r2, r0
 8001dd0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	3318      	adds	r3, #24
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	331c      	adds	r3, #28
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3320      	adds	r3, #32
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3324      	adds	r3, #36	@ 0x24
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	3301      	adds	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d3af      	bcc.n	8001d92 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e044      	b.n	8001ec2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	791b      	ldrb	r3, [r3, #4]
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3b5      	bcc.n	8001e38 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7c1a      	ldrb	r2, [r3, #16]
 8001ed4:	f88d 2000 	strb.w	r2, [sp]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001edc:	f002 fab2 	bl	8004444 <USB_DevInit>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e013      	b.n	8001f1a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7b1b      	ldrb	r3, [r3, #12]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f80b 	bl	8001f24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fc6d 	bl	80047f2 <USB_DevDisconnect>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	10000003 	.word	0x10000003

08001f6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a04      	ldr	r2, [pc, #16]	@ (8001f88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40007000 	.word	0x40007000

08001f8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a22      	ldr	r2, [pc, #136]	@ (8002024 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fae:	4b1e      	ldr	r3, [pc, #120]	@ (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fba:	f7ff f877 	bl	80010ac <HAL_GetTick>
 8001fbe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fc0:	e009      	b.n	8001fd6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fc2:	f7ff f873 	bl	80010ac <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fd0:	d901      	bls.n	8001fd6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e022      	b.n	800201c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fe4:	4b10      	ldr	r3, [pc, #64]	@ (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff0:	f7ff f85c 	bl	80010ac <HAL_GetTick>
 8001ff4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ff6:	e009      	b.n	800200c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ff8:	f7ff f858 	bl	80010ac <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002006:	d901      	bls.n	800200c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e007      	b.n	800201c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002018:	d1ee      	bne.n	8001ff8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e29b      	b.n	800257a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002050:	4b96      	ldr	r3, [pc, #600]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b04      	cmp	r3, #4
 800205a:	d00c      	beq.n	8002076 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205c:	4b93      	ldr	r3, [pc, #588]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d112      	bne.n	800208e <HAL_RCC_OscConfig+0x62>
 8002068:	4b90      	ldr	r3, [pc, #576]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002070:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002074:	d10b      	bne.n	800208e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	4b8d      	ldr	r3, [pc, #564]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d06c      	beq.n	800215c <HAL_RCC_OscConfig+0x130>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d168      	bne.n	800215c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e275      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x7a>
 8002098:	4b84      	ldr	r3, [pc, #528]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a83      	ldr	r2, [pc, #524]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 800209e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e02e      	b.n	8002104 <HAL_RCC_OscConfig+0xd8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x9c>
 80020ae:	4b7f      	ldr	r3, [pc, #508]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a7e      	ldr	r2, [pc, #504]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b7c      	ldr	r3, [pc, #496]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a7b      	ldr	r2, [pc, #492]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xd8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0xc0>
 80020d2:	4b76      	ldr	r3, [pc, #472]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a75      	ldr	r2, [pc, #468]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b73      	ldr	r3, [pc, #460]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a72      	ldr	r2, [pc, #456]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xd8>
 80020ec:	4b6f      	ldr	r3, [pc, #444]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a6e      	ldr	r2, [pc, #440]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b6c      	ldr	r3, [pc, #432]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a6b      	ldr	r2, [pc, #428]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe ffce 	bl	80010ac <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe ffca 	bl	80010ac <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	@ 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e229      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b61      	ldr	r3, [pc, #388]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xe8>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe ffba 	bl	80010ac <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7fe ffb6 	bl	80010ac <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	@ 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e215      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	4b57      	ldr	r3, [pc, #348]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x110>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d069      	beq.n	800223e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216a:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002176:	4b4d      	ldr	r3, [pc, #308]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x190>
 8002182:	4b4a      	ldr	r3, [pc, #296]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b47      	ldr	r3, [pc, #284]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1e9      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4b41      	ldr	r3, [pc, #260]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	493d      	ldr	r1, [pc, #244]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e040      	b.n	800223e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a38      	ldr	r2, [pc, #224]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe ff6c 	bl	80010ac <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7fe ff68 	bl	80010ac <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1c7      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ea:	4b30      	ldr	r3, [pc, #192]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	4b2d      	ldr	r3, [pc, #180]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4929      	ldr	r1, [pc, #164]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
 800220a:	e018      	b.n	800223e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a26      	ldr	r2, [pc, #152]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe ff48 	bl	80010ac <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7fe ff44 	bl	80010ac <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1a3      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d038      	beq.n	80022bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d019      	beq.n	8002286 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002256:	4a15      	ldr	r2, [pc, #84]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe ff25 	bl	80010ac <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002266:	f7fe ff21 	bl	80010ac <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e180      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002278:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 800227a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x23a>
 8002284:	e01a      	b.n	80022bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 8002288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228a:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <HAL_RCC_OscConfig+0x280>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe ff0b 	bl	80010ac <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229a:	f7fe ff07 	bl	80010ac <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d903      	bls.n	80022b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e166      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
 80022ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	4b92      	ldr	r3, [pc, #584]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80022b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ee      	bne.n	800229a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a4 	beq.w	8002412 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ca:	4b8c      	ldr	r3, [pc, #560]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	4b89      	ldr	r3, [pc, #548]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a88      	ldr	r2, [pc, #544]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e2:	4b86      	ldr	r3, [pc, #536]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f2:	4b83      	ldr	r3, [pc, #524]	@ (8002500 <HAL_RCC_OscConfig+0x4d4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d118      	bne.n	8002330 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022fe:	4b80      	ldr	r3, [pc, #512]	@ (8002500 <HAL_RCC_OscConfig+0x4d4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7f      	ldr	r2, [pc, #508]	@ (8002500 <HAL_RCC_OscConfig+0x4d4>)
 8002304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe fecf 	bl	80010ac <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7fe fecb 	bl	80010ac <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	@ 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e12a      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002324:	4b76      	ldr	r3, [pc, #472]	@ (8002500 <HAL_RCC_OscConfig+0x4d4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x31a>
 8002338:	4b70      	ldr	r3, [pc, #448]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	4a6f      	ldr	r2, [pc, #444]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	@ 0x70
 8002344:	e02d      	b.n	80023a2 <HAL_RCC_OscConfig+0x376>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x33c>
 800234e:	4b6b      	ldr	r3, [pc, #428]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002352:	4a6a      	ldr	r2, [pc, #424]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	@ 0x70
 800235a:	4b68      	ldr	r3, [pc, #416]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	4a67      	ldr	r2, [pc, #412]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6713      	str	r3, [r2, #112]	@ 0x70
 8002366:	e01c      	b.n	80023a2 <HAL_RCC_OscConfig+0x376>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d10c      	bne.n	800238a <HAL_RCC_OscConfig+0x35e>
 8002370:	4b62      	ldr	r3, [pc, #392]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002374:	4a61      	ldr	r2, [pc, #388]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6713      	str	r3, [r2, #112]	@ 0x70
 800237c:	4b5f      	ldr	r3, [pc, #380]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002380:	4a5e      	ldr	r2, [pc, #376]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6713      	str	r3, [r2, #112]	@ 0x70
 8002388:	e00b      	b.n	80023a2 <HAL_RCC_OscConfig+0x376>
 800238a:	4b5c      	ldr	r3, [pc, #368]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238e:	4a5b      	ldr	r2, [pc, #364]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6713      	str	r3, [r2, #112]	@ 0x70
 8002396:	4b59      	ldr	r3, [pc, #356]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239a:	4a58      	ldr	r2, [pc, #352]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d015      	beq.n	80023d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe7f 	bl	80010ac <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fe7b 	bl	80010ac <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0d8      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	4b4c      	ldr	r3, [pc, #304]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ee      	beq.n	80023b2 <HAL_RCC_OscConfig+0x386>
 80023d4:	e014      	b.n	8002400 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe fe69 	bl	80010ac <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7fe fe65 	bl	80010ac <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0c2      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	4b41      	ldr	r3, [pc, #260]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ee      	bne.n	80023de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d105      	bne.n	8002412 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002406:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	4a3c      	ldr	r2, [pc, #240]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800240c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80ae 	beq.w	8002578 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241c:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d06d      	beq.n	8002504 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d14b      	bne.n	80024c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002430:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a31      	ldr	r2, [pc, #196]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002436:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fe36 	bl	80010ac <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fe32 	bl	80010ac <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e091      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b29      	ldr	r3, [pc, #164]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	071b      	lsls	r3, r3, #28
 800248e:	491b      	ldr	r1, [pc, #108]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002494:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a18      	ldr	r2, [pc, #96]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 800249a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800249e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fe04 	bl	80010ac <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fe00 	bl	80010ac <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e05f      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x47c>
 80024c6:	e057      	b.n	8002578 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0b      	ldr	r2, [pc, #44]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80024ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fdea 	bl	80010ac <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fde6 	bl	80010ac <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e045      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ee:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <HAL_RCC_OscConfig+0x4d0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x4b0>
 80024fa:	e03d      	b.n	8002578 <HAL_RCC_OscConfig+0x54c>
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002504:	4b1f      	ldr	r3, [pc, #124]	@ (8002584 <HAL_RCC_OscConfig+0x558>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d030      	beq.n	8002574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d129      	bne.n	8002574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d122      	bne.n	8002574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002534:	4013      	ands	r3, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800253a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800253c:	4293      	cmp	r3, r2
 800253e:	d119      	bne.n	8002574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	3b01      	subs	r3, #1
 800254e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002550:	429a      	cmp	r2, r3
 8002552:	d10f      	bne.n	8002574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d107      	bne.n	8002574 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0d0      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a0:	4b6a      	ldr	r3, [pc, #424]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d910      	bls.n	80025d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b67      	ldr	r3, [pc, #412]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 020f 	bic.w	r2, r3, #15
 80025b6:	4965      	ldr	r1, [pc, #404]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025be:	4b63      	ldr	r3, [pc, #396]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0b8      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d020      	beq.n	800261e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e8:	4b59      	ldr	r3, [pc, #356]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	4a58      	ldr	r2, [pc, #352]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 80025ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002600:	4b53      	ldr	r3, [pc, #332]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4a52      	ldr	r2, [pc, #328]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800260a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b50      	ldr	r3, [pc, #320]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	494d      	ldr	r1, [pc, #308]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 800261a:	4313      	orrs	r3, r2
 800261c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d040      	beq.n	80026ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b47      	ldr	r3, [pc, #284]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d115      	bne.n	800266a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e07f      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b41      	ldr	r3, [pc, #260]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e073      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	4b3d      	ldr	r3, [pc, #244]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06b      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800266a:	4b39      	ldr	r3, [pc, #228]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4936      	ldr	r1, [pc, #216]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800267c:	f7fe fd16 	bl	80010ac <HAL_GetTick>
 8002680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002682:	e00a      	b.n	800269a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002684:	f7fe fd12 	bl	80010ac <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e053      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	4b2d      	ldr	r3, [pc, #180]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 020c 	and.w	r2, r3, #12
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d1eb      	bne.n	8002684 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ac:	4b27      	ldr	r3, [pc, #156]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d210      	bcs.n	80026dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ba:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 020f 	bic.w	r2, r3, #15
 80026c2:	4922      	ldr	r1, [pc, #136]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	4b20      	ldr	r3, [pc, #128]	@ (800274c <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d001      	beq.n	80026dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e032      	b.n	8002742 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026e8:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4916      	ldr	r1, [pc, #88]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002706:	4b12      	ldr	r3, [pc, #72]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	490e      	ldr	r1, [pc, #56]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800271a:	f000 f821 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 800271e:	4602      	mov	r2, r0
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <HAL_RCC_ClockConfig+0x1c8>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	490a      	ldr	r1, [pc, #40]	@ (8002754 <HAL_RCC_ClockConfig+0x1cc>)
 800272c:	5ccb      	ldrb	r3, [r1, r3]
 800272e:	fa22 f303 	lsr.w	r3, r2, r3
 8002732:	4a09      	ldr	r2, [pc, #36]	@ (8002758 <HAL_RCC_ClockConfig+0x1d0>)
 8002734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_RCC_ClockConfig+0x1d4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fbc4 	bl	8000ec8 <HAL_InitTick>

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023c00 	.word	0x40023c00
 8002750:	40023800 	.word	0x40023800
 8002754:	08008020 	.word	0x08008020
 8002758:	20000000 	.word	0x20000000
 800275c:	20000004 	.word	0x20000004

08002760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002764:	b094      	sub	sp, #80	@ 0x50
 8002766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	647b      	str	r3, [r7, #68]	@ 0x44
 800276c:	2300      	movs	r3, #0
 800276e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002770:	2300      	movs	r3, #0
 8002772:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002778:	4b79      	ldr	r3, [pc, #484]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x200>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d00d      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002784:	2b08      	cmp	r3, #8
 8002786:	f200 80e1 	bhi.w	800294c <HAL_RCC_GetSysClockFreq+0x1ec>
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x34>
 800278e:	2b04      	cmp	r3, #4
 8002790:	d003      	beq.n	800279a <HAL_RCC_GetSysClockFreq+0x3a>
 8002792:	e0db      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b73      	ldr	r3, [pc, #460]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x204>)
 8002796:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002798:	e0db      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800279a:	4b73      	ldr	r3, [pc, #460]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x208>)
 800279c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800279e:	e0d8      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d063      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x200>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	099b      	lsrs	r3, r3, #6
 80027bc:	2200      	movs	r2, #0
 80027be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80027ca:	2300      	movs	r3, #0
 80027cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80027ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027d2:	4622      	mov	r2, r4
 80027d4:	462b      	mov	r3, r5
 80027d6:	f04f 0000 	mov.w	r0, #0
 80027da:	f04f 0100 	mov.w	r1, #0
 80027de:	0159      	lsls	r1, r3, #5
 80027e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027e4:	0150      	lsls	r0, r2, #5
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4621      	mov	r1, r4
 80027ec:	1a51      	subs	r1, r2, r1
 80027ee:	6139      	str	r1, [r7, #16]
 80027f0:	4629      	mov	r1, r5
 80027f2:	eb63 0301 	sbc.w	r3, r3, r1
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002804:	4659      	mov	r1, fp
 8002806:	018b      	lsls	r3, r1, #6
 8002808:	4651      	mov	r1, sl
 800280a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800280e:	4651      	mov	r1, sl
 8002810:	018a      	lsls	r2, r1, #6
 8002812:	4651      	mov	r1, sl
 8002814:	ebb2 0801 	subs.w	r8, r2, r1
 8002818:	4659      	mov	r1, fp
 800281a:	eb63 0901 	sbc.w	r9, r3, r1
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800282a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800282e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002832:	4690      	mov	r8, r2
 8002834:	4699      	mov	r9, r3
 8002836:	4623      	mov	r3, r4
 8002838:	eb18 0303 	adds.w	r3, r8, r3
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	462b      	mov	r3, r5
 8002840:	eb49 0303 	adc.w	r3, r9, r3
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002852:	4629      	mov	r1, r5
 8002854:	024b      	lsls	r3, r1, #9
 8002856:	4621      	mov	r1, r4
 8002858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800285c:	4621      	mov	r1, r4
 800285e:	024a      	lsls	r2, r1, #9
 8002860:	4610      	mov	r0, r2
 8002862:	4619      	mov	r1, r3
 8002864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002866:	2200      	movs	r2, #0
 8002868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800286a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800286c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002870:	f7fd fcee 	bl	8000250 <__aeabi_uldivmod>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4613      	mov	r3, r2
 800287a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800287c:	e058      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287e:	4b38      	ldr	r3, [pc, #224]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x200>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	099b      	lsrs	r3, r3, #6
 8002884:	2200      	movs	r2, #0
 8002886:	4618      	mov	r0, r3
 8002888:	4611      	mov	r1, r2
 800288a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	@ 0x24
 8002894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002898:	4642      	mov	r2, r8
 800289a:	464b      	mov	r3, r9
 800289c:	f04f 0000 	mov.w	r0, #0
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	0159      	lsls	r1, r3, #5
 80028a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028aa:	0150      	lsls	r0, r2, #5
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4641      	mov	r1, r8
 80028b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80028b6:	4649      	mov	r1, r9
 80028b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028d0:	ebb2 040a 	subs.w	r4, r2, sl
 80028d4:	eb63 050b 	sbc.w	r5, r3, fp
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	00eb      	lsls	r3, r5, #3
 80028e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e6:	00e2      	lsls	r2, r4, #3
 80028e8:	4614      	mov	r4, r2
 80028ea:	461d      	mov	r5, r3
 80028ec:	4643      	mov	r3, r8
 80028ee:	18e3      	adds	r3, r4, r3
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	464b      	mov	r3, r9
 80028f4:	eb45 0303 	adc.w	r3, r5, r3
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002906:	4629      	mov	r1, r5
 8002908:	028b      	lsls	r3, r1, #10
 800290a:	4621      	mov	r1, r4
 800290c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002910:	4621      	mov	r1, r4
 8002912:	028a      	lsls	r2, r1, #10
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800291a:	2200      	movs	r2, #0
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	61fa      	str	r2, [r7, #28]
 8002920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002924:	f7fd fc94 	bl	8000250 <__aeabi_uldivmod>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4613      	mov	r3, r2
 800292e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x200>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0c1b      	lsrs	r3, r3, #16
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800294a:	e002      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x204>)
 800294e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002954:	4618      	mov	r0, r3
 8002956:	3750      	adds	r7, #80	@ 0x50
 8002958:	46bd      	mov	sp, r7
 800295a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	00f42400 	.word	0x00f42400
 8002968:	007a1200 	.word	0x007a1200

0800296c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_RCC_GetHCLKFreq+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20000000 	.word	0x20000000

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002988:	f7ff fff0 	bl	800296c <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	0a9b      	lsrs	r3, r3, #10
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4903      	ldr	r1, [pc, #12]	@ (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	08008030 	.word	0x08008030

080029ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b0:	f7ff ffdc 	bl	800296c <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0b5b      	lsrs	r3, r3, #13
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4903      	ldr	r1, [pc, #12]	@ (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40023800 	.word	0x40023800
 80029d0:	08008030 	.word	0x08008030

080029d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	220f      	movs	r2, #15
 80029e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002a08:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <HAL_RCC_GetClockConfig+0x60>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40023c00 	.word	0x40023c00

08002a38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d012      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a60:	4b69      	ldr	r3, [pc, #420]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a68      	ldr	r2, [pc, #416]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a66:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a6a:	6093      	str	r3, [r2, #8]
 8002a6c:	4b66      	ldr	r3, [pc, #408]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a74:	4964      	ldr	r1, [pc, #400]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a82:	2301      	movs	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d017      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a92:	4b5d      	ldr	r3, [pc, #372]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a98:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa0:	4959      	ldr	r1, [pc, #356]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ab0:	d101      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d017      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ace:	4b4e      	ldr	r3, [pc, #312]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ad4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	494a      	ldr	r1, [pc, #296]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aec:	d101      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002afa:	2301      	movs	r3, #1
 8002afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 808b 	beq.w	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	4a39      	ldr	r2, [pc, #228]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b28:	4b37      	ldr	r3, [pc, #220]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b34:	4b35      	ldr	r3, [pc, #212]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a34      	ldr	r2, [pc, #208]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b40:	f7fe fab4 	bl	80010ac <HAL_GetTick>
 8002b44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fe fab0 	bl	80010ac <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e38f      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b66:	4b28      	ldr	r3, [pc, #160]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d035      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d02e      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b84:	4b20      	ldr	r3, [pc, #128]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b92:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b98:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ba6:	4a18      	ldr	r2, [pc, #96]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bac:	4b16      	ldr	r3, [pc, #88]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d114      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fa78 	bl	80010ac <HAL_GetTick>
 8002bbc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fa74 	bl	80010ac <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e351      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ee      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bee:	d111      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002bf0:	4b05      	ldr	r3, [pc, #20]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bfc:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bfe:	400b      	ands	r3, r1
 8002c00:	4901      	ldr	r1, [pc, #4]	@ (8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
 8002c06:	e00b      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	0ffffcff 	.word	0x0ffffcff
 8002c14:	4bac      	ldr	r3, [pc, #688]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4aab      	ldr	r2, [pc, #684]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c1e:	6093      	str	r3, [r2, #8]
 8002c20:	4ba9      	ldr	r3, [pc, #676]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2c:	49a6      	ldr	r1, [pc, #664]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d010      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c3e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c44:	4aa0      	ldr	r2, [pc, #640]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c4e:	4b9e      	ldr	r3, [pc, #632]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c50:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	499b      	ldr	r1, [pc, #620]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6c:	4b96      	ldr	r3, [pc, #600]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c7a:	4993      	ldr	r1, [pc, #588]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c8e:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c9c:	498a      	ldr	r1, [pc, #552]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb0:	4b85      	ldr	r3, [pc, #532]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cbe:	4982      	ldr	r1, [pc, #520]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cd2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4979      	ldr	r1, [pc, #484]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf4:	4b74      	ldr	r3, [pc, #464]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	f023 0203 	bic.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	4971      	ldr	r1, [pc, #452]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d16:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1c:	f023 020c 	bic.w	r2, r3, #12
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d24:	4968      	ldr	r1, [pc, #416]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d38:	4b63      	ldr	r3, [pc, #396]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	4960      	ldr	r1, [pc, #384]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d68:	4957      	ldr	r1, [pc, #348]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d7c:	4b52      	ldr	r3, [pc, #328]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8a:	494f      	ldr	r1, [pc, #316]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	4946      	ldr	r1, [pc, #280]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002dc0:	4b41      	ldr	r3, [pc, #260]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dce:	493e      	ldr	r1, [pc, #248]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002de2:	4b39      	ldr	r3, [pc, #228]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df0:	4935      	ldr	r1, [pc, #212]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e04:	4b30      	ldr	r3, [pc, #192]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e12:	492d      	ldr	r1, [pc, #180]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d011      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e26:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e34:	4924      	ldr	r1, [pc, #144]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e44:	d101      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e46:	2301      	movs	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e56:	2301      	movs	r3, #1
 8002e58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e66:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e74:	4914      	ldr	r1, [pc, #80]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00b      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e98:	490b      	ldr	r1, [pc, #44]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00f      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ebc:	4902      	ldr	r1, [pc, #8]	@ (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ec4:	e002      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ede:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee8:	4986      	ldr	r1, [pc, #536]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00b      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002efc:	4b81      	ldr	r3, [pc, #516]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f02:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f0c:	497d      	ldr	r1, [pc, #500]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d006      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80d6 	beq.w	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f28:	4b76      	ldr	r3, [pc, #472]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a75      	ldr	r2, [pc, #468]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f34:	f7fe f8ba 	bl	80010ac <HAL_GetTick>
 8002f38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f3c:	f7fe f8b6 	bl	80010ac <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e195      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d021      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11d      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f6e:	4b65      	ldr	r3, [pc, #404]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f7c:	4b61      	ldr	r3, [pc, #388]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f82:	0e1b      	lsrs	r3, r3, #24
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	019a      	lsls	r2, r3, #6
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	041b      	lsls	r3, r3, #16
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	061b      	lsls	r3, r3, #24
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	4958      	ldr	r1, [pc, #352]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02e      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fd4:	d129      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fe4:	4b47      	ldr	r3, [pc, #284]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fea:	0f1b      	lsrs	r3, r3, #28
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	019a      	lsls	r2, r3, #6
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	041b      	lsls	r3, r3, #16
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	071b      	lsls	r3, r3, #28
 800300a:	493e      	ldr	r1, [pc, #248]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003012:	4b3c      	ldr	r3, [pc, #240]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003018:	f023 021f 	bic.w	r2, r3, #31
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	3b01      	subs	r3, #1
 8003022:	4938      	ldr	r1, [pc, #224]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01d      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003036:	4b33      	ldr	r3, [pc, #204]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800303c:	0e1b      	lsrs	r3, r3, #24
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003044:	4b2f      	ldr	r3, [pc, #188]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800304a:	0f1b      	lsrs	r3, r3, #28
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	019a      	lsls	r2, r3, #6
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	4926      	ldr	r1, [pc, #152]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d011      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	019a      	lsls	r2, r3, #6
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	041b      	lsls	r3, r3, #16
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	071b      	lsls	r3, r3, #28
 800309a:	491a      	ldr	r1, [pc, #104]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030a2:	4b18      	ldr	r3, [pc, #96]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a17      	ldr	r2, [pc, #92]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ae:	f7fd fffd 	bl	80010ac <HAL_GetTick>
 80030b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030b6:	f7fd fff9 	bl	80010ac <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b64      	cmp	r3, #100	@ 0x64
 80030c2:	d901      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e0d8      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	f040 80ce 	bne.w	8003278 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a08      	ldr	r2, [pc, #32]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fd ffe0 	bl	80010ac <HAL_GetTick>
 80030ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030ee:	e00b      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80030f0:	f7fd ffdc 	bl	80010ac <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d904      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0bb      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003108:	4b5e      	ldr	r3, [pc, #376]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003114:	d0ec      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02e      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d12a      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800313e:	4b51      	ldr	r3, [pc, #324]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800314c:	4b4d      	ldr	r3, [pc, #308]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003152:	0f1b      	lsrs	r3, r3, #28
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	019a      	lsls	r2, r3, #6
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	061b      	lsls	r3, r3, #24
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	071b      	lsls	r3, r3, #28
 8003172:	4944      	ldr	r1, [pc, #272]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800317a:	4b42      	ldr	r3, [pc, #264]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800317c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003180:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	3b01      	subs	r3, #1
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	493d      	ldr	r1, [pc, #244]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d022      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031a8:	d11d      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031aa:	4b36      	ldr	r3, [pc, #216]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	0e1b      	lsrs	r3, r3, #24
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031b8:	4b32      	ldr	r3, [pc, #200]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031be:	0f1b      	lsrs	r3, r3, #28
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	019a      	lsls	r2, r3, #6
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	431a      	orrs	r2, r3
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	061b      	lsls	r3, r3, #24
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	071b      	lsls	r3, r3, #28
 80031de:	4929      	ldr	r1, [pc, #164]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d028      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031f2:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f8:	0e1b      	lsrs	r3, r3, #24
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003200:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003206:	0c1b      	lsrs	r3, r3, #16
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	019a      	lsls	r2, r3, #6
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	431a      	orrs	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	071b      	lsls	r3, r3, #28
 8003226:	4917      	ldr	r1, [pc, #92]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003234:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	4911      	ldr	r1, [pc, #68]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0e      	ldr	r2, [pc, #56]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fd ff2c 	bl	80010ac <HAL_GetTick>
 8003254:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003258:	f7fd ff28 	bl	80010ac <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	@ 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e007      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003276:	d1ef      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	40023800 	.word	0x40023800

08003288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e049      	b.n	800332e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f841 	bl	8003336 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3304      	adds	r3, #4
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f000 f9e8 	bl	800369c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d001      	beq.n	8003364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e054      	b.n	800340e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a26      	ldr	r2, [pc, #152]	@ (800341c <HAL_TIM_Base_Start_IT+0xd0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d022      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338e:	d01d      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a22      	ldr	r2, [pc, #136]	@ (8003420 <HAL_TIM_Base_Start_IT+0xd4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d018      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <HAL_TIM_Base_Start_IT+0xd8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003428 <HAL_TIM_Base_Start_IT+0xdc>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00e      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1e      	ldr	r2, [pc, #120]	@ (800342c <HAL_TIM_Base_Start_IT+0xe0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d009      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003430 <HAL_TIM_Base_Start_IT+0xe4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x80>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003434 <HAL_TIM_Base_Start_IT+0xe8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d115      	bne.n	80033f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	4b19      	ldr	r3, [pc, #100]	@ (8003438 <HAL_TIM_Base_Start_IT+0xec>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d015      	beq.n	800340a <HAL_TIM_Base_Start_IT+0xbe>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e4:	d011      	beq.n	800340a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	e008      	b.n	800340a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e000      	b.n	800340c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40010000 	.word	0x40010000
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40010400 	.word	0x40010400
 8003430:	40014000 	.word	0x40014000
 8003434:	40001800 	.word	0x40001800
 8003438:	00010007 	.word	0x00010007

0800343c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d020      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0202 	mvn.w	r2, #2
 8003470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8e9 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f8db 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8ec 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d020      	beq.n	80034ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01b      	beq.n	80034ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0204 	mvn.w	r2, #4
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f8c3 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 80034d8:	e005      	b.n	80034e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8b5 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8c6 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d020      	beq.n	8003538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01b      	beq.n	8003538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0208 	mvn.w	r2, #8
 8003508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2204      	movs	r2, #4
 800350e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f89d 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 8003524:	e005      	b.n	8003532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f88f 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8a0 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d020      	beq.n	8003584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01b      	beq.n	8003584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0210 	mvn.w	r2, #16
 8003554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2208      	movs	r2, #8
 800355a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f877 	bl	800365e <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f869 	bl	800364a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f87a 	bl	8003672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0201 	mvn.w	r2, #1
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fabe 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80035ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f913 	bl	80037fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00c      	beq.n	80035fa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f90b 	bl	8003810 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f834 	bl	8003686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00c      	beq.n	8003642 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f06f 0220 	mvn.w	r2, #32
 800363a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f8d3 	bl	80037e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a43      	ldr	r2, [pc, #268]	@ (80037bc <TIM_Base_SetConfig+0x120>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ba:	d00f      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a40      	ldr	r2, [pc, #256]	@ (80037c0 <TIM_Base_SetConfig+0x124>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00b      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a3f      	ldr	r2, [pc, #252]	@ (80037c4 <TIM_Base_SetConfig+0x128>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a3e      	ldr	r2, [pc, #248]	@ (80037c8 <TIM_Base_SetConfig+0x12c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0x40>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a3d      	ldr	r2, [pc, #244]	@ (80037cc <TIM_Base_SetConfig+0x130>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d108      	bne.n	80036ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a32      	ldr	r2, [pc, #200]	@ (80037bc <TIM_Base_SetConfig+0x120>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d02b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fc:	d027      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2f      	ldr	r2, [pc, #188]	@ (80037c0 <TIM_Base_SetConfig+0x124>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d023      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2e      	ldr	r2, [pc, #184]	@ (80037c4 <TIM_Base_SetConfig+0x128>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01f      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2d      	ldr	r2, [pc, #180]	@ (80037c8 <TIM_Base_SetConfig+0x12c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a2c      	ldr	r2, [pc, #176]	@ (80037cc <TIM_Base_SetConfig+0x130>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d017      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a2b      	ldr	r2, [pc, #172]	@ (80037d0 <TIM_Base_SetConfig+0x134>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a2a      	ldr	r2, [pc, #168]	@ (80037d4 <TIM_Base_SetConfig+0x138>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d00f      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a29      	ldr	r2, [pc, #164]	@ (80037d8 <TIM_Base_SetConfig+0x13c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00b      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a28      	ldr	r2, [pc, #160]	@ (80037dc <TIM_Base_SetConfig+0x140>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a27      	ldr	r2, [pc, #156]	@ (80037e0 <TIM_Base_SetConfig+0x144>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a26      	ldr	r2, [pc, #152]	@ (80037e4 <TIM_Base_SetConfig+0x148>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d108      	bne.n	8003760 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a0e      	ldr	r2, [pc, #56]	@ (80037bc <TIM_Base_SetConfig+0x120>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d003      	beq.n	800378e <TIM_Base_SetConfig+0xf2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a10      	ldr	r2, [pc, #64]	@ (80037cc <TIM_Base_SetConfig+0x130>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d103      	bne.n	8003796 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f043 0204 	orr.w	r2, r3, #4
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40010400 	.word	0x40010400
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40014400 	.word	0x40014400
 80037d8:	40014800 	.word	0x40014800
 80037dc:	40001800 	.word	0x40001800
 80037e0:	40001c00 	.word	0x40001c00
 80037e4:	40002000 	.word	0x40002000

080037e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e040      	b.n	80038b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d106      	bne.n	800384c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fd fa64 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2224      	movs	r2, #36	@ 0x24
 8003850:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fb16 	bl	8003e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f8af 	bl	80039d4 <UART_SetConfig>
 8003876:	4603      	mov	r3, r0
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e01b      	b.n	80038b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800388e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800389e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fb95 	bl	8003fe0 <UART_CheckIdleState>
 80038b6:	4603      	mov	r3, r0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	@ 0x28
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	4613      	mov	r3, r2
 80038ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d177      	bne.n	80039c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_Transmit+0x24>
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e070      	b.n	80039ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2221      	movs	r2, #33	@ 0x21
 80038f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038f6:	f7fd fbd9 	bl	80010ac <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	88fa      	ldrh	r2, [r7, #6]
 8003900:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003914:	d108      	bne.n	8003928 <HAL_UART_Transmit+0x68>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e003      	b.n	8003930 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003930:	e02f      	b.n	8003992 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	@ 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fbf7 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d004      	beq.n	8003952 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e03b      	b.n	80039ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003966:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	3302      	adds	r3, #2
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	e007      	b.n	8003980 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3301      	adds	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1c9      	bne.n	8003932 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2140      	movs	r1, #64	@ 0x40
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 fbc1 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e005      	b.n	80039ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4ba6      	ldr	r3, [pc, #664]	@ (8003c98 <UART_SetConfig+0x2c4>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6812      	ldr	r2, [r2, #0]
 8003a06:	6979      	ldr	r1, [r7, #20]
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68da      	ldr	r2, [r3, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a94      	ldr	r2, [pc, #592]	@ (8003c9c <UART_SetConfig+0x2c8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d120      	bne.n	8003a92 <UART_SetConfig+0xbe>
 8003a50:	4b93      	ldr	r3, [pc, #588]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d816      	bhi.n	8003a8c <UART_SetConfig+0xb8>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <UART_SetConfig+0x90>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a81 	.word	0x08003a81
 8003a6c:	08003a7b 	.word	0x08003a7b
 8003a70:	08003a87 	.word	0x08003a87
 8003a74:	2301      	movs	r3, #1
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e150      	b.n	8003d1c <UART_SetConfig+0x348>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	77fb      	strb	r3, [r7, #31]
 8003a7e:	e14d      	b.n	8003d1c <UART_SetConfig+0x348>
 8003a80:	2304      	movs	r3, #4
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e14a      	b.n	8003d1c <UART_SetConfig+0x348>
 8003a86:	2308      	movs	r3, #8
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e147      	b.n	8003d1c <UART_SetConfig+0x348>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e144      	b.n	8003d1c <UART_SetConfig+0x348>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a83      	ldr	r2, [pc, #524]	@ (8003ca4 <UART_SetConfig+0x2d0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d132      	bne.n	8003b02 <UART_SetConfig+0x12e>
 8003a9c:	4b80      	ldr	r3, [pc, #512]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d828      	bhi.n	8003afc <UART_SetConfig+0x128>
 8003aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <UART_SetConfig+0xdc>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ae5 	.word	0x08003ae5
 8003ab4:	08003afd 	.word	0x08003afd
 8003ab8:	08003afd 	.word	0x08003afd
 8003abc:	08003afd 	.word	0x08003afd
 8003ac0:	08003af1 	.word	0x08003af1
 8003ac4:	08003afd 	.word	0x08003afd
 8003ac8:	08003afd 	.word	0x08003afd
 8003acc:	08003afd 	.word	0x08003afd
 8003ad0:	08003aeb 	.word	0x08003aeb
 8003ad4:	08003afd 	.word	0x08003afd
 8003ad8:	08003afd 	.word	0x08003afd
 8003adc:	08003afd 	.word	0x08003afd
 8003ae0:	08003af7 	.word	0x08003af7
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e118      	b.n	8003d1c <UART_SetConfig+0x348>
 8003aea:	2302      	movs	r3, #2
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e115      	b.n	8003d1c <UART_SetConfig+0x348>
 8003af0:	2304      	movs	r3, #4
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e112      	b.n	8003d1c <UART_SetConfig+0x348>
 8003af6:	2308      	movs	r3, #8
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e10f      	b.n	8003d1c <UART_SetConfig+0x348>
 8003afc:	2310      	movs	r3, #16
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e10c      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a68      	ldr	r2, [pc, #416]	@ (8003ca8 <UART_SetConfig+0x2d4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d120      	bne.n	8003b4e <UART_SetConfig+0x17a>
 8003b0c:	4b64      	ldr	r3, [pc, #400]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003b16:	2b30      	cmp	r3, #48	@ 0x30
 8003b18:	d013      	beq.n	8003b42 <UART_SetConfig+0x16e>
 8003b1a:	2b30      	cmp	r3, #48	@ 0x30
 8003b1c:	d814      	bhi.n	8003b48 <UART_SetConfig+0x174>
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d009      	beq.n	8003b36 <UART_SetConfig+0x162>
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d810      	bhi.n	8003b48 <UART_SetConfig+0x174>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <UART_SetConfig+0x15c>
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d006      	beq.n	8003b3c <UART_SetConfig+0x168>
 8003b2e:	e00b      	b.n	8003b48 <UART_SetConfig+0x174>
 8003b30:	2300      	movs	r3, #0
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e0f2      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b36:	2302      	movs	r3, #2
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e0ef      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e0ec      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b42:	2308      	movs	r3, #8
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e0e9      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e0e6      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a56      	ldr	r2, [pc, #344]	@ (8003cac <UART_SetConfig+0x2d8>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d120      	bne.n	8003b9a <UART_SetConfig+0x1c6>
 8003b58:	4b51      	ldr	r3, [pc, #324]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b64:	d013      	beq.n	8003b8e <UART_SetConfig+0x1ba>
 8003b66:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b68:	d814      	bhi.n	8003b94 <UART_SetConfig+0x1c0>
 8003b6a:	2b80      	cmp	r3, #128	@ 0x80
 8003b6c:	d009      	beq.n	8003b82 <UART_SetConfig+0x1ae>
 8003b6e:	2b80      	cmp	r3, #128	@ 0x80
 8003b70:	d810      	bhi.n	8003b94 <UART_SetConfig+0x1c0>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <UART_SetConfig+0x1a8>
 8003b76:	2b40      	cmp	r3, #64	@ 0x40
 8003b78:	d006      	beq.n	8003b88 <UART_SetConfig+0x1b4>
 8003b7a:	e00b      	b.n	8003b94 <UART_SetConfig+0x1c0>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e0cc      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b82:	2302      	movs	r3, #2
 8003b84:	77fb      	strb	r3, [r7, #31]
 8003b86:	e0c9      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e0c6      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b8e:	2308      	movs	r3, #8
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e0c3      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b94:	2310      	movs	r3, #16
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e0c0      	b.n	8003d1c <UART_SetConfig+0x348>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a44      	ldr	r2, [pc, #272]	@ (8003cb0 <UART_SetConfig+0x2dc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d125      	bne.n	8003bf0 <UART_SetConfig+0x21c>
 8003ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003baa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb2:	d017      	beq.n	8003be4 <UART_SetConfig+0x210>
 8003bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb8:	d817      	bhi.n	8003bea <UART_SetConfig+0x216>
 8003bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bbe:	d00b      	beq.n	8003bd8 <UART_SetConfig+0x204>
 8003bc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc4:	d811      	bhi.n	8003bea <UART_SetConfig+0x216>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <UART_SetConfig+0x1fe>
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bce:	d006      	beq.n	8003bde <UART_SetConfig+0x20a>
 8003bd0:	e00b      	b.n	8003bea <UART_SetConfig+0x216>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	77fb      	strb	r3, [r7, #31]
 8003bd6:	e0a1      	b.n	8003d1c <UART_SetConfig+0x348>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e09e      	b.n	8003d1c <UART_SetConfig+0x348>
 8003bde:	2304      	movs	r3, #4
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e09b      	b.n	8003d1c <UART_SetConfig+0x348>
 8003be4:	2308      	movs	r3, #8
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e098      	b.n	8003d1c <UART_SetConfig+0x348>
 8003bea:	2310      	movs	r3, #16
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e095      	b.n	8003d1c <UART_SetConfig+0x348>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb4 <UART_SetConfig+0x2e0>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d125      	bne.n	8003c46 <UART_SetConfig+0x272>
 8003bfa:	4b29      	ldr	r3, [pc, #164]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c08:	d017      	beq.n	8003c3a <UART_SetConfig+0x266>
 8003c0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c0e:	d817      	bhi.n	8003c40 <UART_SetConfig+0x26c>
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c14:	d00b      	beq.n	8003c2e <UART_SetConfig+0x25a>
 8003c16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c1a:	d811      	bhi.n	8003c40 <UART_SetConfig+0x26c>
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <UART_SetConfig+0x254>
 8003c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c24:	d006      	beq.n	8003c34 <UART_SetConfig+0x260>
 8003c26:	e00b      	b.n	8003c40 <UART_SetConfig+0x26c>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e076      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e073      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c34:	2304      	movs	r3, #4
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e070      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e06d      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c40:	2310      	movs	r3, #16
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e06a      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb8 <UART_SetConfig+0x2e4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d138      	bne.n	8003cc2 <UART_SetConfig+0x2ee>
 8003c50:	4b13      	ldr	r3, [pc, #76]	@ (8003ca0 <UART_SetConfig+0x2cc>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c5e:	d017      	beq.n	8003c90 <UART_SetConfig+0x2bc>
 8003c60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c64:	d82a      	bhi.n	8003cbc <UART_SetConfig+0x2e8>
 8003c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c6a:	d00b      	beq.n	8003c84 <UART_SetConfig+0x2b0>
 8003c6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c70:	d824      	bhi.n	8003cbc <UART_SetConfig+0x2e8>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <UART_SetConfig+0x2aa>
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c7a:	d006      	beq.n	8003c8a <UART_SetConfig+0x2b6>
 8003c7c:	e01e      	b.n	8003cbc <UART_SetConfig+0x2e8>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	77fb      	strb	r3, [r7, #31]
 8003c82:	e04b      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c84:	2302      	movs	r3, #2
 8003c86:	77fb      	strb	r3, [r7, #31]
 8003c88:	e048      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e045      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c90:	2308      	movs	r3, #8
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e042      	b.n	8003d1c <UART_SetConfig+0x348>
 8003c96:	bf00      	nop
 8003c98:	efff69f3 	.word	0xefff69f3
 8003c9c:	40011000 	.word	0x40011000
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40004400 	.word	0x40004400
 8003ca8:	40004800 	.word	0x40004800
 8003cac:	40004c00 	.word	0x40004c00
 8003cb0:	40005000 	.word	0x40005000
 8003cb4:	40011400 	.word	0x40011400
 8003cb8:	40007800 	.word	0x40007800
 8003cbc:	2310      	movs	r3, #16
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e02c      	b.n	8003d1c <UART_SetConfig+0x348>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a72      	ldr	r2, [pc, #456]	@ (8003e90 <UART_SetConfig+0x4bc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d125      	bne.n	8003d18 <UART_SetConfig+0x344>
 8003ccc:	4b71      	ldr	r3, [pc, #452]	@ (8003e94 <UART_SetConfig+0x4c0>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003cd6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003cda:	d017      	beq.n	8003d0c <UART_SetConfig+0x338>
 8003cdc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003ce0:	d817      	bhi.n	8003d12 <UART_SetConfig+0x33e>
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce6:	d00b      	beq.n	8003d00 <UART_SetConfig+0x32c>
 8003ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cec:	d811      	bhi.n	8003d12 <UART_SetConfig+0x33e>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <UART_SetConfig+0x326>
 8003cf2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf6:	d006      	beq.n	8003d06 <UART_SetConfig+0x332>
 8003cf8:	e00b      	b.n	8003d12 <UART_SetConfig+0x33e>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e00d      	b.n	8003d1c <UART_SetConfig+0x348>
 8003d00:	2302      	movs	r3, #2
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e00a      	b.n	8003d1c <UART_SetConfig+0x348>
 8003d06:	2304      	movs	r3, #4
 8003d08:	77fb      	strb	r3, [r7, #31]
 8003d0a:	e007      	b.n	8003d1c <UART_SetConfig+0x348>
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	77fb      	strb	r3, [r7, #31]
 8003d10:	e004      	b.n	8003d1c <UART_SetConfig+0x348>
 8003d12:	2310      	movs	r3, #16
 8003d14:	77fb      	strb	r3, [r7, #31]
 8003d16:	e001      	b.n	8003d1c <UART_SetConfig+0x348>
 8003d18:	2310      	movs	r3, #16
 8003d1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d24:	d15b      	bne.n	8003dde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d26:	7ffb      	ldrb	r3, [r7, #31]
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d828      	bhi.n	8003d7e <UART_SetConfig+0x3aa>
 8003d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d34 <UART_SetConfig+0x360>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d61 	.word	0x08003d61
 8003d3c:	08003d69 	.word	0x08003d69
 8003d40:	08003d7f 	.word	0x08003d7f
 8003d44:	08003d6f 	.word	0x08003d6f
 8003d48:	08003d7f 	.word	0x08003d7f
 8003d4c:	08003d7f 	.word	0x08003d7f
 8003d50:	08003d7f 	.word	0x08003d7f
 8003d54:	08003d77 	.word	0x08003d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7fe fe14 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003d5c:	61b8      	str	r0, [r7, #24]
        break;
 8003d5e:	e013      	b.n	8003d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d60:	f7fe fe24 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8003d64:	61b8      	str	r0, [r7, #24]
        break;
 8003d66:	e00f      	b.n	8003d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d68:	4b4b      	ldr	r3, [pc, #300]	@ (8003e98 <UART_SetConfig+0x4c4>)
 8003d6a:	61bb      	str	r3, [r7, #24]
        break;
 8003d6c:	e00c      	b.n	8003d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6e:	f7fe fcf7 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8003d72:	61b8      	str	r0, [r7, #24]
        break;
 8003d74:	e008      	b.n	8003d88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d7a:	61bb      	str	r3, [r7, #24]
        break;
 8003d7c:	e004      	b.n	8003d88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	77bb      	strb	r3, [r7, #30]
        break;
 8003d86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d074      	beq.n	8003e78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	005a      	lsls	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	441a      	add	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b0f      	cmp	r3, #15
 8003da8:	d916      	bls.n	8003dd8 <UART_SetConfig+0x404>
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db0:	d212      	bcs.n	8003dd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f023 030f 	bic.w	r3, r3, #15
 8003dba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	89fa      	ldrh	r2, [r7, #14]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	e04f      	b.n	8003e78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	77bb      	strb	r3, [r7, #30]
 8003ddc:	e04c      	b.n	8003e78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dde:	7ffb      	ldrb	r3, [r7, #31]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d828      	bhi.n	8003e36 <UART_SetConfig+0x462>
 8003de4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <UART_SetConfig+0x418>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	08003e37 	.word	0x08003e37
 8003dfc:	08003e27 	.word	0x08003e27
 8003e00:	08003e37 	.word	0x08003e37
 8003e04:	08003e37 	.word	0x08003e37
 8003e08:	08003e37 	.word	0x08003e37
 8003e0c:	08003e2f 	.word	0x08003e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e10:	f7fe fdb8 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003e14:	61b8      	str	r0, [r7, #24]
        break;
 8003e16:	e013      	b.n	8003e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e18:	f7fe fdc8 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8003e1c:	61b8      	str	r0, [r7, #24]
        break;
 8003e1e:	e00f      	b.n	8003e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e20:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <UART_SetConfig+0x4c4>)
 8003e22:	61bb      	str	r3, [r7, #24]
        break;
 8003e24:	e00c      	b.n	8003e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e26:	f7fe fc9b 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8003e2a:	61b8      	str	r0, [r7, #24]
        break;
 8003e2c:	e008      	b.n	8003e40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e32:	61bb      	str	r3, [r7, #24]
        break;
 8003e34:	e004      	b.n	8003e40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003e3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d018      	beq.n	8003e78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	085a      	lsrs	r2, r3, #1
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	2b0f      	cmp	r3, #15
 8003e5e:	d909      	bls.n	8003e74 <UART_SetConfig+0x4a0>
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e66:	d205      	bcs.n	8003e74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	e001      	b.n	8003e78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e84:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3720      	adds	r7, #32
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40007c00 	.word	0x40007c00
 8003e94:	40023800 	.word	0x40023800
 8003e98:	00f42400 	.word	0x00f42400

08003e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00a      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f9a:	d10a      	bne.n	8003fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	605a      	str	r2, [r3, #4]
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b098      	sub	sp, #96	@ 0x60
 8003fe4:	af02      	add	r7, sp, #8
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ff0:	f7fd f85c 	bl	80010ac <HAL_GetTick>
 8003ff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b08      	cmp	r3, #8
 8004002:	d12e      	bne.n	8004062 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f88c 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d021      	beq.n	8004062 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800402c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004032:	653b      	str	r3, [r7, #80]	@ 0x50
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800403c:	647b      	str	r3, [r7, #68]	@ 0x44
 800403e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e062      	b.n	8004128 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b04      	cmp	r3, #4
 800406e:	d149      	bne.n	8004104 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004070:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004078:	2200      	movs	r2, #0
 800407a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f856 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d03c      	beq.n	8004104 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	623b      	str	r3, [r7, #32]
   return(result);
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80040aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e6      	bne.n	800408a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3308      	adds	r3, #8
 80040da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040dc:	61fa      	str	r2, [r7, #28]
 80040de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e5      	bne.n	80040bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e011      	b.n	8004128 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2220      	movs	r2, #32
 800410e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3758      	adds	r7, #88	@ 0x58
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004140:	e04f      	b.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004148:	d04b      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414a:	f7fc ffaf 	bl	80010ac <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <UART_WaitOnFlagUntilTimeout+0x30>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e04e      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d037      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b80      	cmp	r3, #128	@ 0x80
 8004176:	d034      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b40      	cmp	r3, #64	@ 0x40
 800417c:	d031      	beq.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b08      	cmp	r3, #8
 800418a:	d110      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2208      	movs	r2, #8
 8004192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f838 	bl	800420a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2208      	movs	r2, #8
 800419e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e029      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041bc:	d111      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 f81e 	bl	800420a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e00f      	b.n	8004202 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4013      	ands	r3, r2
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	bf0c      	ite	eq
 80041f2:	2301      	moveq	r3, #1
 80041f4:	2300      	movne	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d0a0      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800420a:	b480      	push	{r7}
 800420c:	b095      	sub	sp, #84	@ 0x54
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004222:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004230:	643b      	str	r3, [r7, #64]	@ 0x40
 8004232:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004236:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800423e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	61fb      	str	r3, [r7, #28]
   return(result);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	3308      	adds	r3, #8
 8004262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800426a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800427c:	2b01      	cmp	r3, #1
 800427e:	d118      	bne.n	80042b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	e853 3f00 	ldrex	r3, [r3]
 800428c:	60bb      	str	r3, [r7, #8]
   return(result);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f023 0310 	bic.w	r3, r3, #16
 8004294:	647b      	str	r3, [r7, #68]	@ 0x44
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800429e:	61bb      	str	r3, [r7, #24]
 80042a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	6979      	ldr	r1, [r7, #20]
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	e841 2300 	strex	r3, r2, [r1]
 80042aa:	613b      	str	r3, [r7, #16]
   return(result);
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e6      	bne.n	8004280 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042c6:	bf00      	nop
 80042c8:	3754      	adds	r7, #84	@ 0x54
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042d4:	b084      	sub	sp, #16
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	f107 001c 	add.w	r0, r7, #28
 80042e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d121      	bne.n	8004332 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	4b21      	ldr	r3, [pc, #132]	@ (8004384 <USB_CoreInit+0xb0>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004312:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fa92 	bl	8004850 <USB_CoreReset>
 800432c:	4603      	mov	r3, r0
 800432e:	73fb      	strb	r3, [r7, #15]
 8004330:	e010      	b.n	8004354 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa86 	bl	8004850 <USB_CoreReset>
 8004344:	4603      	mov	r3, r0
 8004346:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004354:	7fbb      	ldrb	r3, [r7, #30]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d10b      	bne.n	8004372 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f043 0206 	orr.w	r2, r3, #6
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004372:	7bfb      	ldrb	r3, [r7, #15]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800437e:	b004      	add	sp, #16
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	ffbdffbf 	.word	0xffbdffbf

08004388 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f023 0201 	bic.w	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d115      	bne.n	80043f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043d8:	200a      	movs	r0, #10
 80043da:	f7fc fe73 	bl	80010c4 <HAL_Delay>
      ms += 10U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	330a      	adds	r3, #10
 80043e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fa25 	bl	8004834 <USB_GetMode>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d01e      	beq.n	800442e <USB_SetCurrentMode+0x84>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2bc7      	cmp	r3, #199	@ 0xc7
 80043f4:	d9f0      	bls.n	80043d8 <USB_SetCurrentMode+0x2e>
 80043f6:	e01a      	b.n	800442e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d115      	bne.n	800442a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800440a:	200a      	movs	r0, #10
 800440c:	f7fc fe5a 	bl	80010c4 <HAL_Delay>
      ms += 10U;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	330a      	adds	r3, #10
 8004414:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fa0c 	bl	8004834 <USB_GetMode>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <USB_SetCurrentMode+0x84>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2bc7      	cmp	r3, #199	@ 0xc7
 8004426:	d9f0      	bls.n	800440a <USB_SetCurrentMode+0x60>
 8004428:	e001      	b.n	800442e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e005      	b.n	800443a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2bc8      	cmp	r3, #200	@ 0xc8
 8004432:	d101      	bne.n	8004438 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004444:	b084      	sub	sp, #16
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e009      	b.n	8004478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3340      	adds	r3, #64	@ 0x40
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	2200      	movs	r2, #0
 8004470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3301      	adds	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0e      	cmp	r3, #14
 800447c:	d9f2      	bls.n	8004464 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800447e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004482:	2b00      	cmp	r3, #0
 8004484:	d11c      	bne.n	80044c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e005      	b.n	80044cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044d2:	461a      	mov	r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10d      	bne.n	80044fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d104      	bne.n	80044f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044e8:	2100      	movs	r1, #0
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f968 	bl	80047c0 <USB_SetDevSpeed>
 80044f0:	e008      	b.n	8004504 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044f2:	2101      	movs	r1, #1
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f963 	bl	80047c0 <USB_SetDevSpeed>
 80044fa:	e003      	b.n	8004504 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044fc:	2103      	movs	r1, #3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f95e 	bl	80047c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004504:	2110      	movs	r1, #16
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8fa 	bl	8004700 <USB_FlushTxFifo>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f924 	bl	8004764 <USB_FlushRxFifo>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800452c:	461a      	mov	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004538:	461a      	mov	r2, r3
 800453a:	2300      	movs	r3, #0
 800453c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	e043      	b.n	80045d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004566:	d118      	bne.n	800459a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e013      	b.n	80045ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004590:	461a      	mov	r2, r3
 8004592:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	e008      	b.n	80045ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a6:	461a      	mov	r2, r3
 80045a8:	2300      	movs	r3, #0
 80045aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045b8:	461a      	mov	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ca:	461a      	mov	r2, r3
 80045cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3301      	adds	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045dc:	461a      	mov	r2, r3
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d3b5      	bcc.n	8004550 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	e043      	b.n	8004672 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004600:	d118      	bne.n	8004634 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10a      	bne.n	800461e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004614:	461a      	mov	r2, r3
 8004616:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	e013      	b.n	8004646 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462a:	461a      	mov	r2, r3
 800462c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e008      	b.n	8004646 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004640:	461a      	mov	r2, r3
 8004642:	2300      	movs	r3, #0
 8004644:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004664:	461a      	mov	r2, r3
 8004666:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800466a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3301      	adds	r3, #1
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004676:	461a      	mov	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4293      	cmp	r3, r2
 800467c:	d3b5      	bcc.n	80045ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800468c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004690:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800469e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d105      	bne.n	80046b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f043 0210 	orr.w	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <USB_DevInit+0x2b4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d005      	beq.n	80046d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f043 0208 	orr.w	r2, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d105      	bne.n	80046e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <USB_DevInit+0x2b8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f4:	b004      	add	sp, #16
 80046f6:	4770      	bx	lr
 80046f8:	803c3800 	.word	0x803c3800
 80046fc:	40000004 	.word	0x40000004

08004700 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800471a:	d901      	bls.n	8004720 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e01b      	b.n	8004758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	daf2      	bge.n	800470e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	019b      	lsls	r3, r3, #6
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004744:	d901      	bls.n	800474a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e006      	b.n	8004758 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b20      	cmp	r3, #32
 8004754:	d0f0      	beq.n	8004738 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	3301      	adds	r3, #1
 8004774:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800477c:	d901      	bls.n	8004782 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e018      	b.n	80047b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	daf2      	bge.n	8004770 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2210      	movs	r2, #16
 8004792:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3301      	adds	r3, #1
 8004798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047a0:	d901      	bls.n	80047a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e006      	b.n	80047b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d0f0      	beq.n	8004794 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800480c:	f023 0303 	bic.w	r3, r3, #3
 8004810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	f003 0301 	and.w	r3, r3, #1
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3301      	adds	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004868:	d901      	bls.n	800486e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e022      	b.n	80048b4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	daf2      	bge.n	800485c <USB_CoreReset+0xc>

  count = 10U;
 8004876:	230a      	movs	r3, #10
 8004878:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800487a:	e002      	b.n	8004882 <USB_CoreReset+0x32>
  {
    count--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3b01      	subs	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1f9      	bne.n	800487c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f043 0201 	orr.w	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3301      	adds	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048a0:	d901      	bls.n	80048a6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e006      	b.n	80048b4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d0f0      	beq.n	8004894 <USB_CoreReset+0x44>

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80048c4:	bf00      	nop
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048d6:	f3ef 8305 	mrs	r3, IPSR
 80048da:	60bb      	str	r3, [r7, #8]
  return(result);
 80048dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e2:	f3ef 8310 	mrs	r3, PRIMASK
 80048e6:	607b      	str	r3, [r7, #4]
  return(result);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d105      	bne.n	80048fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048ee:	f3ef 8311 	mrs	r3, BASEPRI
 80048f2:	603b      	str	r3, [r7, #0]
  return(result);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <osKernelInitialize+0x3a>
 80048fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004934 <osKernelInitialize+0x64>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d103      	bne.n	800490a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004902:	f06f 0305 	mvn.w	r3, #5
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e00c      	b.n	8004924 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800490a:	4b0a      	ldr	r3, [pc, #40]	@ (8004934 <osKernelInitialize+0x64>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004912:	4b08      	ldr	r3, [pc, #32]	@ (8004934 <osKernelInitialize+0x64>)
 8004914:	2201      	movs	r2, #1
 8004916:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e002      	b.n	8004924 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004924:	68fb      	ldr	r3, [r7, #12]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	2000082c 	.word	0x2000082c

08004938 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800493e:	f3ef 8305 	mrs	r3, IPSR
 8004942:	60bb      	str	r3, [r7, #8]
  return(result);
 8004944:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10f      	bne.n	800496a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494a:	f3ef 8310 	mrs	r3, PRIMASK
 800494e:	607b      	str	r3, [r7, #4]
  return(result);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004956:	f3ef 8311 	mrs	r3, BASEPRI
 800495a:	603b      	str	r3, [r7, #0]
  return(result);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <osKernelStart+0x3a>
 8004962:	4b0f      	ldr	r3, [pc, #60]	@ (80049a0 <osKernelStart+0x68>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d103      	bne.n	8004972 <osKernelStart+0x3a>
    stat = osErrorISR;
 800496a:	f06f 0305 	mvn.w	r3, #5
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e010      	b.n	8004994 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <osKernelStart+0x68>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d109      	bne.n	800498e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800497a:	f7ff ffa1 	bl	80048c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800497e:	4b08      	ldr	r3, [pc, #32]	@ (80049a0 <osKernelStart+0x68>)
 8004980:	2202      	movs	r2, #2
 8004982:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004984:	f001 fc76 	bl	8006274 <vTaskStartScheduler>
      stat = osOK;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	e002      	b.n	8004994 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800498e:	f04f 33ff 	mov.w	r3, #4294967295
 8004992:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004994:	68fb      	ldr	r3, [r7, #12]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	2000082c 	.word	0x2000082c

080049a4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049aa:	f3ef 8305 	mrs	r3, IPSR
 80049ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10f      	bne.n	80049d6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ba:	607b      	str	r3, [r7, #4]
  return(result);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d105      	bne.n	80049ce <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049c2:	f3ef 8311 	mrs	r3, BASEPRI
 80049c6:	603b      	str	r3, [r7, #0]
  return(result);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <osKernelGetTickCount+0x3a>
 80049ce:	4b08      	ldr	r3, [pc, #32]	@ (80049f0 <osKernelGetTickCount+0x4c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d103      	bne.n	80049de <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80049d6:	f001 fd77 	bl	80064c8 <xTaskGetTickCountFromISR>
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	e002      	b.n	80049e4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80049de:	f001 fd63 	bl	80064a8 <xTaskGetTickCount>
 80049e2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80049e4:	68fb      	ldr	r3, [r7, #12]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	2000082c 	.word	0x2000082c

080049f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b090      	sub	sp, #64	@ 0x40
 80049f8:	af04      	add	r7, sp, #16
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a04:	f3ef 8305 	mrs	r3, IPSR
 8004a08:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a0a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 808f 	bne.w	8004b30 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a12:	f3ef 8310 	mrs	r3, PRIMASK
 8004a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d105      	bne.n	8004a2a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004a22:	617b      	str	r3, [r7, #20]
  return(result);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <osThreadNew+0x3e>
 8004a2a:	4b44      	ldr	r3, [pc, #272]	@ (8004b3c <osThreadNew+0x148>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d07e      	beq.n	8004b30 <osThreadNew+0x13c>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d07b      	beq.n	8004b30 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004a38:	2380      	movs	r3, #128	@ 0x80
 8004a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004a3c:	2318      	movs	r3, #24
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004a44:	f04f 33ff 	mov.w	r3, #4294967295
 8004a48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d045      	beq.n	8004adc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <osThreadNew+0x6a>
        name = attr->name;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <osThreadNew+0x90>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	2b38      	cmp	r3, #56	@ 0x38
 8004a76:	d805      	bhi.n	8004a84 <osThreadNew+0x90>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <osThreadNew+0x94>
        return (NULL);
 8004a84:	2300      	movs	r3, #0
 8004a86:	e054      	b.n	8004b32 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00e      	beq.n	8004abe <osThreadNew+0xca>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b5b      	cmp	r3, #91	@ 0x5b
 8004aa6:	d90a      	bls.n	8004abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d006      	beq.n	8004abe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <osThreadNew+0xca>
        mem = 1;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	623b      	str	r3, [r7, #32]
 8004abc:	e010      	b.n	8004ae0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10c      	bne.n	8004ae0 <osThreadNew+0xec>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d108      	bne.n	8004ae0 <osThreadNew+0xec>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d104      	bne.n	8004ae0 <osThreadNew+0xec>
          mem = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
 8004ada:	e001      	b.n	8004ae0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d110      	bne.n	8004b08 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004aee:	9202      	str	r2, [sp, #8]
 8004af0:	9301      	str	r3, [sp, #4]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f001 f9d3 	bl	8005ea8 <xTaskCreateStatic>
 8004b02:	4603      	mov	r3, r0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e013      	b.n	8004b30 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d110      	bne.n	8004b30 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	f107 0310 	add.w	r3, r7, #16
 8004b16:	9301      	str	r3, [sp, #4]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f001 fa27 	bl	8005f74 <xTaskCreate>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <osThreadNew+0x13c>
          hTask = NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004b30:	693b      	ldr	r3, [r7, #16]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3730      	adds	r7, #48	@ 0x30
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	2000082c 	.word	0x2000082c

08004b40 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004b46:	f002 f80b 	bl	8006b60 <xTaskGetCurrentTaskHandle>
 8004b4a:	6078      	str	r0, [r7, #4]

  return (id);
 8004b4c:	687b      	ldr	r3, [r7, #4]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b60:	f3ef 8305 	mrs	r3, IPSR
 8004b64:	613b      	str	r3, [r7, #16]
  return(result);
 8004b66:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b70:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d105      	bne.n	8004b84 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b78:	f3ef 8311 	mrs	r3, BASEPRI
 8004b7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <osDelay+0x3c>
 8004b84:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <osDelay+0x58>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d103      	bne.n	8004b94 <osDelay+0x3c>
    stat = osErrorISR;
 8004b8c:	f06f 0305 	mvn.w	r3, #5
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e007      	b.n	8004ba4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f001 fb30 	bl	8006204 <vTaskDelay>
    }
  }

  return (stat);
 8004ba4:	697b      	ldr	r3, [r7, #20]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	2000082c 	.word	0x2000082c

08004bb4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	@ 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bc0:	f3ef 8305 	mrs	r3, IPSR
 8004bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f040 8085 	bne.w	8004cd8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bce:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d105      	bne.n	8004be6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bda:	f3ef 8311 	mrs	r3, BASEPRI
 8004bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <osMutexNew+0x3a>
 8004be6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ce4 <osMutexNew+0x130>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d074      	beq.n	8004cd8 <osMutexNew+0x124>
    if (attr != NULL) {
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <osMutexNew+0x48>
      type = attr->attr_bits;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	e001      	b.n	8004c00 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <osMutexNew+0x5c>
      rmtx = 1U;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	e001      	b.n	8004c14 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d15c      	bne.n	8004cd8 <osMutexNew+0x124>
      mem = -1;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d015      	beq.n	8004c56 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <osMutexNew+0x8c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c38:	d902      	bls.n	8004c40 <osMutexNew+0x8c>
          mem = 1;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	61bb      	str	r3, [r7, #24]
 8004c3e:	e00c      	b.n	8004c5a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <osMutexNew+0xa6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <osMutexNew+0xa6>
            mem = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	e001      	b.n	8004c5a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d112      	bne.n	8004c86 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	2004      	movs	r0, #4
 8004c6e:	f000 fb5c 	bl	800532a <xQueueCreateMutexStatic>
 8004c72:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c74:	e016      	b.n	8004ca4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f000 fb54 	bl	800532a <xQueueCreateMutexStatic>
 8004c82:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c84:	e00e      	b.n	8004ca4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d004      	beq.n	8004c9c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004c92:	2004      	movs	r0, #4
 8004c94:	f000 fb31 	bl	80052fa <xQueueCreateMutex>
 8004c98:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c9a:	e003      	b.n	8004ca4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	f000 fb2c 	bl	80052fa <xQueueCreateMutex>
 8004ca2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <osMutexNew+0x110>
        if (attr != NULL) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <osMutexNew+0x104>
          name = attr->name;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e001      	b.n	8004cbc <osMutexNew+0x108>
        } else {
          name = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004cbc:	6979      	ldr	r1, [r7, #20]
 8004cbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cc0:	f001 f894 	bl	8005dec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d006      	beq.n	8004cd8 <osMutexNew+0x124>
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3728      	adds	r7, #40	@ 0x28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2000082c 	.word	0x2000082c

08004ce8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d06:	f3ef 8305 	mrs	r3, IPSR
 8004d0a:	613b      	str	r3, [r7, #16]
  return(result);
 8004d0c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d12:	f3ef 8310 	mrs	r3, PRIMASK
 8004d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d105      	bne.n	8004d2a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d22:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <osMutexAcquire+0x52>
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <osMutexAcquire+0xb8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d103      	bne.n	8004d3a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004d32:	f06f 0305 	mvn.w	r3, #5
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e02c      	b.n	8004d94 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d103      	bne.n	8004d48 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004d40:	f06f 0303 	mvn.w	r3, #3
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	e025      	b.n	8004d94 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d011      	beq.n	8004d72 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	69b8      	ldr	r0, [r7, #24]
 8004d52:	f000 fb3c 	bl	80053ce <xQueueTakeMutexRecursive>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d01b      	beq.n	8004d94 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004d62:	f06f 0301 	mvn.w	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e014      	b.n	8004d94 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004d6a:	f06f 0302 	mvn.w	r3, #2
 8004d6e:	61fb      	str	r3, [r7, #28]
 8004d70:	e010      	b.n	8004d94 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004d72:	6839      	ldr	r1, [r7, #0]
 8004d74:	69b8      	ldr	r0, [r7, #24]
 8004d76:	f000 fdf9 	bl	800596c <xQueueSemaphoreTake>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d009      	beq.n	8004d94 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004d86:	f06f 0301 	mvn.w	r3, #1
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	e002      	b.n	8004d94 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004d8e:	f06f 0302 	mvn.w	r3, #2
 8004d92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004d94:	69fb      	ldr	r3, [r7, #28]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000082c 	.word	0x2000082c

08004da4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc0:	f3ef 8305 	mrs	r3, IPSR
 8004dc4:	613b      	str	r3, [r7, #16]
  return(result);
 8004dc6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10f      	bne.n	8004dec <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004ddc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <osMutexRelease+0x50>
 8004de4:	4b16      	ldr	r3, [pc, #88]	@ (8004e40 <osMutexRelease+0x9c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d103      	bne.n	8004df4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004dec:	f06f 0305 	mvn.w	r3, #5
 8004df0:	61fb      	str	r3, [r7, #28]
 8004df2:	e01f      	b.n	8004e34 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004dfa:	f06f 0303 	mvn.w	r3, #3
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	e018      	b.n	8004e34 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d009      	beq.n	8004e1c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004e08:	69b8      	ldr	r0, [r7, #24]
 8004e0a:	f000 faa9 	bl	8005360 <xQueueGiveMutexRecursive>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d00f      	beq.n	8004e34 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004e14:	f06f 0302 	mvn.w	r3, #2
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	e00b      	b.n	8004e34 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2100      	movs	r1, #0
 8004e22:	69b8      	ldr	r0, [r7, #24]
 8004e24:	f000 fb0c 	bl	8005440 <xQueueGenericSend>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d002      	beq.n	8004e34 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004e2e:	f06f 0302 	mvn.w	r3, #2
 8004e32:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004e34:	69fb      	ldr	r3, [r7, #28]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2000082c 	.word	0x2000082c

08004e44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4a07      	ldr	r2, [pc, #28]	@ (8004e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	4a06      	ldr	r2, [pc, #24]	@ (8004e74 <vApplicationGetIdleTaskMemory+0x30>)
 8004e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2280      	movs	r2, #128	@ 0x80
 8004e60:	601a      	str	r2, [r3, #0]
}
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000830 	.word	0x20000830
 8004e74:	2000088c 	.word	0x2000088c

08004e78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a07      	ldr	r2, [pc, #28]	@ (8004ea4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4a06      	ldr	r2, [pc, #24]	@ (8004ea8 <vApplicationGetTimerTaskMemory+0x30>)
 8004e8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e96:	601a      	str	r2, [r3, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20000a8c 	.word	0x20000a8c
 8004ea8:	20000ae8 	.word	0x20000ae8

08004eac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f103 0208 	add.w	r2, r3, #8
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f103 0208 	add.w	r2, r3, #8
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f103 0208 	add.w	r2, r3, #8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f06:	b480      	push	{r7}
 8004f08:	b085      	sub	sp, #20
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	601a      	str	r2, [r3, #0]
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d103      	bne.n	8004f6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e00c      	b.n	8004f88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3308      	adds	r3, #8
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e002      	b.n	8004f7c <vListInsert+0x2e>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d2f6      	bcs.n	8004f76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6892      	ldr	r2, [r2, #8]
 8004fd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6852      	ldr	r2, [r2, #4]
 8004fe0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d103      	bne.n	8004ff4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	1e5a      	subs	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10d      	bne.n	8005044 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502c:	b672      	cpsid	i
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	b662      	cpsie	i
 800503c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800503e:	bf00      	nop
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005044:	f002 fbfa 	bl	800783c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	68f9      	ldr	r1, [r7, #12]
 8005052:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005054:	fb01 f303 	mul.w	r3, r1, r3
 8005058:	441a      	add	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005074:	3b01      	subs	r3, #1
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800507a:	fb01 f303 	mul.w	r3, r1, r3
 800507e:	441a      	add	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	22ff      	movs	r2, #255	@ 0xff
 8005088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	22ff      	movs	r2, #255	@ 0xff
 8005090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d114      	bne.n	80050c4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d01a      	beq.n	80050d8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3310      	adds	r3, #16
 80050a6:	4618      	mov	r0, r3
 80050a8:	f001 fb92 	bl	80067d0 <xTaskRemoveFromEventList>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d012      	beq.n	80050d8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050b2:	4b0d      	ldr	r3, [pc, #52]	@ (80050e8 <xQueueGenericReset+0xd4>)
 80050b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	e009      	b.n	80050d8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3310      	adds	r3, #16
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff feef 	bl	8004eac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3324      	adds	r3, #36	@ 0x24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff feea 	bl	8004eac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050d8:	f002 fbe6 	bl	80078a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050dc:	2301      	movs	r3, #1
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	@ 0x38
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
 80050f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	b672      	cpsid	i
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	b662      	cpsie	i
 8005114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005116:	bf00      	nop
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10d      	bne.n	800513e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	b672      	cpsid	i
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	b662      	cpsie	i
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <xQueueGenericCreateStatic+0x5e>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <xQueueGenericCreateStatic+0x62>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <xQueueGenericCreateStatic+0x64>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	b672      	cpsid	i
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	b662      	cpsie	i
 8005168:	623b      	str	r3, [r7, #32]
}
 800516a:	bf00      	nop
 800516c:	bf00      	nop
 800516e:	e7fd      	b.n	800516c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <xQueueGenericCreateStatic+0x90>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <xQueueGenericCreateStatic+0x94>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <xQueueGenericCreateStatic+0x96>
 8005180:	2300      	movs	r3, #0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10d      	bne.n	80051a2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	b672      	cpsid	i
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	b662      	cpsie	i
 800519a:	61fb      	str	r3, [r7, #28]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051a2:	2350      	movs	r3, #80	@ 0x50
 80051a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b50      	cmp	r3, #80	@ 0x50
 80051aa:	d00d      	beq.n	80051c8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b0:	b672      	cpsid	i
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	b662      	cpsie	i
 80051c0:	61bb      	str	r3, [r7, #24]
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80051ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00d      	beq.n	80051f0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80051e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	68b9      	ldr	r1, [r7, #8]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f848 	bl	8005280 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3730      	adds	r7, #48	@ 0x30
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b08a      	sub	sp, #40	@ 0x28
 80051fe:	af02      	add	r7, sp, #8
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	4613      	mov	r3, r2
 8005206:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <xQueueGenericCreate+0x30>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005212:	b672      	cpsid	i
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	b662      	cpsie	i
 8005222:	613b      	str	r3, [r7, #16]
}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	e7fd      	b.n	8005226 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d102      	bne.n	8005236 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	e004      	b.n	8005240 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3350      	adds	r3, #80	@ 0x50
 8005244:	4618      	mov	r0, r3
 8005246:	f002 fc27 	bl	8007a98 <pvPortMalloc>
 800524a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d011      	beq.n	8005276 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	3350      	adds	r3, #80	@ 0x50
 800525a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005264:	79fa      	ldrb	r2, [r7, #7]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f805 	bl	8005280 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005276:	69bb      	ldr	r3, [r7, #24]
	}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e002      	b.n	80052a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052ae:	2101      	movs	r1, #1
 80052b0:	69b8      	ldr	r0, [r7, #24]
 80052b2:	f7ff feaf 	bl	8005014 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80052e6:	2300      	movs	r3, #0
 80052e8:	2200      	movs	r2, #0
 80052ea:	2100      	movs	r1, #0
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f8a7 	bl	8005440 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b086      	sub	sp, #24
 80052fe:	af00      	add	r7, sp, #0
 8005300:	4603      	mov	r3, r0
 8005302:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005304:	2301      	movs	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	2300      	movs	r3, #0
 800530a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	461a      	mov	r2, r3
 8005310:	6939      	ldr	r1, [r7, #16]
 8005312:	6978      	ldr	r0, [r7, #20]
 8005314:	f7ff ff71 	bl	80051fa <xQueueGenericCreate>
 8005318:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ffd3 	bl	80052c6 <prvInitialiseMutex>

		return xNewQueue;
 8005320:	68fb      	ldr	r3, [r7, #12]
	}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800532a:	b580      	push	{r7, lr}
 800532c:	b088      	sub	sp, #32
 800532e:	af02      	add	r7, sp, #8
 8005330:	4603      	mov	r3, r0
 8005332:	6039      	str	r1, [r7, #0]
 8005334:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005336:	2301      	movs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2200      	movs	r2, #0
 8005346:	6939      	ldr	r1, [r7, #16]
 8005348:	6978      	ldr	r0, [r7, #20]
 800534a:	f7ff fecf 	bl	80050ec <xQueueGenericCreateStatic>
 800534e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f7ff ffb8 	bl	80052c6 <prvInitialiseMutex>

		return xNewQueue;
 8005356:	68fb      	ldr	r3, [r7, #12]
	}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005376:	b672      	cpsid	i
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	b662      	cpsie	i
 8005386:	60fb      	str	r3, [r7, #12]
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	e7fd      	b.n	800538a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	689c      	ldr	r4, [r3, #8]
 8005392:	f001 fbe5 	bl	8006b60 <xTaskGetCurrentTaskHandle>
 8005396:	4603      	mov	r3, r0
 8005398:	429c      	cmp	r4, r3
 800539a:	d111      	bne.n	80053c0 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	1e5a      	subs	r2, r3, #1
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d105      	bne.n	80053ba <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80053ae:	2300      	movs	r3, #0
 80053b0:	2200      	movs	r2, #0
 80053b2:	2100      	movs	r1, #0
 80053b4:	6938      	ldr	r0, [r7, #16]
 80053b6:	f000 f843 	bl	8005440 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80053ba:	2301      	movs	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e001      	b.n	80053c4 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80053c4:	697b      	ldr	r3, [r7, #20]
	}
 80053c6:	4618      	mov	r0, r3
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd90      	pop	{r4, r7, pc}

080053ce <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80053ce:	b590      	push	{r4, r7, lr}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10d      	bne.n	80053fe <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	b672      	cpsid	i
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	b662      	cpsie	i
 80053f6:	60fb      	str	r3, [r7, #12]
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	e7fd      	b.n	80053fa <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	689c      	ldr	r4, [r3, #8]
 8005402:	f001 fbad 	bl	8006b60 <xTaskGetCurrentTaskHandle>
 8005406:	4603      	mov	r3, r0
 8005408:	429c      	cmp	r4, r3
 800540a:	d107      	bne.n	800541c <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005416:	2301      	movs	r3, #1
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	e00c      	b.n	8005436 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	6938      	ldr	r0, [r7, #16]
 8005420:	f000 faa4 	bl	800596c <xQueueSemaphoreTake>
 8005424:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005436:	697b      	ldr	r3, [r7, #20]
	}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd90      	pop	{r4, r7, pc}

08005440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b08e      	sub	sp, #56	@ 0x38
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800544e:	2300      	movs	r3, #0
 8005450:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <xQueueGenericSend+0x38>
	__asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	b672      	cpsid	i
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	b662      	cpsie	i
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d103      	bne.n	8005486 <xQueueGenericSend+0x46>
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <xQueueGenericSend+0x4a>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <xQueueGenericSend+0x4c>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10d      	bne.n	80054ac <xQueueGenericSend+0x6c>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	b672      	cpsid	i
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	b662      	cpsie	i
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054a6:	bf00      	nop
 80054a8:	bf00      	nop
 80054aa:	e7fd      	b.n	80054a8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d103      	bne.n	80054ba <xQueueGenericSend+0x7a>
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <xQueueGenericSend+0x7e>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <xQueueGenericSend+0x80>
 80054be:	2300      	movs	r3, #0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10d      	bne.n	80054e0 <xQueueGenericSend+0xa0>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	b672      	cpsid	i
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	b662      	cpsie	i
 80054d8:	623b      	str	r3, [r7, #32]
}
 80054da:	bf00      	nop
 80054dc:	bf00      	nop
 80054de:	e7fd      	b.n	80054dc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054e0:	f001 fb4e 	bl	8006b80 <xTaskGetSchedulerState>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d102      	bne.n	80054f0 <xQueueGenericSend+0xb0>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <xQueueGenericSend+0xb4>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <xQueueGenericSend+0xb6>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10d      	bne.n	8005516 <xQueueGenericSend+0xd6>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fe:	b672      	cpsid	i
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	b662      	cpsie	i
 800550e:	61fb      	str	r3, [r7, #28]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005516:	f002 f991 	bl	800783c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800551e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <xQueueGenericSend+0xec>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d129      	bne.n	8005580 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	68b9      	ldr	r1, [r7, #8]
 8005530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005532:	f000 fb4b 	bl	8005bcc <prvCopyDataToQueue>
 8005536:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	3324      	adds	r3, #36	@ 0x24
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f943 	bl	80067d0 <xTaskRemoveFromEventList>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d013      	beq.n	8005578 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005550:	4b3f      	ldr	r3, [pc, #252]	@ (8005650 <xQueueGenericSend+0x210>)
 8005552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	e00a      	b.n	8005578 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d007      	beq.n	8005578 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005568:	4b39      	ldr	r3, [pc, #228]	@ (8005650 <xQueueGenericSend+0x210>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005578:	f002 f996 	bl	80078a8 <vPortExitCritical>
				return pdPASS;
 800557c:	2301      	movs	r3, #1
 800557e:	e063      	b.n	8005648 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d103      	bne.n	800558e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005586:	f002 f98f 	bl	80078a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800558a:	2300      	movs	r3, #0
 800558c:	e05c      	b.n	8005648 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800558e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005590:	2b00      	cmp	r3, #0
 8005592:	d106      	bne.n	80055a2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005594:	f107 0314 	add.w	r3, r7, #20
 8005598:	4618      	mov	r0, r3
 800559a:	f001 f97f 	bl	800689c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a2:	f002 f981 	bl	80078a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055a6:	f000 fed1 	bl	800634c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055aa:	f002 f947 	bl	800783c <vPortEnterCritical>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d103      	bne.n	80055c4 <xQueueGenericSend+0x184>
 80055bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055ca:	b25b      	sxtb	r3, r3
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d103      	bne.n	80055da <xQueueGenericSend+0x19a>
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055da:	f002 f965 	bl	80078a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055de:	1d3a      	adds	r2, r7, #4
 80055e0:	f107 0314 	add.w	r3, r7, #20
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 f96e 	bl	80068c8 <xTaskCheckForTimeOut>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d124      	bne.n	800563c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055f4:	f000 fbe2 	bl	8005dbc <prvIsQueueFull>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d018      	beq.n	8005630 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	3310      	adds	r3, #16
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f001 f88c 	bl	8006724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800560c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800560e:	f000 fb6d 	bl	8005cec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005612:	f000 fea9 	bl	8006368 <xTaskResumeAll>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	f47f af7c 	bne.w	8005516 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800561e:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <xQueueGenericSend+0x210>)
 8005620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	e772      	b.n	8005516 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005630:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005632:	f000 fb5b 	bl	8005cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005636:	f000 fe97 	bl	8006368 <xTaskResumeAll>
 800563a:	e76c      	b.n	8005516 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800563c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800563e:	f000 fb55 	bl	8005cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005642:	f000 fe91 	bl	8006368 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005646:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005648:	4618      	mov	r0, r3
 800564a:	3738      	adds	r7, #56	@ 0x38
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	@ 0x38
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10d      	bne.n	8005688 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005670:	b672      	cpsid	i
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	b662      	cpsie	i
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <xQueueGenericSendFromISR+0x42>
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <xQueueGenericSendFromISR+0x46>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <xQueueGenericSendFromISR+0x48>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10d      	bne.n	80056bc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	b672      	cpsid	i
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	b662      	cpsie	i
 80056b4:	623b      	str	r3, [r7, #32]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d103      	bne.n	80056ca <xQueueGenericSendFromISR+0x76>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <xQueueGenericSendFromISR+0x7a>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueGenericSendFromISR+0x7c>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d8:	b672      	cpsid	i
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	b662      	cpsie	i
 80056e8:	61fb      	str	r3, [r7, #28]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f0:	f002 f98c 	bl	8007a0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056f4:	f3ef 8211 	mrs	r2, BASEPRI
 80056f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fc:	b672      	cpsid	i
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	b662      	cpsie	i
 800570c:	61ba      	str	r2, [r7, #24]
 800570e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005710:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005712:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571c:	429a      	cmp	r2, r3
 800571e:	d302      	bcc.n	8005726 <xQueueGenericSendFromISR+0xd2>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d12c      	bne.n	8005780 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800572c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005736:	f000 fa49 	bl	8005bcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800573a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800573e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005742:	d112      	bne.n	800576a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d016      	beq.n	800577a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	3324      	adds	r3, #36	@ 0x24
 8005750:	4618      	mov	r0, r3
 8005752:	f001 f83d 	bl	80067d0 <xTaskRemoveFromEventList>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e007      	b.n	800577a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800576a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800576e:	3301      	adds	r3, #1
 8005770:	b2db      	uxtb	r3, r3
 8005772:	b25a      	sxtb	r2, r3
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800577a:	2301      	movs	r3, #1
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800577e:	e001      	b.n	8005784 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005780:	2300      	movs	r3, #0
 8005782:	637b      	str	r3, [r7, #52]	@ 0x34
 8005784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005786:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800578e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005792:	4618      	mov	r0, r3
 8005794:	3738      	adds	r7, #56	@ 0x38
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08c      	sub	sp, #48	@ 0x30
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057a8:	2300      	movs	r3, #0
 80057aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <xQueueReceive+0x36>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	b672      	cpsid	i
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	b662      	cpsie	i
 80057ca:	623b      	str	r3, [r7, #32]
}
 80057cc:	bf00      	nop
 80057ce:	bf00      	nop
 80057d0:	e7fd      	b.n	80057ce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d103      	bne.n	80057e0 <xQueueReceive+0x44>
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <xQueueReceive+0x48>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <xQueueReceive+0x4a>
 80057e4:	2300      	movs	r3, #0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <xQueueReceive+0x6a>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ee:	b672      	cpsid	i
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	b662      	cpsie	i
 80057fe:	61fb      	str	r3, [r7, #28]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005806:	f001 f9bb 	bl	8006b80 <xTaskGetSchedulerState>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <xQueueReceive+0x7a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <xQueueReceive+0x7e>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <xQueueReceive+0x80>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <xQueueReceive+0xa0>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	b672      	cpsid	i
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	b662      	cpsie	i
 8005834:	61bb      	str	r3, [r7, #24]
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800583c:	f001 fffe 	bl	800783c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01f      	beq.n	800588c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800584c:	68b9      	ldr	r1, [r7, #8]
 800584e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005850:	f000 fa26 	bl	8005ca0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	1e5a      	subs	r2, r3, #1
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800585c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00f      	beq.n	8005884 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	3310      	adds	r3, #16
 8005868:	4618      	mov	r0, r3
 800586a:	f000 ffb1 	bl	80067d0 <xTaskRemoveFromEventList>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005874:	4b3c      	ldr	r3, [pc, #240]	@ (8005968 <xQueueReceive+0x1cc>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005884:	f002 f810 	bl	80078a8 <vPortExitCritical>
				return pdPASS;
 8005888:	2301      	movs	r3, #1
 800588a:	e069      	b.n	8005960 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005892:	f002 f809 	bl	80078a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005896:	2300      	movs	r3, #0
 8005898:	e062      	b.n	8005960 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800589a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058a0:	f107 0310 	add.w	r3, r7, #16
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fff9 	bl	800689c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058aa:	2301      	movs	r3, #1
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ae:	f001 fffb 	bl	80078a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058b2:	f000 fd4b 	bl	800634c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058b6:	f001 ffc1 	bl	800783c <vPortEnterCritical>
 80058ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058c0:	b25b      	sxtb	r3, r3
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c6:	d103      	bne.n	80058d0 <xQueueReceive+0x134>
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058d6:	b25b      	sxtb	r3, r3
 80058d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058dc:	d103      	bne.n	80058e6 <xQueueReceive+0x14a>
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058e6:	f001 ffdf 	bl	80078a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058ea:	1d3a      	adds	r2, r7, #4
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	4611      	mov	r1, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 ffe8 	bl	80068c8 <xTaskCheckForTimeOut>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d123      	bne.n	8005946 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005900:	f000 fa46 	bl	8005d90 <prvIsQueueEmpty>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d017      	beq.n	800593a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800590a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590c:	3324      	adds	r3, #36	@ 0x24
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4611      	mov	r1, r2
 8005912:	4618      	mov	r0, r3
 8005914:	f000 ff06 	bl	8006724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005918:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800591a:	f000 f9e7 	bl	8005cec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800591e:	f000 fd23 	bl	8006368 <xTaskResumeAll>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d189      	bne.n	800583c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005928:	4b0f      	ldr	r3, [pc, #60]	@ (8005968 <xQueueReceive+0x1cc>)
 800592a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	e780      	b.n	800583c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800593a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800593c:	f000 f9d6 	bl	8005cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005940:	f000 fd12 	bl	8006368 <xTaskResumeAll>
 8005944:	e77a      	b.n	800583c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005946:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005948:	f000 f9d0 	bl	8005cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800594c:	f000 fd0c 	bl	8006368 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005950:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005952:	f000 fa1d 	bl	8005d90 <prvIsQueueEmpty>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	f43f af6f 	beq.w	800583c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800595e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005960:	4618      	mov	r0, r3
 8005962:	3730      	adds	r7, #48	@ 0x30
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08e      	sub	sp, #56	@ 0x38
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005976:	2300      	movs	r3, #0
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10d      	bne.n	80059a4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	b672      	cpsid	i
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	b662      	cpsie	i
 800599c:	623b      	str	r3, [r7, #32]
}
 800599e:	bf00      	nop
 80059a0:	bf00      	nop
 80059a2:	e7fd      	b.n	80059a0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b0:	b672      	cpsid	i
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	b662      	cpsie	i
 80059c0:	61fb      	str	r3, [r7, #28]
}
 80059c2:	bf00      	nop
 80059c4:	bf00      	nop
 80059c6:	e7fd      	b.n	80059c4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059c8:	f001 f8da 	bl	8006b80 <xTaskGetSchedulerState>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d102      	bne.n	80059d8 <xQueueSemaphoreTake+0x6c>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <xQueueSemaphoreTake+0x70>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <xQueueSemaphoreTake+0x72>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10d      	bne.n	80059fe <xQueueSemaphoreTake+0x92>
	__asm volatile
 80059e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e6:	b672      	cpsid	i
 80059e8:	f383 8811 	msr	BASEPRI, r3
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	b662      	cpsie	i
 80059f6:	61bb      	str	r3, [r7, #24]
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	e7fd      	b.n	80059fa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059fe:	f001 ff1d 	bl	800783c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a06:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d024      	beq.n	8005a58 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a1e:	f001 fa31 	bl	8006e84 <pvTaskIncrementMutexHeldCount>
 8005a22:	4602      	mov	r2, r0
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00f      	beq.n	8005a50 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a32:	3310      	adds	r3, #16
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fecb 	bl	80067d0 <xTaskRemoveFromEventList>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a40:	4b55      	ldr	r3, [pc, #340]	@ (8005b98 <xQueueSemaphoreTake+0x22c>)
 8005a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a46:	601a      	str	r2, [r3, #0]
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a50:	f001 ff2a 	bl	80078a8 <vPortExitCritical>
				return pdPASS;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e09a      	b.n	8005b8e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d114      	bne.n	8005a88 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a68:	b672      	cpsid	i
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	b662      	cpsie	i
 8005a78:	617b      	str	r3, [r7, #20]
}
 8005a7a:	bf00      	nop
 8005a7c:	bf00      	nop
 8005a7e:	e7fd      	b.n	8005a7c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a80:	f001 ff12 	bl	80078a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a84:	2300      	movs	r3, #0
 8005a86:	e082      	b.n	8005b8e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a8e:	f107 030c 	add.w	r3, r7, #12
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 ff02 	bl	800689c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a9c:	f001 ff04 	bl	80078a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa0:	f000 fc54 	bl	800634c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa4:	f001 feca 	bl	800783c <vPortEnterCritical>
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <xQueueSemaphoreTake+0x152>
 8005ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d103      	bne.n	8005ad4 <xQueueSemaphoreTake+0x168>
 8005acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad4:	f001 fee8 	bl	80078a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ad8:	463a      	mov	r2, r7
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fef1 	bl	80068c8 <xTaskCheckForTimeOut>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d132      	bne.n	8005b52 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005aee:	f000 f94f 	bl	8005d90 <prvIsQueueEmpty>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d026      	beq.n	8005b46 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005b00:	f001 fe9c 	bl	800783c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 f857 	bl	8006bbc <xTaskPriorityInherit>
 8005b0e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005b10:	f001 feca 	bl	80078a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b16:	3324      	adds	r3, #36	@ 0x24
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	4611      	mov	r1, r2
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fe01 	bl	8006724 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b24:	f000 f8e2 	bl	8005cec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b28:	f000 fc1e 	bl	8006368 <xTaskResumeAll>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f47f af65 	bne.w	80059fe <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005b34:	4b18      	ldr	r3, [pc, #96]	@ (8005b98 <xQueueSemaphoreTake+0x22c>)
 8005b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	e75b      	b.n	80059fe <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b48:	f000 f8d0 	bl	8005cec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b4c:	f000 fc0c 	bl	8006368 <xTaskResumeAll>
 8005b50:	e755      	b.n	80059fe <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b54:	f000 f8ca 	bl	8005cec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b58:	f000 fc06 	bl	8006368 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b5e:	f000 f917 	bl	8005d90 <prvIsQueueEmpty>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f43f af4a 	beq.w	80059fe <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005b70:	f001 fe64 	bl	800783c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b76:	f000 f811 	bl	8005b9c <prvGetDisinheritPriorityAfterTimeout>
 8005b7a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f8f6 	bl	8006d74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b88:	f001 fe8e 	bl	80078a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3738      	adds	r7, #56	@ 0x38
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d006      	beq.n	8005bba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	e001      	b.n	8005bbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
	}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10d      	bne.n	8005c06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d14d      	bne.n	8005c8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f001 f848 	bl	8006c8c <xTaskPriorityDisinherit>
 8005bfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	e043      	b.n	8005c8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d119      	bne.n	8005c40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6858      	ldr	r0, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c14:	461a      	mov	r2, r3
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	f002 f954 	bl	8007ec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c24:	441a      	add	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d32b      	bcc.n	8005c8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]
 8005c3e:	e026      	b.n	8005c8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68d8      	ldr	r0, [r3, #12]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	f002 f93a 	bl	8007ec4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	425b      	negs	r3, r3
 8005c5a:	441a      	add	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	68da      	ldr	r2, [r3, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d207      	bcs.n	8005c7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c74:	425b      	negs	r3, r3
 8005c76:	441a      	add	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d105      	bne.n	8005c8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005c96:	697b      	ldr	r3, [r7, #20]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d018      	beq.n	8005ce4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	441a      	add	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d303      	bcc.n	8005cd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68d9      	ldr	r1, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6838      	ldr	r0, [r7, #0]
 8005ce0:	f002 f8f0 	bl	8007ec4 <memcpy>
	}
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cf4:	f001 fda2 	bl	800783c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d00:	e011      	b.n	8005d26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d012      	beq.n	8005d30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3324      	adds	r3, #36	@ 0x24
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fd5e 	bl	80067d0 <xTaskRemoveFromEventList>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d1a:	f000 fe3d 	bl	8006998 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dce9      	bgt.n	8005d02 <prvUnlockQueue+0x16>
 8005d2e:	e000      	b.n	8005d32 <prvUnlockQueue+0x46>
					break;
 8005d30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	22ff      	movs	r2, #255	@ 0xff
 8005d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005d3a:	f001 fdb5 	bl	80078a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d3e:	f001 fd7d 	bl	800783c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d4a:	e011      	b.n	8005d70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d012      	beq.n	8005d7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3310      	adds	r3, #16
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fd39 	bl	80067d0 <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d64:	f000 fe18 	bl	8006998 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dce9      	bgt.n	8005d4c <prvUnlockQueue+0x60>
 8005d78:	e000      	b.n	8005d7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	22ff      	movs	r2, #255	@ 0xff
 8005d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005d84:	f001 fd90 	bl	80078a8 <vPortExitCritical>
}
 8005d88:	bf00      	nop
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d98:	f001 fd50 	bl	800783c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005da4:	2301      	movs	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e001      	b.n	8005dae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dae:	f001 fd7b 	bl	80078a8 <vPortExitCritical>

	return xReturn;
 8005db2:	68fb      	ldr	r3, [r7, #12]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dc4:	f001 fd3a 	bl	800783c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d102      	bne.n	8005dda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e001      	b.n	8005dde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dde:	f001 fd63 	bl	80078a8 <vPortExitCritical>

	return xReturn;
 8005de2:	68fb      	ldr	r3, [r7, #12]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
 8005dfa:	e014      	b.n	8005e26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dfc:	4a0f      	ldr	r2, [pc, #60]	@ (8005e3c <vQueueAddToRegistry+0x50>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e08:	490c      	ldr	r1, [pc, #48]	@ (8005e3c <vQueueAddToRegistry+0x50>)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e12:	4a0a      	ldr	r2, [pc, #40]	@ (8005e3c <vQueueAddToRegistry+0x50>)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e1e:	e006      	b.n	8005e2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b07      	cmp	r3, #7
 8005e2a:	d9e7      	bls.n	8005dfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	20000ee8 	.word	0x20000ee8

08005e40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e50:	f001 fcf4 	bl	800783c <vPortEnterCritical>
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e5a:	b25b      	sxtb	r3, r3
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d103      	bne.n	8005e6a <vQueueWaitForMessageRestricted+0x2a>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e70:	b25b      	sxtb	r3, r3
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e76:	d103      	bne.n	8005e80 <vQueueWaitForMessageRestricted+0x40>
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e80:	f001 fd12 	bl	80078a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d106      	bne.n	8005e9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	3324      	adds	r3, #36	@ 0x24
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	68b9      	ldr	r1, [r7, #8]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 fc6d 	bl	8006774 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f7ff ff26 	bl	8005cec <prvUnlockQueue>
	}
 8005ea0:	bf00      	nop
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08e      	sub	sp, #56	@ 0x38
 8005eac:	af04      	add	r7, sp, #16
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10d      	bne.n	8005ed8 <xTaskCreateStatic+0x30>
	__asm volatile
 8005ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec0:	b672      	cpsid	i
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	b662      	cpsie	i
 8005ed0:	623b      	str	r3, [r7, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <xTaskCreateStatic+0x52>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee2:	b672      	cpsid	i
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	b662      	cpsie	i
 8005ef2:	61fb      	str	r3, [r7, #28]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005efa:	235c      	movs	r3, #92	@ 0x5c
 8005efc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f02:	d00d      	beq.n	8005f20 <xTaskCreateStatic+0x78>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	b672      	cpsid	i
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	b662      	cpsie	i
 8005f18:	61bb      	str	r3, [r7, #24]
}
 8005f1a:	bf00      	nop
 8005f1c:	bf00      	nop
 8005f1e:	e7fd      	b.n	8005f1c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01e      	beq.n	8005f66 <xTaskCreateStatic+0xbe>
 8005f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01b      	beq.n	8005f66 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f40:	2300      	movs	r3, #0
 8005f42:	9303      	str	r3, [sp, #12]
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	f107 0314 	add.w	r3, r7, #20
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 f850 	bl	8005ffe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f60:	f000 f8e0 	bl	8006124 <prvAddNewTaskToReadyList>
 8005f64:	e001      	b.n	8005f6a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f6a:	697b      	ldr	r3, [r7, #20]
	}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3728      	adds	r7, #40	@ 0x28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08c      	sub	sp, #48	@ 0x30
 8005f78:	af04      	add	r7, sp, #16
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f84:	88fb      	ldrh	r3, [r7, #6]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fd85 	bl	8007a98 <pvPortMalloc>
 8005f8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00e      	beq.n	8005fb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f96:	205c      	movs	r0, #92	@ 0x5c
 8005f98:	f001 fd7e 	bl	8007a98 <pvPortMalloc>
 8005f9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005faa:	e005      	b.n	8005fb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fac:	6978      	ldr	r0, [r7, #20]
 8005fae:	f001 fe41 	bl	8007c34 <vPortFree>
 8005fb2:	e001      	b.n	8005fb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d017      	beq.n	8005fee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	9303      	str	r3, [sp, #12]
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	9302      	str	r3, [sp, #8]
 8005fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68b9      	ldr	r1, [r7, #8]
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f80e 	bl	8005ffe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe2:	69f8      	ldr	r0, [r7, #28]
 8005fe4:	f000 f89e 	bl	8006124 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e002      	b.n	8005ff4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b088      	sub	sp, #32
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	461a      	mov	r2, r3
 8006016:	21a5      	movs	r1, #165	@ 0xa5
 8006018:	f001 ff28 	bl	8007e6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006026:	440b      	add	r3, r1
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f023 0307 	bic.w	r3, r3, #7
 8006034:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00d      	beq.n	800605c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	b672      	cpsid	i
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	b662      	cpsie	i
 8006054:	617b      	str	r3, [r7, #20]
}
 8006056:	bf00      	nop
 8006058:	bf00      	nop
 800605a:	e7fd      	b.n	8006058 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01f      	beq.n	80060a2 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
 8006066:	e012      	b.n	800608e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	7819      	ldrb	r1, [r3, #0]
 8006070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	3334      	adds	r3, #52	@ 0x34
 8006078:	460a      	mov	r2, r1
 800607a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d006      	beq.n	8006096 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	3301      	adds	r3, #1
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	2b0f      	cmp	r3, #15
 8006092:	d9e9      	bls.n	8006068 <prvInitialiseNewTask+0x6a>
 8006094:	e000      	b.n	8006098 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006096:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060a0:	e003      	b.n	80060aa <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ac:	2b37      	cmp	r3, #55	@ 0x37
 80060ae:	d901      	bls.n	80060b4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060b0:	2337      	movs	r3, #55	@ 0x37
 80060b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060be:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c2:	2200      	movs	r2, #0
 80060c4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	3304      	adds	r3, #4
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe ff0e 	bl	8004eec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	3318      	adds	r3, #24
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe ff09 	bl	8004eec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ee:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f2:	2200      	movs	r2, #0
 80060f4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	68f9      	ldr	r1, [r7, #12]
 8006102:	69b8      	ldr	r0, [r7, #24]
 8006104:	f001 fa8e 	bl	8007624 <pxPortInitialiseStack>
 8006108:	4602      	mov	r2, r0
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800610e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800611a:	bf00      	nop
 800611c:	3720      	adds	r7, #32
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800612c:	f001 fb86 	bl	800783c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006130:	4b2d      	ldr	r3, [pc, #180]	@ (80061e8 <prvAddNewTaskToReadyList+0xc4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3301      	adds	r3, #1
 8006136:	4a2c      	ldr	r2, [pc, #176]	@ (80061e8 <prvAddNewTaskToReadyList+0xc4>)
 8006138:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800613a:	4b2c      	ldr	r3, [pc, #176]	@ (80061ec <prvAddNewTaskToReadyList+0xc8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d109      	bne.n	8006156 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006142:	4a2a      	ldr	r2, [pc, #168]	@ (80061ec <prvAddNewTaskToReadyList+0xc8>)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006148:	4b27      	ldr	r3, [pc, #156]	@ (80061e8 <prvAddNewTaskToReadyList+0xc4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d110      	bne.n	8006172 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006150:	f000 fc46 	bl	80069e0 <prvInitialiseTaskLists>
 8006154:	e00d      	b.n	8006172 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006156:	4b26      	ldr	r3, [pc, #152]	@ (80061f0 <prvAddNewTaskToReadyList+0xcc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800615e:	4b23      	ldr	r3, [pc, #140]	@ (80061ec <prvAddNewTaskToReadyList+0xc8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	429a      	cmp	r2, r3
 800616a:	d802      	bhi.n	8006172 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800616c:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <prvAddNewTaskToReadyList+0xc8>)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006172:	4b20      	ldr	r3, [pc, #128]	@ (80061f4 <prvAddNewTaskToReadyList+0xd0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3301      	adds	r3, #1
 8006178:	4a1e      	ldr	r2, [pc, #120]	@ (80061f4 <prvAddNewTaskToReadyList+0xd0>)
 800617a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800617c:	4b1d      	ldr	r3, [pc, #116]	@ (80061f4 <prvAddNewTaskToReadyList+0xd0>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	4b1b      	ldr	r3, [pc, #108]	@ (80061f8 <prvAddNewTaskToReadyList+0xd4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d903      	bls.n	8006198 <prvAddNewTaskToReadyList+0x74>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	4a18      	ldr	r2, [pc, #96]	@ (80061f8 <prvAddNewTaskToReadyList+0xd4>)
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	4a15      	ldr	r2, [pc, #84]	@ (80061fc <prvAddNewTaskToReadyList+0xd8>)
 80061a6:	441a      	add	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f7fe fea9 	bl	8004f06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061b4:	f001 fb78 	bl	80078a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061b8:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <prvAddNewTaskToReadyList+0xcc>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00e      	beq.n	80061de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061c0:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <prvAddNewTaskToReadyList+0xc8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d207      	bcs.n	80061de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006200 <prvAddNewTaskToReadyList+0xdc>)
 80061d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	200013fc 	.word	0x200013fc
 80061ec:	20000f28 	.word	0x20000f28
 80061f0:	20001408 	.word	0x20001408
 80061f4:	20001418 	.word	0x20001418
 80061f8:	20001404 	.word	0x20001404
 80061fc:	20000f2c 	.word	0x20000f2c
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01a      	beq.n	800624c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006216:	4b15      	ldr	r3, [pc, #84]	@ (800626c <vTaskDelay+0x68>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00d      	beq.n	800623a <vTaskDelay+0x36>
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	b672      	cpsid	i
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	b662      	cpsie	i
 8006232:	60bb      	str	r3, [r7, #8]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800623a:	f000 f887 	bl	800634c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800623e:	2100      	movs	r1, #0
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fe33 	bl	8006eac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006246:	f000 f88f 	bl	8006368 <xTaskResumeAll>
 800624a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006252:	4b07      	ldr	r3, [pc, #28]	@ (8006270 <vTaskDelay+0x6c>)
 8006254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20001424 	.word	0x20001424
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	@ 0x28
 8006278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006282:	463a      	mov	r2, r7
 8006284:	1d39      	adds	r1, r7, #4
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe fdda 	bl	8004e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	9202      	str	r2, [sp, #8]
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	2300      	movs	r3, #0
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	2300      	movs	r3, #0
 80062a0:	460a      	mov	r2, r1
 80062a2:	4924      	ldr	r1, [pc, #144]	@ (8006334 <vTaskStartScheduler+0xc0>)
 80062a4:	4824      	ldr	r0, [pc, #144]	@ (8006338 <vTaskStartScheduler+0xc4>)
 80062a6:	f7ff fdff 	bl	8005ea8 <xTaskCreateStatic>
 80062aa:	4603      	mov	r3, r0
 80062ac:	4a23      	ldr	r2, [pc, #140]	@ (800633c <vTaskStartScheduler+0xc8>)
 80062ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062b0:	4b22      	ldr	r3, [pc, #136]	@ (800633c <vTaskStartScheduler+0xc8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062b8:	2301      	movs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e001      	b.n	80062c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d102      	bne.n	80062ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062c8:	f000 fe44 	bl	8006f54 <xTimerCreateTimerTask>
 80062cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d118      	bne.n	8006306 <vTaskStartScheduler+0x92>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	b672      	cpsid	i
 80062da:	f383 8811 	msr	BASEPRI, r3
 80062de:	f3bf 8f6f 	isb	sy
 80062e2:	f3bf 8f4f 	dsb	sy
 80062e6:	b662      	cpsie	i
 80062e8:	613b      	str	r3, [r7, #16]
}
 80062ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062ec:	4b14      	ldr	r3, [pc, #80]	@ (8006340 <vTaskStartScheduler+0xcc>)
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295
 80062f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062f4:	4b13      	ldr	r3, [pc, #76]	@ (8006344 <vTaskStartScheduler+0xd0>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062fa:	4b13      	ldr	r3, [pc, #76]	@ (8006348 <vTaskStartScheduler+0xd4>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006300:	f001 fa1e 	bl	8007740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006304:	e011      	b.n	800632a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630c:	d10d      	bne.n	800632a <vTaskStartScheduler+0xb6>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	b672      	cpsid	i
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	b662      	cpsie	i
 8006322:	60fb      	str	r3, [r7, #12]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <vTaskStartScheduler+0xb2>
}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	08007f8c 	.word	0x08007f8c
 8006338:	080069b1 	.word	0x080069b1
 800633c:	20001420 	.word	0x20001420
 8006340:	2000141c 	.word	0x2000141c
 8006344:	20001408 	.word	0x20001408
 8006348:	20001400 	.word	0x20001400

0800634c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006350:	4b04      	ldr	r3, [pc, #16]	@ (8006364 <vTaskSuspendAll+0x18>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3301      	adds	r3, #1
 8006356:	4a03      	ldr	r2, [pc, #12]	@ (8006364 <vTaskSuspendAll+0x18>)
 8006358:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800635a:	bf00      	nop
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	20001424 	.word	0x20001424

08006368 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006372:	2300      	movs	r3, #0
 8006374:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006376:	4b43      	ldr	r3, [pc, #268]	@ (8006484 <xTaskResumeAll+0x11c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10d      	bne.n	800639a <xTaskResumeAll+0x32>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	b672      	cpsid	i
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	b662      	cpsie	i
 8006392:	603b      	str	r3, [r7, #0]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800639a:	f001 fa4f 	bl	800783c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800639e:	4b39      	ldr	r3, [pc, #228]	@ (8006484 <xTaskResumeAll+0x11c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	4a37      	ldr	r2, [pc, #220]	@ (8006484 <xTaskResumeAll+0x11c>)
 80063a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063a8:	4b36      	ldr	r3, [pc, #216]	@ (8006484 <xTaskResumeAll+0x11c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d162      	bne.n	8006476 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063b0:	4b35      	ldr	r3, [pc, #212]	@ (8006488 <xTaskResumeAll+0x120>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d05e      	beq.n	8006476 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063b8:	e02f      	b.n	800641a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ba:	4b34      	ldr	r3, [pc, #208]	@ (800648c <xTaskResumeAll+0x124>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3318      	adds	r3, #24
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fdfa 	bl	8004fc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fdf5 	bl	8004fc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063da:	4b2d      	ldr	r3, [pc, #180]	@ (8006490 <xTaskResumeAll+0x128>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d903      	bls.n	80063ea <xTaskResumeAll+0x82>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006490 <xTaskResumeAll+0x128>)
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4a27      	ldr	r2, [pc, #156]	@ (8006494 <xTaskResumeAll+0x12c>)
 80063f8:	441a      	add	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fe fd80 	bl	8004f06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640a:	4b23      	ldr	r3, [pc, #140]	@ (8006498 <xTaskResumeAll+0x130>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	429a      	cmp	r2, r3
 8006412:	d302      	bcc.n	800641a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006414:	4b21      	ldr	r3, [pc, #132]	@ (800649c <xTaskResumeAll+0x134>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800641a:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <xTaskResumeAll+0x124>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1cb      	bne.n	80063ba <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006428:	f000 fb7a 	bl	8006b20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800642c:	4b1c      	ldr	r3, [pc, #112]	@ (80064a0 <xTaskResumeAll+0x138>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d010      	beq.n	800645a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006438:	f000 f858 	bl	80064ec <xTaskIncrementTick>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006442:	4b16      	ldr	r3, [pc, #88]	@ (800649c <xTaskResumeAll+0x134>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3b01      	subs	r3, #1
 800644c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f1      	bne.n	8006438 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006454:	4b12      	ldr	r3, [pc, #72]	@ (80064a0 <xTaskResumeAll+0x138>)
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800645a:	4b10      	ldr	r3, [pc, #64]	@ (800649c <xTaskResumeAll+0x134>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006466:	4b0f      	ldr	r3, [pc, #60]	@ (80064a4 <xTaskResumeAll+0x13c>)
 8006468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006476:	f001 fa17 	bl	80078a8 <vPortExitCritical>

	return xAlreadyYielded;
 800647a:	68bb      	ldr	r3, [r7, #8]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20001424 	.word	0x20001424
 8006488:	200013fc 	.word	0x200013fc
 800648c:	200013bc 	.word	0x200013bc
 8006490:	20001404 	.word	0x20001404
 8006494:	20000f2c 	.word	0x20000f2c
 8006498:	20000f28 	.word	0x20000f28
 800649c:	20001410 	.word	0x20001410
 80064a0:	2000140c 	.word	0x2000140c
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064ae:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <xTaskGetTickCount+0x1c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064b4:	687b      	ldr	r3, [r7, #4]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	20001400 	.word	0x20001400

080064c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064ce:	f001 fa9d 	bl	8007a0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80064d6:	4b04      	ldr	r3, [pc, #16]	@ (80064e8 <xTaskGetTickCountFromISR+0x20>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064dc:	683b      	ldr	r3, [r7, #0]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20001400 	.word	0x20001400

080064ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064f6:	4b50      	ldr	r3, [pc, #320]	@ (8006638 <xTaskIncrementTick+0x14c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 808c 	bne.w	8006618 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006500:	4b4e      	ldr	r3, [pc, #312]	@ (800663c <xTaskIncrementTick+0x150>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006508:	4a4c      	ldr	r2, [pc, #304]	@ (800663c <xTaskIncrementTick+0x150>)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d123      	bne.n	800655c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006514:	4b4a      	ldr	r3, [pc, #296]	@ (8006640 <xTaskIncrementTick+0x154>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00d      	beq.n	800653a <xTaskIncrementTick+0x4e>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	b672      	cpsid	i
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	b662      	cpsie	i
 8006532:	603b      	str	r3, [r7, #0]
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	e7fd      	b.n	8006536 <xTaskIncrementTick+0x4a>
 800653a:	4b41      	ldr	r3, [pc, #260]	@ (8006640 <xTaskIncrementTick+0x154>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]
 8006540:	4b40      	ldr	r3, [pc, #256]	@ (8006644 <xTaskIncrementTick+0x158>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a3e      	ldr	r2, [pc, #248]	@ (8006640 <xTaskIncrementTick+0x154>)
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	4a3e      	ldr	r2, [pc, #248]	@ (8006644 <xTaskIncrementTick+0x158>)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	4b3e      	ldr	r3, [pc, #248]	@ (8006648 <xTaskIncrementTick+0x15c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3301      	adds	r3, #1
 8006554:	4a3c      	ldr	r2, [pc, #240]	@ (8006648 <xTaskIncrementTick+0x15c>)
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	f000 fae2 	bl	8006b20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800655c:	4b3b      	ldr	r3, [pc, #236]	@ (800664c <xTaskIncrementTick+0x160>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	429a      	cmp	r2, r3
 8006564:	d349      	bcc.n	80065fa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006566:	4b36      	ldr	r3, [pc, #216]	@ (8006640 <xTaskIncrementTick+0x154>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006570:	4b36      	ldr	r3, [pc, #216]	@ (800664c <xTaskIncrementTick+0x160>)
 8006572:	f04f 32ff 	mov.w	r2, #4294967295
 8006576:	601a      	str	r2, [r3, #0]
					break;
 8006578:	e03f      	b.n	80065fa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657a:	4b31      	ldr	r3, [pc, #196]	@ (8006640 <xTaskIncrementTick+0x154>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d203      	bcs.n	800659a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006592:	4a2e      	ldr	r2, [pc, #184]	@ (800664c <xTaskIncrementTick+0x160>)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006598:	e02f      	b.n	80065fa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	3304      	adds	r3, #4
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fd0e 	bl	8004fc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d004      	beq.n	80065b6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	3318      	adds	r3, #24
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe fd05 	bl	8004fc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ba:	4b25      	ldr	r3, [pc, #148]	@ (8006650 <xTaskIncrementTick+0x164>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d903      	bls.n	80065ca <xTaskIncrementTick+0xde>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c6:	4a22      	ldr	r2, [pc, #136]	@ (8006650 <xTaskIncrementTick+0x164>)
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4a1f      	ldr	r2, [pc, #124]	@ (8006654 <xTaskIncrementTick+0x168>)
 80065d8:	441a      	add	r2, r3
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3304      	adds	r3, #4
 80065de:	4619      	mov	r1, r3
 80065e0:	4610      	mov	r0, r2
 80065e2:	f7fe fc90 	bl	8004f06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006658 <xTaskIncrementTick+0x16c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d3b8      	bcc.n	8006566 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065f8:	e7b5      	b.n	8006566 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065fa:	4b17      	ldr	r3, [pc, #92]	@ (8006658 <xTaskIncrementTick+0x16c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006600:	4914      	ldr	r1, [pc, #80]	@ (8006654 <xTaskIncrementTick+0x168>)
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d907      	bls.n	8006622 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006612:	2301      	movs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e004      	b.n	8006622 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006618:	4b10      	ldr	r3, [pc, #64]	@ (800665c <xTaskIncrementTick+0x170>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	4a0f      	ldr	r2, [pc, #60]	@ (800665c <xTaskIncrementTick+0x170>)
 8006620:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006622:	4b0f      	ldr	r3, [pc, #60]	@ (8006660 <xTaskIncrementTick+0x174>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800662a:	2301      	movs	r3, #1
 800662c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800662e:	697b      	ldr	r3, [r7, #20]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3718      	adds	r7, #24
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20001424 	.word	0x20001424
 800663c:	20001400 	.word	0x20001400
 8006640:	200013b4 	.word	0x200013b4
 8006644:	200013b8 	.word	0x200013b8
 8006648:	20001414 	.word	0x20001414
 800664c:	2000141c 	.word	0x2000141c
 8006650:	20001404 	.word	0x20001404
 8006654:	20000f2c 	.word	0x20000f2c
 8006658:	20000f28 	.word	0x20000f28
 800665c:	2000140c 	.word	0x2000140c
 8006660:	20001410 	.word	0x20001410

08006664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800666a:	4b29      	ldr	r3, [pc, #164]	@ (8006710 <vTaskSwitchContext+0xac>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006672:	4b28      	ldr	r3, [pc, #160]	@ (8006714 <vTaskSwitchContext+0xb0>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006678:	e044      	b.n	8006704 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800667a:	4b26      	ldr	r3, [pc, #152]	@ (8006714 <vTaskSwitchContext+0xb0>)
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006680:	4b25      	ldr	r3, [pc, #148]	@ (8006718 <vTaskSwitchContext+0xb4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	e013      	b.n	80066b0 <vTaskSwitchContext+0x4c>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10d      	bne.n	80066aa <vTaskSwitchContext+0x46>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	b672      	cpsid	i
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	b662      	cpsie	i
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <vTaskSwitchContext+0x42>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	491a      	ldr	r1, [pc, #104]	@ (800671c <vTaskSwitchContext+0xb8>)
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0e1      	beq.n	8006688 <vTaskSwitchContext+0x24>
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4a13      	ldr	r2, [pc, #76]	@ (800671c <vTaskSwitchContext+0xb8>)
 80066d0:	4413      	add	r3, r2
 80066d2:	60bb      	str	r3, [r7, #8]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	3308      	adds	r3, #8
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d104      	bne.n	80066f4 <vTaskSwitchContext+0x90>
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	605a      	str	r2, [r3, #4]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	4a09      	ldr	r2, [pc, #36]	@ (8006720 <vTaskSwitchContext+0xbc>)
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	4a06      	ldr	r2, [pc, #24]	@ (8006718 <vTaskSwitchContext+0xb4>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6013      	str	r3, [r2, #0]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20001424 	.word	0x20001424
 8006714:	20001410 	.word	0x20001410
 8006718:	20001404 	.word	0x20001404
 800671c:	20000f2c 	.word	0x20000f2c
 8006720:	20000f28 	.word	0x20000f28

08006724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10d      	bne.n	8006750 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	b672      	cpsid	i
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	b662      	cpsie	i
 8006748:	60fb      	str	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	bf00      	nop
 800674e:	e7fd      	b.n	800674c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <vTaskPlaceOnEventList+0x4c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3318      	adds	r3, #24
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fe fbf8 	bl	8004f4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800675e:	2101      	movs	r1, #1
 8006760:	6838      	ldr	r0, [r7, #0]
 8006762:	f000 fba3 	bl	8006eac <prvAddCurrentTaskToDelayedList>
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000f28 	.word	0x20000f28

08006774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10d      	bne.n	80067a2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678a:	b672      	cpsid	i
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	b662      	cpsie	i
 800679a:	617b      	str	r3, [r7, #20]
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	e7fd      	b.n	800679e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067a2:	4b0a      	ldr	r3, [pc, #40]	@ (80067cc <vTaskPlaceOnEventListRestricted+0x58>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3318      	adds	r3, #24
 80067a8:	4619      	mov	r1, r3
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7fe fbab 	bl	8004f06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	68b8      	ldr	r0, [r7, #8]
 80067c0:	f000 fb74 	bl	8006eac <prvAddCurrentTaskToDelayedList>
	}
 80067c4:	bf00      	nop
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20000f28 	.word	0x20000f28

080067d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10d      	bne.n	8006802 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	b672      	cpsid	i
 80067ec:	f383 8811 	msr	BASEPRI, r3
 80067f0:	f3bf 8f6f 	isb	sy
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	b662      	cpsie	i
 80067fa:	60fb      	str	r3, [r7, #12]
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	e7fd      	b.n	80067fe <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	3318      	adds	r3, #24
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fbda 	bl	8004fc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800680c:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <xTaskRemoveFromEventList+0xb4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11d      	bne.n	8006850 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	3304      	adds	r3, #4
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fbd1 	bl	8004fc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006822:	4b19      	ldr	r3, [pc, #100]	@ (8006888 <xTaskRemoveFromEventList+0xb8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	429a      	cmp	r2, r3
 8006828:	d903      	bls.n	8006832 <xTaskRemoveFromEventList+0x62>
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682e:	4a16      	ldr	r2, [pc, #88]	@ (8006888 <xTaskRemoveFromEventList+0xb8>)
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006836:	4613      	mov	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4a13      	ldr	r2, [pc, #76]	@ (800688c <xTaskRemoveFromEventList+0xbc>)
 8006840:	441a      	add	r2, r3
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fe fb5c 	bl	8004f06 <vListInsertEnd>
 800684e:	e005      	b.n	800685c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	3318      	adds	r3, #24
 8006854:	4619      	mov	r1, r3
 8006856:	480e      	ldr	r0, [pc, #56]	@ (8006890 <xTaskRemoveFromEventList+0xc0>)
 8006858:	f7fe fb55 	bl	8004f06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006860:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <xTaskRemoveFromEventList+0xc4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006866:	429a      	cmp	r2, r3
 8006868:	d905      	bls.n	8006876 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800686a:	2301      	movs	r3, #1
 800686c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800686e:	4b0a      	ldr	r3, [pc, #40]	@ (8006898 <xTaskRemoveFromEventList+0xc8>)
 8006870:	2201      	movs	r2, #1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	e001      	b.n	800687a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800687a:	697b      	ldr	r3, [r7, #20]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20001424 	.word	0x20001424
 8006888:	20001404 	.word	0x20001404
 800688c:	20000f2c 	.word	0x20000f2c
 8006890:	200013bc 	.word	0x200013bc
 8006894:	20000f28 	.word	0x20000f28
 8006898:	20001410 	.word	0x20001410

0800689c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068a4:	4b06      	ldr	r3, [pc, #24]	@ (80068c0 <vTaskInternalSetTimeOutState+0x24>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068ac:	4b05      	ldr	r3, [pc, #20]	@ (80068c4 <vTaskInternalSetTimeOutState+0x28>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	605a      	str	r2, [r3, #4]
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20001414 	.word	0x20001414
 80068c4:	20001400 	.word	0x20001400

080068c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10d      	bne.n	80068f4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068dc:	b672      	cpsid	i
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	b662      	cpsie	i
 80068ec:	613b      	str	r3, [r7, #16]
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	e7fd      	b.n	80068f0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fe:	b672      	cpsid	i
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	b662      	cpsie	i
 800690e:	60fb      	str	r3, [r7, #12]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006916:	f000 ff91 	bl	800783c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800691a:	4b1d      	ldr	r3, [pc, #116]	@ (8006990 <xTaskCheckForTimeOut+0xc8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d102      	bne.n	800693a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
 8006938:	e023      	b.n	8006982 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b15      	ldr	r3, [pc, #84]	@ (8006994 <xTaskCheckForTimeOut+0xcc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d007      	beq.n	8006956 <xTaskCheckForTimeOut+0x8e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	429a      	cmp	r2, r3
 800694e:	d302      	bcc.n	8006956 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	e015      	b.n	8006982 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	429a      	cmp	r2, r3
 800695e:	d20b      	bcs.n	8006978 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff95 	bl	800689c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e004      	b.n	8006982 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800697e:	2301      	movs	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006982:	f000 ff91 	bl	80078a8 <vPortExitCritical>

	return xReturn;
 8006986:	69fb      	ldr	r3, [r7, #28]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20001400 	.word	0x20001400
 8006994:	20001414 	.word	0x20001414

08006998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800699c:	4b03      	ldr	r3, [pc, #12]	@ (80069ac <vTaskMissedYield+0x14>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
}
 80069a2:	bf00      	nop
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20001410 	.word	0x20001410

080069b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069b8:	f000 f852 	bl	8006a60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069bc:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <prvIdleTask+0x28>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d9f9      	bls.n	80069b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069c4:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <prvIdleTask+0x2c>)
 80069c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069d4:	e7f0      	b.n	80069b8 <prvIdleTask+0x8>
 80069d6:	bf00      	nop
 80069d8:	20000f2c 	.word	0x20000f2c
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069e6:	2300      	movs	r3, #0
 80069e8:	607b      	str	r3, [r7, #4]
 80069ea:	e00c      	b.n	8006a06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4a12      	ldr	r2, [pc, #72]	@ (8006a40 <prvInitialiseTaskLists+0x60>)
 80069f8:	4413      	add	r3, r2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fa56 	bl	8004eac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3301      	adds	r3, #1
 8006a04:	607b      	str	r3, [r7, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b37      	cmp	r3, #55	@ 0x37
 8006a0a:	d9ef      	bls.n	80069ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a0c:	480d      	ldr	r0, [pc, #52]	@ (8006a44 <prvInitialiseTaskLists+0x64>)
 8006a0e:	f7fe fa4d 	bl	8004eac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a12:	480d      	ldr	r0, [pc, #52]	@ (8006a48 <prvInitialiseTaskLists+0x68>)
 8006a14:	f7fe fa4a 	bl	8004eac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a18:	480c      	ldr	r0, [pc, #48]	@ (8006a4c <prvInitialiseTaskLists+0x6c>)
 8006a1a:	f7fe fa47 	bl	8004eac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a1e:	480c      	ldr	r0, [pc, #48]	@ (8006a50 <prvInitialiseTaskLists+0x70>)
 8006a20:	f7fe fa44 	bl	8004eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a24:	480b      	ldr	r0, [pc, #44]	@ (8006a54 <prvInitialiseTaskLists+0x74>)
 8006a26:	f7fe fa41 	bl	8004eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a58 <prvInitialiseTaskLists+0x78>)
 8006a2c:	4a05      	ldr	r2, [pc, #20]	@ (8006a44 <prvInitialiseTaskLists+0x64>)
 8006a2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a30:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <prvInitialiseTaskLists+0x7c>)
 8006a32:	4a05      	ldr	r2, [pc, #20]	@ (8006a48 <prvInitialiseTaskLists+0x68>)
 8006a34:	601a      	str	r2, [r3, #0]
}
 8006a36:	bf00      	nop
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	20000f2c 	.word	0x20000f2c
 8006a44:	2000138c 	.word	0x2000138c
 8006a48:	200013a0 	.word	0x200013a0
 8006a4c:	200013bc 	.word	0x200013bc
 8006a50:	200013d0 	.word	0x200013d0
 8006a54:	200013e8 	.word	0x200013e8
 8006a58:	200013b4 	.word	0x200013b4
 8006a5c:	200013b8 	.word	0x200013b8

08006a60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a66:	e019      	b.n	8006a9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a68:	f000 fee8 	bl	800783c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a6c:	4b10      	ldr	r3, [pc, #64]	@ (8006ab0 <prvCheckTasksWaitingTermination+0x50>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fe faa1 	bl	8004fc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <prvCheckTasksWaitingTermination+0x54>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	4a0b      	ldr	r2, [pc, #44]	@ (8006ab4 <prvCheckTasksWaitingTermination+0x54>)
 8006a86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a88:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <prvCheckTasksWaitingTermination+0x58>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab8 <prvCheckTasksWaitingTermination+0x58>)
 8006a90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a92:	f000 ff09 	bl	80078a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f810 	bl	8006abc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a9c:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <prvCheckTasksWaitingTermination+0x58>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e1      	bne.n	8006a68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	200013d0 	.word	0x200013d0
 8006ab4:	200013fc 	.word	0x200013fc
 8006ab8:	200013e4 	.word	0x200013e4

08006abc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d108      	bne.n	8006ae0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f001 f8ae 	bl	8007c34 <vPortFree>
				vPortFree( pxTCB );
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 f8ab 	bl	8007c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ade:	e01b      	b.n	8006b18 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d103      	bne.n	8006af2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 f8a2 	bl	8007c34 <vPortFree>
	}
 8006af0:	e012      	b.n	8006b18 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d00d      	beq.n	8006b18 <prvDeleteTCB+0x5c>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	b672      	cpsid	i
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	b662      	cpsie	i
 8006b10:	60fb      	str	r3, [r7, #12]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <prvDeleteTCB+0x58>
	}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b26:	4b0c      	ldr	r3, [pc, #48]	@ (8006b58 <prvResetNextTaskUnblockTime+0x38>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b30:	4b0a      	ldr	r3, [pc, #40]	@ (8006b5c <prvResetNextTaskUnblockTime+0x3c>)
 8006b32:	f04f 32ff 	mov.w	r2, #4294967295
 8006b36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b38:	e008      	b.n	8006b4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b3a:	4b07      	ldr	r3, [pc, #28]	@ (8006b58 <prvResetNextTaskUnblockTime+0x38>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	4a04      	ldr	r2, [pc, #16]	@ (8006b5c <prvResetNextTaskUnblockTime+0x3c>)
 8006b4a:	6013      	str	r3, [r2, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	200013b4 	.word	0x200013b4
 8006b5c:	2000141c 	.word	0x2000141c

08006b60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006b66:	4b05      	ldr	r3, [pc, #20]	@ (8006b7c <xTaskGetCurrentTaskHandle+0x1c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006b6c:	687b      	ldr	r3, [r7, #4]
	}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000f28 	.word	0x20000f28

08006b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b86:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb4 <xTaskGetSchedulerState+0x34>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d102      	bne.n	8006b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	607b      	str	r3, [r7, #4]
 8006b92:	e008      	b.n	8006ba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b94:	4b08      	ldr	r3, [pc, #32]	@ (8006bb8 <xTaskGetSchedulerState+0x38>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	607b      	str	r3, [r7, #4]
 8006ba0:	e001      	b.n	8006ba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ba6:	687b      	ldr	r3, [r7, #4]
	}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20001408 	.word	0x20001408
 8006bb8:	20001424 	.word	0x20001424

08006bbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d051      	beq.n	8006c76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8006c80 <xTaskPriorityInherit+0xc4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d241      	bcs.n	8006c64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	db06      	blt.n	8006bf6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be8:	4b25      	ldr	r3, [pc, #148]	@ (8006c80 <xTaskPriorityInherit+0xc4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	6959      	ldr	r1, [r3, #20]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bfe:	4613      	mov	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4a1f      	ldr	r2, [pc, #124]	@ (8006c84 <xTaskPriorityInherit+0xc8>)
 8006c08:	4413      	add	r3, r2
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	d122      	bne.n	8006c54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	3304      	adds	r3, #4
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe f9d4 	bl	8004fc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c18:	4b19      	ldr	r3, [pc, #100]	@ (8006c80 <xTaskPriorityInherit+0xc4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c26:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <xTaskPriorityInherit+0xcc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d903      	bls.n	8006c36 <xTaskPriorityInherit+0x7a>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c32:	4a15      	ldr	r2, [pc, #84]	@ (8006c88 <xTaskPriorityInherit+0xcc>)
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4a10      	ldr	r2, [pc, #64]	@ (8006c84 <xTaskPriorityInherit+0xc8>)
 8006c44:	441a      	add	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	f7fe f95a 	bl	8004f06 <vListInsertEnd>
 8006c52:	e004      	b.n	8006c5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c54:	4b0a      	ldr	r3, [pc, #40]	@ (8006c80 <xTaskPriorityInherit+0xc4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e008      	b.n	8006c76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c68:	4b05      	ldr	r3, [pc, #20]	@ (8006c80 <xTaskPriorityInherit+0xc4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d201      	bcs.n	8006c76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006c72:	2301      	movs	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c76:	68fb      	ldr	r3, [r7, #12]
	}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3710      	adds	r7, #16
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	20000f28 	.word	0x20000f28
 8006c84:	20000f2c 	.word	0x20000f2c
 8006c88:	20001404 	.word	0x20001404

08006c8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d05c      	beq.n	8006d5c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ca2:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <xTaskPriorityDisinherit+0xdc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d00d      	beq.n	8006cc8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	b672      	cpsid	i
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	b662      	cpsie	i
 8006cc0:	60fb      	str	r3, [r7, #12]
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd4:	b672      	cpsid	i
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	b662      	cpsie	i
 8006ce4:	60bb      	str	r3, [r7, #8]
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	e7fd      	b.n	8006ce8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf0:	1e5a      	subs	r2, r3, #1
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d02c      	beq.n	8006d5c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d128      	bne.n	8006d5c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe f956 	bl	8004fc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d6c <xTaskPriorityDisinherit+0xe0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d903      	bls.n	8006d3c <xTaskPriorityDisinherit+0xb0>
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	4a0c      	ldr	r2, [pc, #48]	@ (8006d6c <xTaskPriorityDisinherit+0xe0>)
 8006d3a:	6013      	str	r3, [r2, #0]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4a09      	ldr	r2, [pc, #36]	@ (8006d70 <xTaskPriorityDisinherit+0xe4>)
 8006d4a:	441a      	add	r2, r3
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	3304      	adds	r3, #4
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f7fe f8d7 	bl	8004f06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d5c:	697b      	ldr	r3, [r7, #20]
	}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000f28 	.word	0x20000f28
 8006d6c:	20001404 	.word	0x20001404
 8006d70:	20000f2c 	.word	0x20000f2c

08006d74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d82:	2301      	movs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d070      	beq.n	8006e6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10d      	bne.n	8006db0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8006d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d98:	b672      	cpsid	i
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	b662      	cpsie	i
 8006da8:	60fb      	str	r3, [r7, #12]
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	e7fd      	b.n	8006dac <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d902      	bls.n	8006dc0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	e002      	b.n	8006dc6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d04e      	beq.n	8006e6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d149      	bne.n	8006e6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006dda:	4b27      	ldr	r3, [pc, #156]	@ (8006e78 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d10d      	bne.n	8006e00 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	b672      	cpsid	i
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	b662      	cpsie	i
 8006df8:	60bb      	str	r3, [r7, #8]
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	db04      	blt.n	8006e1e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	6959      	ldr	r1, [r3, #20]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4a13      	ldr	r2, [pc, #76]	@ (8006e7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006e2e:	4413      	add	r3, r2
 8006e30:	4299      	cmp	r1, r3
 8006e32:	d11c      	bne.n	8006e6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	3304      	adds	r3, #4
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe f8c1 	bl	8004fc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e42:	4b0f      	ldr	r3, [pc, #60]	@ (8006e80 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d903      	bls.n	8006e52 <vTaskPriorityDisinheritAfterTimeout+0xde>
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e80 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4a07      	ldr	r2, [pc, #28]	@ (8006e7c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006e60:	441a      	add	r2, r3
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	3304      	adds	r3, #4
 8006e66:	4619      	mov	r1, r3
 8006e68:	4610      	mov	r0, r2
 8006e6a:	f7fe f84c 	bl	8004f06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e6e:	bf00      	nop
 8006e70:	3720      	adds	r7, #32
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000f28 	.word	0x20000f28
 8006e7c:	20000f2c 	.word	0x20000f2c
 8006e80:	20001404 	.word	0x20001404

08006e84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e88:	4b07      	ldr	r3, [pc, #28]	@ (8006ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e90:	4b05      	ldr	r3, [pc, #20]	@ (8006ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e96:	3201      	adds	r2, #1
 8006e98:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006e9a:	4b03      	ldr	r3, [pc, #12]	@ (8006ea8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
	}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20000f28 	.word	0x20000f28

08006eac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006eb6:	4b21      	ldr	r3, [pc, #132]	@ (8006f3c <prvAddCurrentTaskToDelayedList+0x90>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ebc:	4b20      	ldr	r3, [pc, #128]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe f87c 	bl	8004fc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d10a      	bne.n	8006ee6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4619      	mov	r1, r3
 8006ede:	4819      	ldr	r0, [pc, #100]	@ (8006f44 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ee0:	f7fe f811 	bl	8004f06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ee4:	e026      	b.n	8006f34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4413      	add	r3, r2
 8006eec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006eee:	4b14      	ldr	r3, [pc, #80]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d209      	bcs.n	8006f12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006efe:	4b12      	ldr	r3, [pc, #72]	@ (8006f48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b0f      	ldr	r3, [pc, #60]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4610      	mov	r0, r2
 8006f0c:	f7fe f81f 	bl	8004f4e <vListInsert>
}
 8006f10:	e010      	b.n	8006f34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f12:	4b0e      	ldr	r3, [pc, #56]	@ (8006f4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b0a      	ldr	r3, [pc, #40]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f7fe f815 	bl	8004f4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f24:	4b0a      	ldr	r3, [pc, #40]	@ (8006f50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d202      	bcs.n	8006f34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f2e:	4a08      	ldr	r2, [pc, #32]	@ (8006f50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	6013      	str	r3, [r2, #0]
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	20001400 	.word	0x20001400
 8006f40:	20000f28 	.word	0x20000f28
 8006f44:	200013e8 	.word	0x200013e8
 8006f48:	200013b8 	.word	0x200013b8
 8006f4c:	200013b4 	.word	0x200013b4
 8006f50:	2000141c 	.word	0x2000141c

08006f54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	@ 0x28
 8006f58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f5e:	f000 fb21 	bl	80075a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f62:	4b1e      	ldr	r3, [pc, #120]	@ (8006fdc <xTimerCreateTimerTask+0x88>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d021      	beq.n	8006fae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f72:	1d3a      	adds	r2, r7, #4
 8006f74:	f107 0108 	add.w	r1, r7, #8
 8006f78:	f107 030c 	add.w	r3, r7, #12
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fd ff7b 	bl	8004e78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	9202      	str	r2, [sp, #8]
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	2300      	movs	r3, #0
 8006f92:	460a      	mov	r2, r1
 8006f94:	4912      	ldr	r1, [pc, #72]	@ (8006fe0 <xTimerCreateTimerTask+0x8c>)
 8006f96:	4813      	ldr	r0, [pc, #76]	@ (8006fe4 <xTimerCreateTimerTask+0x90>)
 8006f98:	f7fe ff86 	bl	8005ea8 <xTaskCreateStatic>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	4a12      	ldr	r2, [pc, #72]	@ (8006fe8 <xTimerCreateTimerTask+0x94>)
 8006fa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006fa2:	4b11      	ldr	r3, [pc, #68]	@ (8006fe8 <xTimerCreateTimerTask+0x94>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006faa:	2301      	movs	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10d      	bne.n	8006fd0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb8:	b672      	cpsid	i
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	b662      	cpsie	i
 8006fc8:	613b      	str	r3, [r7, #16]
}
 8006fca:	bf00      	nop
 8006fcc:	bf00      	nop
 8006fce:	e7fd      	b.n	8006fcc <xTimerCreateTimerTask+0x78>
	return xReturn;
 8006fd0:	697b      	ldr	r3, [r7, #20]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20001458 	.word	0x20001458
 8006fe0:	08007f94 	.word	0x08007f94
 8006fe4:	0800712d 	.word	0x0800712d
 8006fe8:	2000145c 	.word	0x2000145c

08006fec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	@ 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10d      	bne.n	8007020 <xTimerGenericCommand+0x34>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	b672      	cpsid	i
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	b662      	cpsie	i
 8007018:	623b      	str	r3, [r7, #32]
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	e7fd      	b.n	800701c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007020:	4b19      	ldr	r3, [pc, #100]	@ (8007088 <xTimerGenericCommand+0x9c>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d02a      	beq.n	800707e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b05      	cmp	r3, #5
 8007038:	dc18      	bgt.n	800706c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800703a:	f7ff fda1 	bl	8006b80 <xTaskGetSchedulerState>
 800703e:	4603      	mov	r3, r0
 8007040:	2b02      	cmp	r3, #2
 8007042:	d109      	bne.n	8007058 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007044:	4b10      	ldr	r3, [pc, #64]	@ (8007088 <xTimerGenericCommand+0x9c>)
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	f107 0110 	add.w	r1, r7, #16
 800704c:	2300      	movs	r3, #0
 800704e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007050:	f7fe f9f6 	bl	8005440 <xQueueGenericSend>
 8007054:	6278      	str	r0, [r7, #36]	@ 0x24
 8007056:	e012      	b.n	800707e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007058:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <xTimerGenericCommand+0x9c>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	f107 0110 	add.w	r1, r7, #16
 8007060:	2300      	movs	r3, #0
 8007062:	2200      	movs	r2, #0
 8007064:	f7fe f9ec 	bl	8005440 <xQueueGenericSend>
 8007068:	6278      	str	r0, [r7, #36]	@ 0x24
 800706a:	e008      	b.n	800707e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <xTimerGenericCommand+0x9c>)
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	f107 0110 	add.w	r1, r7, #16
 8007074:	2300      	movs	r3, #0
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	f7fe faec 	bl	8005654 <xQueueGenericSendFromISR>
 800707c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007080:	4618      	mov	r0, r3
 8007082:	3728      	adds	r7, #40	@ 0x28
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	20001458 	.word	0x20001458

0800708c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af02      	add	r7, sp, #8
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007096:	4b24      	ldr	r3, [pc, #144]	@ (8007128 <prvProcessExpiredTimer+0x9c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7fd ff8b 	bl	8004fc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d025      	beq.n	8007104 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	699a      	ldr	r2, [r3, #24]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	18d1      	adds	r1, r2, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	6978      	ldr	r0, [r7, #20]
 80070c6:	f000 f8d7 	bl	8007278 <prvInsertTimerInActiveList>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d022      	beq.n	8007116 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070d0:	2300      	movs	r3, #0
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	2300      	movs	r3, #0
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	2100      	movs	r1, #0
 80070da:	6978      	ldr	r0, [r7, #20]
 80070dc:	f7ff ff86 	bl	8006fec <xTimerGenericCommand>
 80070e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d116      	bne.n	8007116 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	b672      	cpsid	i
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	b662      	cpsie	i
 80070fc:	60fb      	str	r3, [r7, #12]
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	e7fd      	b.n	8007100 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	b2da      	uxtb	r2, r3
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	6978      	ldr	r0, [r7, #20]
 800711c:	4798      	blx	r3
}
 800711e:	bf00      	nop
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20001450 	.word	0x20001450

0800712c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007134:	f107 0308 	add.w	r3, r7, #8
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f859 	bl	80071f0 <prvGetNextExpireTime>
 800713e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4619      	mov	r1, r3
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f805 	bl	8007154 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800714a:	f000 f8d7 	bl	80072fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800714e:	bf00      	nop
 8007150:	e7f0      	b.n	8007134 <prvTimerTask+0x8>
	...

08007154 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800715e:	f7ff f8f5 	bl	800634c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007162:	f107 0308 	add.w	r3, r7, #8
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f866 	bl	8007238 <prvSampleTimeNow>
 800716c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d130      	bne.n	80071d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <prvProcessTimerOrBlockTask+0x3c>
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	429a      	cmp	r2, r3
 8007180:	d806      	bhi.n	8007190 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007182:	f7ff f8f1 	bl	8006368 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007186:	68f9      	ldr	r1, [r7, #12]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff ff7f 	bl	800708c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800718e:	e024      	b.n	80071da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d008      	beq.n	80071a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007196:	4b13      	ldr	r3, [pc, #76]	@ (80071e4 <prvProcessTimerOrBlockTask+0x90>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <prvProcessTimerOrBlockTask+0x50>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <prvProcessTimerOrBlockTask+0x52>
 80071a4:	2300      	movs	r3, #0
 80071a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80071a8:	4b0f      	ldr	r3, [pc, #60]	@ (80071e8 <prvProcessTimerOrBlockTask+0x94>)
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f7fe fe43 	bl	8005e40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80071ba:	f7ff f8d5 	bl	8006368 <xTaskResumeAll>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071c4:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <prvProcessTimerOrBlockTask+0x98>)
 80071c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	f3bf 8f6f 	isb	sy
}
 80071d4:	e001      	b.n	80071da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071d6:	f7ff f8c7 	bl	8006368 <xTaskResumeAll>
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	20001454 	.word	0x20001454
 80071e8:	20001458 	.word	0x20001458
 80071ec:	e000ed04 	.word	0xe000ed04

080071f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007234 <prvGetNextExpireTime+0x44>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <prvGetNextExpireTime+0x16>
 8007202:	2201      	movs	r2, #1
 8007204:	e000      	b.n	8007208 <prvGetNextExpireTime+0x18>
 8007206:	2200      	movs	r2, #0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d105      	bne.n	8007220 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007214:	4b07      	ldr	r3, [pc, #28]	@ (8007234 <prvGetNextExpireTime+0x44>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	e001      	b.n	8007224 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007224:	68fb      	ldr	r3, [r7, #12]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20001450 	.word	0x20001450

08007238 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007240:	f7ff f932 	bl	80064a8 <xTaskGetTickCount>
 8007244:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007246:	4b0b      	ldr	r3, [pc, #44]	@ (8007274 <prvSampleTimeNow+0x3c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	429a      	cmp	r2, r3
 800724e:	d205      	bcs.n	800725c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007250:	f000 f940 	bl	80074d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	e002      	b.n	8007262 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007262:	4a04      	ldr	r2, [pc, #16]	@ (8007274 <prvSampleTimeNow+0x3c>)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007268:	68fb      	ldr	r3, [r7, #12]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20001460 	.word	0x20001460

08007278 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	429a      	cmp	r2, r3
 800729c:	d812      	bhi.n	80072c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	1ad2      	subs	r2, r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d302      	bcc.n	80072b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80072ac:	2301      	movs	r3, #1
 80072ae:	617b      	str	r3, [r7, #20]
 80072b0:	e01b      	b.n	80072ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80072b2:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <prvInsertTimerInActiveList+0x7c>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7fd fe46 	bl	8004f4e <vListInsert>
 80072c2:	e012      	b.n	80072ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d206      	bcs.n	80072da <prvInsertTimerInActiveList+0x62>
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d302      	bcc.n	80072da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072d4:	2301      	movs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	e007      	b.n	80072ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072da:	4b07      	ldr	r3, [pc, #28]	@ (80072f8 <prvInsertTimerInActiveList+0x80>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3304      	adds	r3, #4
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f7fd fe32 	bl	8004f4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072ea:	697b      	ldr	r3, [r7, #20]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20001454 	.word	0x20001454
 80072f8:	20001450 	.word	0x20001450

080072fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08e      	sub	sp, #56	@ 0x38
 8007300:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007302:	e0d4      	b.n	80074ae <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	da1b      	bge.n	8007342 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800730a:	1d3b      	adds	r3, r7, #4
 800730c:	3304      	adds	r3, #4
 800730e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10d      	bne.n	8007332 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731a:	b672      	cpsid	i
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	b662      	cpsie	i
 800732a:	61fb      	str	r3, [r7, #28]
}
 800732c:	bf00      	nop
 800732e:	bf00      	nop
 8007330:	e7fd      	b.n	800732e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007338:	6850      	ldr	r0, [r2, #4]
 800733a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800733c:	6892      	ldr	r2, [r2, #8]
 800733e:	4611      	mov	r1, r2
 8007340:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	f2c0 80b2 	blt.w	80074ae <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800734e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d004      	beq.n	8007360 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007358:	3304      	adds	r3, #4
 800735a:	4618      	mov	r0, r3
 800735c:	f7fd fe30 	bl	8004fc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007360:	463b      	mov	r3, r7
 8007362:	4618      	mov	r0, r3
 8007364:	f7ff ff68 	bl	8007238 <prvSampleTimeNow>
 8007368:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b09      	cmp	r3, #9
 800736e:	f200 809b 	bhi.w	80074a8 <prvProcessReceivedCommands+0x1ac>
 8007372:	a201      	add	r2, pc, #4	@ (adr r2, 8007378 <prvProcessReceivedCommands+0x7c>)
 8007374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007378:	080073a1 	.word	0x080073a1
 800737c:	080073a1 	.word	0x080073a1
 8007380:	080073a1 	.word	0x080073a1
 8007384:	0800741b 	.word	0x0800741b
 8007388:	0800742f 	.word	0x0800742f
 800738c:	0800747f 	.word	0x0800747f
 8007390:	080073a1 	.word	0x080073a1
 8007394:	080073a1 	.word	0x080073a1
 8007398:	0800741b 	.word	0x0800741b
 800739c:	0800742f 	.word	0x0800742f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	18d1      	adds	r1, r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073c0:	f7ff ff5a 	bl	8007278 <prvInsertTimerInActiveList>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d070      	beq.n	80074ac <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d065      	beq.n	80074ac <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	441a      	add	r2, r3
 80073e8:	2300      	movs	r3, #0
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	2300      	movs	r3, #0
 80073ee:	2100      	movs	r1, #0
 80073f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073f2:	f7ff fdfb 	bl	8006fec <xTimerGenericCommand>
 80073f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d156      	bne.n	80074ac <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	b672      	cpsid	i
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	b662      	cpsie	i
 8007412:	61bb      	str	r3, [r7, #24]
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	e7fd      	b.n	8007416 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	b2da      	uxtb	r2, r3
 8007426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007428:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800742c:	e03f      	b.n	80074ae <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800742e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007430:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007434:	f043 0301 	orr.w	r3, r3, #1
 8007438:	b2da      	uxtb	r2, r3
 800743a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800743c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10d      	bne.n	800746a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	b672      	cpsid	i
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	b662      	cpsie	i
 8007462:	617b      	str	r3, [r7, #20]
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	e7fd      	b.n	8007466 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	699a      	ldr	r2, [r3, #24]
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	18d1      	adds	r1, r2, r3
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007478:	f7ff fefe 	bl	8007278 <prvInsertTimerInActiveList>
					break;
 800747c:	e017      	b.n	80074ae <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800748c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800748e:	f000 fbd1 	bl	8007c34 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007492:	e00c      	b.n	80074ae <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007496:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074a6:	e002      	b.n	80074ae <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80074a8:	bf00      	nop
 80074aa:	e000      	b.n	80074ae <prvProcessReceivedCommands+0x1b2>
					break;
 80074ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ae:	4b08      	ldr	r3, [pc, #32]	@ (80074d0 <prvProcessReceivedCommands+0x1d4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1d39      	adds	r1, r7, #4
 80074b4:	2200      	movs	r2, #0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe f970 	bl	800579c <xQueueReceive>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f af20 	bne.w	8007304 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	3730      	adds	r7, #48	@ 0x30
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20001458 	.word	0x20001458

080074d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074da:	e04b      	b.n	8007574 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074dc:	4b2f      	ldr	r3, [pc, #188]	@ (800759c <prvSwitchTimerLists+0xc8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e6:	4b2d      	ldr	r3, [pc, #180]	@ (800759c <prvSwitchTimerLists+0xc8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fd fd63 	bl	8004fc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007508:	f003 0304 	and.w	r3, r3, #4
 800750c:	2b00      	cmp	r3, #0
 800750e:	d031      	beq.n	8007574 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	4413      	add	r3, r2
 8007518:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	429a      	cmp	r2, r3
 8007520:	d90e      	bls.n	8007540 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800752e:	4b1b      	ldr	r3, [pc, #108]	@ (800759c <prvSwitchTimerLists+0xc8>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f7fd fd08 	bl	8004f4e <vListInsert>
 800753e:	e019      	b.n	8007574 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007540:	2300      	movs	r3, #0
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	2100      	movs	r1, #0
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fd4e 	bl	8006fec <xTimerGenericCommand>
 8007550:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10d      	bne.n	8007574 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755c:	b672      	cpsid	i
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	b662      	cpsie	i
 800756c:	603b      	str	r3, [r7, #0]
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	e7fd      	b.n	8007570 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007574:	4b09      	ldr	r3, [pc, #36]	@ (800759c <prvSwitchTimerLists+0xc8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1ae      	bne.n	80074dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800757e:	4b07      	ldr	r3, [pc, #28]	@ (800759c <prvSwitchTimerLists+0xc8>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007584:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <prvSwitchTimerLists+0xcc>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a04      	ldr	r2, [pc, #16]	@ (800759c <prvSwitchTimerLists+0xc8>)
 800758a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800758c:	4a04      	ldr	r2, [pc, #16]	@ (80075a0 <prvSwitchTimerLists+0xcc>)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	6013      	str	r3, [r2, #0]
}
 8007592:	bf00      	nop
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	20001450 	.word	0x20001450
 80075a0:	20001454 	.word	0x20001454

080075a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80075aa:	f000 f947 	bl	800783c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80075ae:	4b15      	ldr	r3, [pc, #84]	@ (8007604 <prvCheckForValidListAndQueue+0x60>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d120      	bne.n	80075f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075b6:	4814      	ldr	r0, [pc, #80]	@ (8007608 <prvCheckForValidListAndQueue+0x64>)
 80075b8:	f7fd fc78 	bl	8004eac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075bc:	4813      	ldr	r0, [pc, #76]	@ (800760c <prvCheckForValidListAndQueue+0x68>)
 80075be:	f7fd fc75 	bl	8004eac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075c2:	4b13      	ldr	r3, [pc, #76]	@ (8007610 <prvCheckForValidListAndQueue+0x6c>)
 80075c4:	4a10      	ldr	r2, [pc, #64]	@ (8007608 <prvCheckForValidListAndQueue+0x64>)
 80075c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075c8:	4b12      	ldr	r3, [pc, #72]	@ (8007614 <prvCheckForValidListAndQueue+0x70>)
 80075ca:	4a10      	ldr	r2, [pc, #64]	@ (800760c <prvCheckForValidListAndQueue+0x68>)
 80075cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075ce:	2300      	movs	r3, #0
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4b11      	ldr	r3, [pc, #68]	@ (8007618 <prvCheckForValidListAndQueue+0x74>)
 80075d4:	4a11      	ldr	r2, [pc, #68]	@ (800761c <prvCheckForValidListAndQueue+0x78>)
 80075d6:	2110      	movs	r1, #16
 80075d8:	200a      	movs	r0, #10
 80075da:	f7fd fd87 	bl	80050ec <xQueueGenericCreateStatic>
 80075de:	4603      	mov	r3, r0
 80075e0:	4a08      	ldr	r2, [pc, #32]	@ (8007604 <prvCheckForValidListAndQueue+0x60>)
 80075e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075e4:	4b07      	ldr	r3, [pc, #28]	@ (8007604 <prvCheckForValidListAndQueue+0x60>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075ec:	4b05      	ldr	r3, [pc, #20]	@ (8007604 <prvCheckForValidListAndQueue+0x60>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	490b      	ldr	r1, [pc, #44]	@ (8007620 <prvCheckForValidListAndQueue+0x7c>)
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fbfa 	bl	8005dec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075f8:	f000 f956 	bl	80078a8 <vPortExitCritical>
}
 80075fc:	bf00      	nop
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20001458 	.word	0x20001458
 8007608:	20001428 	.word	0x20001428
 800760c:	2000143c 	.word	0x2000143c
 8007610:	20001450 	.word	0x20001450
 8007614:	20001454 	.word	0x20001454
 8007618:	20001504 	.word	0x20001504
 800761c:	20001464 	.word	0x20001464
 8007620:	08007f9c 	.word	0x08007f9c

08007624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3b04      	subs	r3, #4
 8007634:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800763c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3b04      	subs	r3, #4
 8007642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f023 0201 	bic.w	r2, r3, #1
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3b04      	subs	r3, #4
 8007652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007654:	4a0c      	ldr	r2, [pc, #48]	@ (8007688 <pxPortInitialiseStack+0x64>)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b14      	subs	r3, #20
 800765e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3b04      	subs	r3, #4
 800766a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f06f 0202 	mvn.w	r2, #2
 8007672:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3b20      	subs	r3, #32
 8007678:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800767a:	68fb      	ldr	r3, [r7, #12]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	0800768d 	.word	0x0800768d

0800768c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007696:	4b15      	ldr	r3, [pc, #84]	@ (80076ec <prvTaskExitError+0x60>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800769e:	d00d      	beq.n	80076bc <prvTaskExitError+0x30>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a4:	b672      	cpsid	i
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	b662      	cpsie	i
 80076b4:	60fb      	str	r3, [r7, #12]
}
 80076b6:	bf00      	nop
 80076b8:	bf00      	nop
 80076ba:	e7fd      	b.n	80076b8 <prvTaskExitError+0x2c>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c0:	b672      	cpsid	i
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	b662      	cpsie	i
 80076d0:	60bb      	str	r3, [r7, #8]
}
 80076d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076d4:	bf00      	nop
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d0fc      	beq.n	80076d6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076dc:	bf00      	nop
 80076de:	bf00      	nop
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	2000000c 	.word	0x2000000c

080076f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076f0:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <pxCurrentTCBConst2>)
 80076f2:	6819      	ldr	r1, [r3, #0]
 80076f4:	6808      	ldr	r0, [r1, #0]
 80076f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fa:	f380 8809 	msr	PSP, r0
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f04f 0000 	mov.w	r0, #0
 8007706:	f380 8811 	msr	BASEPRI, r0
 800770a:	4770      	bx	lr
 800770c:	f3af 8000 	nop.w

08007710 <pxCurrentTCBConst2>:
 8007710:	20000f28 	.word	0x20000f28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop

08007718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007718:	4808      	ldr	r0, [pc, #32]	@ (800773c <prvPortStartFirstTask+0x24>)
 800771a:	6800      	ldr	r0, [r0, #0]
 800771c:	6800      	ldr	r0, [r0, #0]
 800771e:	f380 8808 	msr	MSP, r0
 8007722:	f04f 0000 	mov.w	r0, #0
 8007726:	f380 8814 	msr	CONTROL, r0
 800772a:	b662      	cpsie	i
 800772c:	b661      	cpsie	f
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	df00      	svc	0
 8007738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800773a:	bf00      	nop
 800773c:	e000ed08 	.word	0xe000ed08

08007740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007746:	4b37      	ldr	r3, [pc, #220]	@ (8007824 <xPortStartScheduler+0xe4>)
 8007748:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	22ff      	movs	r2, #255	@ 0xff
 8007756:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b2db      	uxtb	r3, r3
 800775e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007768:	b2da      	uxtb	r2, r3
 800776a:	4b2f      	ldr	r3, [pc, #188]	@ (8007828 <xPortStartScheduler+0xe8>)
 800776c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800776e:	4b2f      	ldr	r3, [pc, #188]	@ (800782c <xPortStartScheduler+0xec>)
 8007770:	2207      	movs	r2, #7
 8007772:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007774:	e009      	b.n	800778a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007776:	4b2d      	ldr	r3, [pc, #180]	@ (800782c <xPortStartScheduler+0xec>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3b01      	subs	r3, #1
 800777c:	4a2b      	ldr	r2, [pc, #172]	@ (800782c <xPortStartScheduler+0xec>)
 800777e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	b2db      	uxtb	r3, r3
 8007788:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007792:	2b80      	cmp	r3, #128	@ 0x80
 8007794:	d0ef      	beq.n	8007776 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007796:	4b25      	ldr	r3, [pc, #148]	@ (800782c <xPortStartScheduler+0xec>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f1c3 0307 	rsb	r3, r3, #7
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d00d      	beq.n	80077be <xPortStartScheduler+0x7e>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a6:	b672      	cpsid	i
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	b662      	cpsie	i
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077be:	4b1b      	ldr	r3, [pc, #108]	@ (800782c <xPortStartScheduler+0xec>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	4a19      	ldr	r2, [pc, #100]	@ (800782c <xPortStartScheduler+0xec>)
 80077c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077c8:	4b18      	ldr	r3, [pc, #96]	@ (800782c <xPortStartScheduler+0xec>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077d0:	4a16      	ldr	r2, [pc, #88]	@ (800782c <xPortStartScheduler+0xec>)
 80077d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077dc:	4b14      	ldr	r3, [pc, #80]	@ (8007830 <xPortStartScheduler+0xf0>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a13      	ldr	r2, [pc, #76]	@ (8007830 <xPortStartScheduler+0xf0>)
 80077e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80077e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077e8:	4b11      	ldr	r3, [pc, #68]	@ (8007830 <xPortStartScheduler+0xf0>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a10      	ldr	r2, [pc, #64]	@ (8007830 <xPortStartScheduler+0xf0>)
 80077ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80077f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077f4:	f000 f8dc 	bl	80079b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007834 <xPortStartScheduler+0xf4>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077fe:	f000 f8fb 	bl	80079f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007802:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <xPortStartScheduler+0xf8>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a0c      	ldr	r2, [pc, #48]	@ (8007838 <xPortStartScheduler+0xf8>)
 8007808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800780c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800780e:	f7ff ff83 	bl	8007718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007812:	f7fe ff27 	bl	8006664 <vTaskSwitchContext>
	prvTaskExitError();
 8007816:	f7ff ff39 	bl	800768c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	e000e400 	.word	0xe000e400
 8007828:	20001554 	.word	0x20001554
 800782c:	20001558 	.word	0x20001558
 8007830:	e000ed20 	.word	0xe000ed20
 8007834:	2000000c 	.word	0x2000000c
 8007838:	e000ef34 	.word	0xe000ef34

0800783c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
	__asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007846:	b672      	cpsid	i
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	b662      	cpsie	i
 8007856:	607b      	str	r3, [r7, #4]
}
 8007858:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800785a:	4b11      	ldr	r3, [pc, #68]	@ (80078a0 <vPortEnterCritical+0x64>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3301      	adds	r3, #1
 8007860:	4a0f      	ldr	r2, [pc, #60]	@ (80078a0 <vPortEnterCritical+0x64>)
 8007862:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007864:	4b0e      	ldr	r3, [pc, #56]	@ (80078a0 <vPortEnterCritical+0x64>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d112      	bne.n	8007892 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800786c:	4b0d      	ldr	r3, [pc, #52]	@ (80078a4 <vPortEnterCritical+0x68>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00d      	beq.n	8007892 <vPortEnterCritical+0x56>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	b672      	cpsid	i
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	b662      	cpsie	i
 800788a:	603b      	str	r3, [r7, #0]
}
 800788c:	bf00      	nop
 800788e:	bf00      	nop
 8007890:	e7fd      	b.n	800788e <vPortEnterCritical+0x52>
	}
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	2000000c 	.word	0x2000000c
 80078a4:	e000ed04 	.word	0xe000ed04

080078a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078ae:	4b13      	ldr	r3, [pc, #76]	@ (80078fc <vPortExitCritical+0x54>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10d      	bne.n	80078d2 <vPortExitCritical+0x2a>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ba:	b672      	cpsid	i
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	b662      	cpsie	i
 80078ca:	607b      	str	r3, [r7, #4]
}
 80078cc:	bf00      	nop
 80078ce:	bf00      	nop
 80078d0:	e7fd      	b.n	80078ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80078d2:	4b0a      	ldr	r3, [pc, #40]	@ (80078fc <vPortExitCritical+0x54>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	4a08      	ldr	r2, [pc, #32]	@ (80078fc <vPortExitCritical+0x54>)
 80078da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078dc:	4b07      	ldr	r3, [pc, #28]	@ (80078fc <vPortExitCritical+0x54>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d105      	bne.n	80078f0 <vPortExitCritical+0x48>
 80078e4:	2300      	movs	r3, #0
 80078e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f383 8811 	msr	BASEPRI, r3
}
 80078ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr
 80078fc:	2000000c 	.word	0x2000000c

08007900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007900:	f3ef 8009 	mrs	r0, PSP
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	4b15      	ldr	r3, [pc, #84]	@ (8007960 <pxCurrentTCBConst>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f01e 0f10 	tst.w	lr, #16
 8007910:	bf08      	it	eq
 8007912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	6010      	str	r0, [r2, #0]
 800791c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007924:	b672      	cpsid	i
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	b662      	cpsie	i
 8007934:	f7fe fe96 	bl	8006664 <vTaskSwitchContext>
 8007938:	f04f 0000 	mov.w	r0, #0
 800793c:	f380 8811 	msr	BASEPRI, r0
 8007940:	bc09      	pop	{r0, r3}
 8007942:	6819      	ldr	r1, [r3, #0]
 8007944:	6808      	ldr	r0, [r1, #0]
 8007946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794a:	f01e 0f10 	tst.w	lr, #16
 800794e:	bf08      	it	eq
 8007950:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007954:	f380 8809 	msr	PSP, r0
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop

08007960 <pxCurrentTCBConst>:
 8007960:	20000f28 	.word	0x20000f28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop

08007968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b082      	sub	sp, #8
 800796c:	af00      	add	r7, sp, #0
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007972:	b672      	cpsid	i
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	b662      	cpsie	i
 8007982:	607b      	str	r3, [r7, #4]
}
 8007984:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007986:	f7fe fdb1 	bl	80064ec <xTaskIncrementTick>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007990:	4b06      	ldr	r3, [pc, #24]	@ (80079ac <SysTick_Handler+0x44>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	2300      	movs	r3, #0
 800799a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f383 8811 	msr	BASEPRI, r3
}
 80079a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80079b4:	4b0b      	ldr	r3, [pc, #44]	@ (80079e4 <vPortSetupTimerInterrupt+0x34>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80079ba:	4b0b      	ldr	r3, [pc, #44]	@ (80079e8 <vPortSetupTimerInterrupt+0x38>)
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079c0:	4b0a      	ldr	r3, [pc, #40]	@ (80079ec <vPortSetupTimerInterrupt+0x3c>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a0a      	ldr	r2, [pc, #40]	@ (80079f0 <vPortSetupTimerInterrupt+0x40>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	099b      	lsrs	r3, r3, #6
 80079cc:	4a09      	ldr	r2, [pc, #36]	@ (80079f4 <vPortSetupTimerInterrupt+0x44>)
 80079ce:	3b01      	subs	r3, #1
 80079d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079d2:	4b04      	ldr	r3, [pc, #16]	@ (80079e4 <vPortSetupTimerInterrupt+0x34>)
 80079d4:	2207      	movs	r2, #7
 80079d6:	601a      	str	r2, [r3, #0]
}
 80079d8:	bf00      	nop
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	e000e010 	.word	0xe000e010
 80079e8:	e000e018 	.word	0xe000e018
 80079ec:	20000000 	.word	0x20000000
 80079f0:	10624dd3 	.word	0x10624dd3
 80079f4:	e000e014 	.word	0xe000e014

080079f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007a08 <vPortEnableVFP+0x10>
 80079fc:	6801      	ldr	r1, [r0, #0]
 80079fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007a02:	6001      	str	r1, [r0, #0]
 8007a04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a06:	bf00      	nop
 8007a08:	e000ed88 	.word	0xe000ed88

08007a0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007a12:	f3ef 8305 	mrs	r3, IPSR
 8007a16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b0f      	cmp	r3, #15
 8007a1c:	d917      	bls.n	8007a4e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8007a88 <vPortValidateInterruptPriority+0x7c>)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a28:	4b18      	ldr	r3, [pc, #96]	@ (8007a8c <vPortValidateInterruptPriority+0x80>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	7afa      	ldrb	r2, [r7, #11]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d20d      	bcs.n	8007a4e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a36:	b672      	cpsid	i
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	b662      	cpsie	i
 8007a46:	607b      	str	r3, [r7, #4]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a4e:	4b10      	ldr	r3, [pc, #64]	@ (8007a90 <vPortValidateInterruptPriority+0x84>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a56:	4b0f      	ldr	r3, [pc, #60]	@ (8007a94 <vPortValidateInterruptPriority+0x88>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d90d      	bls.n	8007a7a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	b672      	cpsid	i
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	b662      	cpsie	i
 8007a72:	603b      	str	r3, [r7, #0]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <vPortValidateInterruptPriority+0x6a>
	}
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	e000e3f0 	.word	0xe000e3f0
 8007a8c:	20001554 	.word	0x20001554
 8007a90:	e000ed0c 	.word	0xe000ed0c
 8007a94:	20001558 	.word	0x20001558

08007a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b08a      	sub	sp, #40	@ 0x28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007aa4:	f7fe fc52 	bl	800634c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8007c20 <pvPortMalloc+0x188>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ab0:	f000 f920 	bl	8007cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ab4:	4b5b      	ldr	r3, [pc, #364]	@ (8007c24 <pvPortMalloc+0x18c>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f040 8094 	bne.w	8007bea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d020      	beq.n	8007b0a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007ac8:	2208      	movs	r2, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4413      	add	r3, r2
 8007ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d017      	beq.n	8007b0a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f023 0307 	bic.w	r3, r3, #7
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <pvPortMalloc+0x72>
	__asm volatile
 8007aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af2:	b672      	cpsid	i
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	b662      	cpsie	i
 8007b02:	617b      	str	r3, [r7, #20]
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	e7fd      	b.n	8007b06 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d06c      	beq.n	8007bea <pvPortMalloc+0x152>
 8007b10:	4b45      	ldr	r3, [pc, #276]	@ (8007c28 <pvPortMalloc+0x190>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d867      	bhi.n	8007bea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b1a:	4b44      	ldr	r3, [pc, #272]	@ (8007c2c <pvPortMalloc+0x194>)
 8007b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007b1e:	4b43      	ldr	r3, [pc, #268]	@ (8007c2c <pvPortMalloc+0x194>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b24:	e004      	b.n	8007b30 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8007b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d903      	bls.n	8007b42 <pvPortMalloc+0xaa>
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f1      	bne.n	8007b26 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b42:	4b37      	ldr	r3, [pc, #220]	@ (8007c20 <pvPortMalloc+0x188>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d04e      	beq.n	8007bea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2208      	movs	r2, #8
 8007b52:	4413      	add	r3, r2
 8007b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	6a3b      	ldr	r3, [r7, #32]
 8007b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	1ad2      	subs	r2, r2, r3
 8007b66:	2308      	movs	r3, #8
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d922      	bls.n	8007bb4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00d      	beq.n	8007b9c <pvPortMalloc+0x104>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b84:	b672      	cpsid	i
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	b662      	cpsie	i
 8007b94:	613b      	str	r3, [r7, #16]
}
 8007b96:	bf00      	nop
 8007b98:	bf00      	nop
 8007b9a:	e7fd      	b.n	8007b98 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	1ad2      	subs	r2, r2, r3
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bae:	69b8      	ldr	r0, [r7, #24]
 8007bb0:	f000 f902 	bl	8007db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8007c28 <pvPortMalloc+0x190>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8007c28 <pvPortMalloc+0x190>)
 8007bc0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bc2:	4b19      	ldr	r3, [pc, #100]	@ (8007c28 <pvPortMalloc+0x190>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007c30 <pvPortMalloc+0x198>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d203      	bcs.n	8007bd6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007bce:	4b16      	ldr	r3, [pc, #88]	@ (8007c28 <pvPortMalloc+0x190>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a17      	ldr	r2, [pc, #92]	@ (8007c30 <pvPortMalloc+0x198>)
 8007bd4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	4b12      	ldr	r3, [pc, #72]	@ (8007c24 <pvPortMalloc+0x18c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bea:	f7fe fbbd 	bl	8006368 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00d      	beq.n	8007c14 <pvPortMalloc+0x17c>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bfc:	b672      	cpsid	i
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	b662      	cpsie	i
 8007c0c:	60fb      	str	r3, [r7, #12]
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	e7fd      	b.n	8007c10 <pvPortMalloc+0x178>
	return pvReturn;
 8007c14:	69fb      	ldr	r3, [r7, #28]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3728      	adds	r7, #40	@ 0x28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20005164 	.word	0x20005164
 8007c24:	20005170 	.word	0x20005170
 8007c28:	20005168 	.word	0x20005168
 8007c2c:	2000515c 	.word	0x2000515c
 8007c30:	2000516c 	.word	0x2000516c

08007c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d04e      	beq.n	8007ce4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c46:	2308      	movs	r3, #8
 8007c48:	425b      	negs	r3, r3
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	4b24      	ldr	r3, [pc, #144]	@ (8007cec <vPortFree+0xb8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10d      	bne.n	8007c7e <vPortFree+0x4a>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	b672      	cpsid	i
 8007c68:	f383 8811 	msr	BASEPRI, r3
 8007c6c:	f3bf 8f6f 	isb	sy
 8007c70:	f3bf 8f4f 	dsb	sy
 8007c74:	b662      	cpsie	i
 8007c76:	60fb      	str	r3, [r7, #12]
}
 8007c78:	bf00      	nop
 8007c7a:	bf00      	nop
 8007c7c:	e7fd      	b.n	8007c7a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00d      	beq.n	8007ca2 <vPortFree+0x6e>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8a:	b672      	cpsid	i
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	b662      	cpsie	i
 8007c9a:	60bb      	str	r3, [r7, #8]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	4b11      	ldr	r3, [pc, #68]	@ (8007cec <vPortFree+0xb8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4013      	ands	r3, r2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d019      	beq.n	8007ce4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d115      	bne.n	8007ce4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cec <vPortFree+0xb8>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007cc8:	f7fe fb40 	bl	800634c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	4b07      	ldr	r3, [pc, #28]	@ (8007cf0 <vPortFree+0xbc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	4a06      	ldr	r2, [pc, #24]	@ (8007cf0 <vPortFree+0xbc>)
 8007cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cda:	6938      	ldr	r0, [r7, #16]
 8007cdc:	f000 f86c 	bl	8007db8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007ce0:	f7fe fb42 	bl	8006368 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007ce4:	bf00      	nop
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20005170 	.word	0x20005170
 8007cf0:	20005168 	.word	0x20005168

08007cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cfa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007d00:	4b27      	ldr	r3, [pc, #156]	@ (8007da0 <prvHeapInit+0xac>)
 8007d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00c      	beq.n	8007d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3307      	adds	r3, #7
 8007d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0307 	bic.w	r3, r3, #7
 8007d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	4a1f      	ldr	r2, [pc, #124]	@ (8007da0 <prvHeapInit+0xac>)
 8007d24:	4413      	add	r3, r2
 8007d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007da4 <prvHeapInit+0xb0>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d32:	4b1c      	ldr	r3, [pc, #112]	@ (8007da4 <prvHeapInit+0xb0>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d40:	2208      	movs	r2, #8
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0307 	bic.w	r3, r3, #7
 8007d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4a15      	ldr	r2, [pc, #84]	@ (8007da8 <prvHeapInit+0xb4>)
 8007d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d56:	4b14      	ldr	r3, [pc, #80]	@ (8007da8 <prvHeapInit+0xb4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d5e:	4b12      	ldr	r3, [pc, #72]	@ (8007da8 <prvHeapInit+0xb4>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d74:	4b0c      	ldr	r3, [pc, #48]	@ (8007da8 <prvHeapInit+0xb4>)
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	4a0a      	ldr	r2, [pc, #40]	@ (8007dac <prvHeapInit+0xb8>)
 8007d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	4a09      	ldr	r2, [pc, #36]	@ (8007db0 <prvHeapInit+0xbc>)
 8007d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d8c:	4b09      	ldr	r3, [pc, #36]	@ (8007db4 <prvHeapInit+0xc0>)
 8007d8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d92:	601a      	str	r2, [r3, #0]
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	2000155c 	.word	0x2000155c
 8007da4:	2000515c 	.word	0x2000515c
 8007da8:	20005164 	.word	0x20005164
 8007dac:	2000516c 	.word	0x2000516c
 8007db0:	20005168 	.word	0x20005168
 8007db4:	20005170 	.word	0x20005170

08007db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007dc0:	4b28      	ldr	r3, [pc, #160]	@ (8007e64 <prvInsertBlockIntoFreeList+0xac>)
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	e002      	b.n	8007dcc <prvInsertBlockIntoFreeList+0x14>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d8f7      	bhi.n	8007dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d108      	bne.n	8007dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	441a      	add	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	441a      	add	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d118      	bne.n	8007e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	4b15      	ldr	r3, [pc, #84]	@ (8007e68 <prvInsertBlockIntoFreeList+0xb0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d00d      	beq.n	8007e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	441a      	add	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	e008      	b.n	8007e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e36:	4b0c      	ldr	r3, [pc, #48]	@ (8007e68 <prvInsertBlockIntoFreeList+0xb0>)
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	e003      	b.n	8007e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d002      	beq.n	8007e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e56:	bf00      	nop
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	2000515c 	.word	0x2000515c
 8007e68:	20005164 	.word	0x20005164

08007e6c <memset>:
 8007e6c:	4402      	add	r2, r0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d100      	bne.n	8007e76 <memset+0xa>
 8007e74:	4770      	bx	lr
 8007e76:	f803 1b01 	strb.w	r1, [r3], #1
 8007e7a:	e7f9      	b.n	8007e70 <memset+0x4>

08007e7c <__libc_init_array>:
 8007e7c:	b570      	push	{r4, r5, r6, lr}
 8007e7e:	4d0d      	ldr	r5, [pc, #52]	@ (8007eb4 <__libc_init_array+0x38>)
 8007e80:	4c0d      	ldr	r4, [pc, #52]	@ (8007eb8 <__libc_init_array+0x3c>)
 8007e82:	1b64      	subs	r4, r4, r5
 8007e84:	10a4      	asrs	r4, r4, #2
 8007e86:	2600      	movs	r6, #0
 8007e88:	42a6      	cmp	r6, r4
 8007e8a:	d109      	bne.n	8007ea0 <__libc_init_array+0x24>
 8007e8c:	4d0b      	ldr	r5, [pc, #44]	@ (8007ebc <__libc_init_array+0x40>)
 8007e8e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ec0 <__libc_init_array+0x44>)
 8007e90:	f000 f826 	bl	8007ee0 <_init>
 8007e94:	1b64      	subs	r4, r4, r5
 8007e96:	10a4      	asrs	r4, r4, #2
 8007e98:	2600      	movs	r6, #0
 8007e9a:	42a6      	cmp	r6, r4
 8007e9c:	d105      	bne.n	8007eaa <__libc_init_array+0x2e>
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea4:	4798      	blx	r3
 8007ea6:	3601      	adds	r6, #1
 8007ea8:	e7ee      	b.n	8007e88 <__libc_init_array+0xc>
 8007eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eae:	4798      	blx	r3
 8007eb0:	3601      	adds	r6, #1
 8007eb2:	e7f2      	b.n	8007e9a <__libc_init_array+0x1e>
 8007eb4:	08008040 	.word	0x08008040
 8007eb8:	08008040 	.word	0x08008040
 8007ebc:	08008040 	.word	0x08008040
 8007ec0:	08008044 	.word	0x08008044

08007ec4 <memcpy>:
 8007ec4:	440a      	add	r2, r1
 8007ec6:	4291      	cmp	r1, r2
 8007ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ecc:	d100      	bne.n	8007ed0 <memcpy+0xc>
 8007ece:	4770      	bx	lr
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eda:	4291      	cmp	r1, r2
 8007edc:	d1f9      	bne.n	8007ed2 <memcpy+0xe>
 8007ede:	bd10      	pop	{r4, pc}

08007ee0 <_init>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr

08007eec <_fini>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	bf00      	nop
 8007ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef2:	bc08      	pop	{r3}
 8007ef4:	469e      	mov	lr, r3
 8007ef6:	4770      	bx	lr
